[tool.ruff]
# 除外するファイル・ディレクトリ
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "target",
    ".vulture_whitelist.py",
]

# 1行の最大文字数
line-length = 120

# 対象Pythonバージョン
target-version = "py38"

[tool.ruff.lint]
# 実用的なルールセット（段階的導入）
select = [
    # 基本セット（ruff.tomlから）
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    
    # 追加セット（段階的に有効化）
    "N",   # naming conventions (汎用名検出)
    
    # 将来的に有効化
    # "D",   # pydocstyle (ドキュメント文字列)
    # "S",   # flake8-bandit (セキュリティ)
    # "PL",  # pylint (より厳格なチェック)
    # "C90", # McCabe complexity
]

# 無視するルール（ruff.tomlベース + 追加）
ignore = [
    # ruff.tomlからの実用的な除外
    "E501",    # line too long (管理済み)
    "E731",    # lambda assignment (有用な場合がある)
    "UP007",   # Union[X, Y] vs X | Y (3.8互換性)
    "SIM108",  # ternary operator (可読性を損なう場合)
    "RET504",  # unnecessary assignment before return (明確性のため)
    
    # docstring関連（段階的導入のため一時的に無効化）
    "D100",  # docstring in public module
    "D101",  # docstring in public class
    "D102",  # docstring in public method
    "D103",  # docstring in public function
    "D104",  # docstring in public package
    "D105",  # docstring in magic method
    "D107",  # docstring in __init__
    
    # その他
    "S101",     # assert文の使用（テストで必要）
    "PLR0913",  # too many arguments
    "PLR2004",  # magic value used in comparison
    "RUF001",   # 全角文字の使用（処理系に影響しない）
    "RUF002",   # 全角文字の使用（処理系に影響しない）
    "RUF003",   # 全角文字の使用（処理系に影響しない）
    "B027",     # 抽象クラスの空メソッド（optional override pattern）
    "SIM910",   # dict.get with None as default (辞書.get()の自動修正を無効化)
    "SIM401",   # dict.get()の使用を無効化（CLAUDE.mdルール適用）
]

# 1つの関数の最大行数
[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 50

# McCabe complexity (循環複雑度)
[tool.ruff.lint.mccabe]
max-complexity = 10

# 命名規約（汎用的すぎる名前を検出）
[tool.ruff.lint.pep8-naming]
# クラス名: PascalCase
classmethod-decorators = ["classmethod"]
staticmethod-decorators = ["staticmethod"]

# 汎用的すぎる変数名を禁止
ignore-names = [
    # 一時的に許可する名前（必要最小限）
    "i", "j", "k",        # ループカウンター
    "x", "y", "z",        # 座標系
    "f",                  # ファイルオブジェクト
    "e",                  # 例外オブジェクト
    "_",                  # 使用しない変数
]

# 禁止する汎用名（これらを使うとN999エラー）
extend-ignore-names = []

# docstring の設定
[tool.ruff.lint.pydocstyle]
convention = "google"  # Google style docstring

# インポート設定
[tool.ruff.lint.isort]
known-first-party = ["src"]
split-on-trailing-comma = true

# 禁止ワード・パターンの設定
[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.per-file-ignores]
# テストファイルでは一部のルールを緩和（ruff.toml + 追加）
"tests/**/*.py" = [
    "F401",    # unused imports in tests
    "F811",    # redefined names in tests
    "S101",    # assert文
    "PLR2004", # magic values
    "D",       # docstring requirements
    "N802",    # unittest setUp method names
]
# __init__.pyファイル（ruff.tomlから）
"**/__init__.py" = [
    "F401",    # unused imports in __init__ files
]
# scriptsディレクトリ（開発ツール用）
"scripts/**/*.py" = [
    "N802",    # ASTビジター等でPascalCase必要
]