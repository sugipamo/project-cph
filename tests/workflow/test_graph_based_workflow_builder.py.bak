"""
GraphBasedWorkflowBuilderのテスト
"""
import pytest
from unittest.mock import Mock, MagicMock, patch
from src.env.workflow.graph_based_workflow_builder import GraphBasedWorkflowBuilder
from src.env.workflow.request_execution_graph import RequestExecutionGraph, DependencyType
from src.operations.di_container import DIContainer
from src.env.types import EnvResourceController
from src.context.resolver.config_node import ConfigNode
from src.env.step_generation.step import Step, StepType


class TestGraphBasedWorkflowBuilder:
    """GraphBasedWorkflowBuilderのテストクラス"""
    
    @pytest.fixture
    def mock_controller(self):
        """モックコントローラーを生成"""
        controller = Mock(spec=EnvResourceController)
        controller.env_context = Mock()
        controller.env_context.contest_name = "test_contest"
        controller.env_context.problem_name = "test_problem"
        controller.env_context.language = "python"
        controller.env_context.env_type = "local"
        controller.env_context.command_type = "run"
        return controller
    
    @pytest.fixture
    def mock_operations(self):
        """モックDIコンテナを生成"""
        operations = Mock(spec=DIContainer)
        return operations
    
    @pytest.fixture
    def builder(self, mock_controller, mock_operations):
        """GraphBasedWorkflowBuilderのインスタンスを生成（新API使用）"""
        return GraphBasedWorkflowBuilder.from_controller(mock_controller, mock_operations)
    
    @pytest.fixture
    def sample_json_steps(self):
        """サンプルのJSONステップデータ"""
        return [
            {
                "type": "mkdir",
                "cmd": ["/tmp/test"]
            },
            {
                "type": "touch",
                "cmd": ["/tmp/test/file.txt"]
            },
            {
                "type": "copy",
                "cmd": ["/tmp/test/file.txt", "/tmp/test/copy.txt"]
            }
        ]
    
    def test_from_controller(self, mock_controller, mock_operations):
        """from_controllerメソッドのテスト（新API）"""
        with patch('src.env.step_generation.workflow.create_step_context_from_env_context') as mock_create:
            mock_context = Mock()
            mock_create.return_value = mock_context
            
            builder = GraphBasedWorkflowBuilder.from_controller(
                mock_controller, 
                mock_operations
            )
            
            assert isinstance(builder, GraphBasedWorkflowBuilder)
            assert builder.context == mock_context
            mock_create.assert_called_once_with(mock_controller.env_context)
    
    @patch('src.env.workflow.graph_based_workflow_builder.generate_steps_from_json')
    @patch('src.env.workflow.graph_based_workflow_builder.resolve_dependencies')
    @patch('src.env.workflow.graph_based_workflow_builder.optimize_workflow_steps')
    def test_build_graph_from_json_steps_success(
        self, 
        mock_optimize, 
        mock_resolve, 
        mock_generate,
        builder, 
        sample_json_steps
    ):
        """JSONステップからグラフ構築のテスト（成功）"""
        # モックの設定
        mock_steps = [
            Step(StepType.MKDIR, ["/tmp/test"]),
            Step(StepType.TOUCH, ["/tmp/test/file.txt"])
        ]
        
        mock_generation_result = Mock()
        mock_generation_result.is_success = True
        mock_generation_result.steps = mock_steps
        mock_generation_result.errors = []
        mock_generation_result.warnings = ["warning1"]
        
        mock_generate.return_value = mock_generation_result
        mock_resolve.return_value = mock_steps
        mock_optimize.return_value = mock_steps
        
        # 実行
        graph, errors, warnings = builder.build_graph_from_json_steps(sample_json_steps)
        
        # 検証
        assert isinstance(graph, RequestExecutionGraph)
        assert len(errors) == 0
        assert warnings == ["warning1"]
        
        # 関数が呼ばれたか確認
        mock_generate.assert_called_once()
        mock_resolve.assert_called_once_with(mock_steps, mock_generate.call_args[0][1])
        mock_optimize.assert_called_once_with(mock_steps)
    
    @patch('src.env.workflow.graph_based_workflow_builder.generate_steps_from_json')
    def test_build_graph_from_json_steps_error(
        self, 
        mock_generate,
        builder, 
        sample_json_steps
    ):
        """JSONステップからグラフ構築のテスト（エラー）"""
        # エラーを含む結果を返す
        mock_generation_result = Mock()
        mock_generation_result.is_success = False
        mock_generation_result.steps = []
        mock_generation_result.errors = ["error1", "error2"]
        mock_generation_result.warnings = []
        
        mock_generate.return_value = mock_generation_result
        
        # 実行
        graph, errors, warnings = builder.build_graph_from_json_steps(sample_json_steps)
        
        # 検証
        assert isinstance(graph, RequestExecutionGraph)
        assert len(graph.nodes) == 0  # 空のグラフ
        assert errors == ["error1", "error2"]
        assert warnings == []
    
    def test_build_graph_from_nodes(self, builder):
        """ConfigNodeからグラフ構築のテスト"""
        # ConfigNodeを作成
        node1 = ConfigNode("step1")
        node1.value = {"type": "mkdir", "cmd": ["/tmp/test"]}
        
        node2 = ConfigNode("step2")
        node2.value = {"type": "touch", "cmd": ["/tmp/test/file.txt"]}
        
        node3 = ConfigNode("step3")
        node3.value = None  # 無効なノード
        
        with patch.object(builder, 'build_graph_from_json_steps') as mock_build:
            mock_build.return_value = (RequestExecutionGraph(), [], [])
            
            # 実行
            graph, errors, warnings = builder.build_graph_from_nodes([node1, node2, node3])
            
            # 検証
            mock_build.assert_called_once()
            call_args = mock_build.call_args[0][0]
            assert len(call_args) == 2  # node3は除外される
            assert call_args[0] == {"type": "mkdir", "cmd": ["/tmp/test"]}
            assert call_args[1] == {"type": "touch", "cmd": ["/tmp/test/file.txt"]}
    
    def test_build_composite_from_graph(self, builder):
        """グラフからCompositeRequest構築のテスト"""
        # モックグラフを作成
        mock_graph = Mock(spec=RequestExecutionGraph)
        
        with patch('src.env.workflow.graph_based_workflow_builder.GraphToCompositeAdapter') as MockAdapter:
            mock_composite = Mock()
            MockAdapter.to_composite_request.return_value = mock_composite
            
            # 実行
            result = builder.build_composite_from_graph(mock_graph)
            
            # 検証
            assert result == mock_composite
            MockAdapter.to_composite_request.assert_called_once_with(mock_graph)
    
    @patch('src.env.factory.request_factory_selector.RequestFactorySelector')
    def test_step_to_request(self, MockSelector, builder):
        """StepからRequestへの変換テスト"""
        # モックの設定
        mock_selector_instance = Mock()
        mock_factory = Mock()
        mock_request = Mock()
        
        MockSelector.get_factory_for_step_type.return_value = mock_factory
        mock_factory.create_request.return_value = mock_request
        
        # テスト実行
        step = Step(StepType.MKDIR, ["/tmp/test"])
        result = builder._step_to_request(step)
        
        # 検証
        assert result == mock_request
        MockSelector.get_factory_for_step_type.assert_called_once_with(
            "mkdir", builder.controller, builder.operations
        )
        mock_factory.create_request.assert_called_once_with(step)
    
    def test_extract_resource_info_from_step(self, builder):
        """ステップからリソース情報抽出のテスト"""
        # MKDIR
        step = Step(StepType.MKDIR, ["/tmp/test"])
        creates_files, creates_dirs, reads_files, requires_dirs = \
            builder._extract_resource_info_from_step(step)
        assert creates_dirs == {"/tmp/test"}
        assert len(creates_files) == 0
        
        # TOUCH
        step = Step(StepType.TOUCH, ["/tmp/test/file.txt"])
        creates_files, creates_dirs, reads_files, requires_dirs = \
            builder._extract_resource_info_from_step(step)
        assert creates_files == {"/tmp/test/file.txt"}
        assert requires_dirs == {"/tmp/test"}
        
        # COPY
        step = Step(StepType.COPY, ["source.txt", "dest.txt"])
        creates_files, creates_dirs, reads_files, requires_dirs = \
            builder._extract_resource_info_from_step(step)
        assert reads_files == {"source.txt"}
        assert creates_files == {"dest.txt"}
        
        # BUILD
        step = Step(StepType.BUILD, ["/project"])
        creates_files, creates_dirs, reads_files, requires_dirs = \
            builder._extract_resource_info_from_step(step)
        assert requires_dirs == {"/project"}
    
    def test_is_parent_directory(self, builder):
        """親ディレクトリ判定のテスト"""
        assert builder._is_parent_directory("/tmp", "/tmp/test/file.txt")
        assert builder._is_parent_directory("/tmp/test", "/tmp/test/sub/file.txt")
        assert not builder._is_parent_directory("/tmp/test", "/tmp/other/file.txt")
        assert not builder._is_parent_directory("/tmp/test", "/tmp/test")
    
    def test_has_resource_conflict(self, builder):
        """リソース競合判定のテスト"""
        # 同じファイルへの書き込み
        node1 = Mock()
        node1.creates_files = {"file.txt"}
        node1.creates_dirs = set()
        node1.reads_files = set()
        
        node2 = Mock()
        node2.creates_files = {"file.txt"}
        node2.creates_dirs = set()
        node2.reads_files = set()
        
        assert builder._has_resource_conflict(node1, node2)
        
        # 競合なし
        node3 = Mock()
        node3.creates_files = {"other.txt"}
        node3.creates_dirs = set()
        node3.reads_files = set()
        
        assert not builder._has_resource_conflict(node1, node3)
    
    def test_validate_graph(self, builder):
        """グラフ検証のテスト"""
        # 正常なグラフ
        graph = RequestExecutionGraph()
        node1 = Mock()
        node1.id = "node1"
        node1.request = Mock()
        graph.add_request_node(node1)
        
        is_valid, messages = builder.validate_graph(graph)
        assert is_valid
        assert any("1 execution groups" in msg for msg in messages)
        
        # 空のグラフ
        empty_graph = RequestExecutionGraph()
        is_valid, messages = builder.validate_graph(empty_graph)
        assert not is_valid
        assert any("No executable nodes" in msg for msg in messages)
    
    @patch('src.env.factory.request_factory_selector.RequestFactorySelector')
    def test_build_graph_from_steps_integration(self, MockSelector, builder):
        """_build_graph_from_stepsの統合テスト"""
        # モックの設定
        mock_selector_instance = Mock()
        mock_factory = Mock()
        MockSelector.return_value = mock_selector_instance
        mock_selector_instance.select_factory.return_value = mock_factory
        
        # リクエストを作成
        mock_request1 = Mock()
        mock_request2 = Mock()
        mock_factory.create_request.side_effect = [mock_request1, mock_request2]
        
        # ステップを作成
        steps = [
            Step(StepType.MKDIR, ["/tmp/test"]),
            Step(StepType.TOUCH, ["/tmp/test/file.txt"])
        ]
        
        # 実行
        graph = builder._build_graph_from_steps(steps)
        
        # 検証
        assert len(graph.nodes) == 2
        assert "step_0" in graph.nodes
        assert "step_1" in graph.nodes
        
        # 依存関係が構築されているか確認
        deps = graph.get_dependencies("step_1")
        assert "step_0" in deps  # ディレクトリ作成依存