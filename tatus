[1mdiff --git a/src/config/mod.rs b/src/config/mod.rs[m
[1mindex 437158c..4d176f0 100644[m
[1m--- a/src/config/mod.rs[m
[1m+++ b/src/config/mod.rs[m
[36m@@ -12,6 +12,8 @@[m [muse std::fs;[m
 use std::collections::HashMap;[m
 use anyhow::{Result, Context};[m
 use serde::{Deserialize, Serialize};[m
[32m+[m[32muse std::path::PathBuf;[m
[32m+[m[32muse crate::message::messages;[m
 [m
 #[allow(clippy::module_name_repetitions)][m
 #[derive(Debug, Clone, Serialize, Deserialize)][m
[36m@@ -25,15 +27,8 @@[m [mpub struct Config {[m
 pub struct SystemConfig {[m
     pub browser: String,[m
     pub editors: Vec<String>,[m
[31m-    pub docker: DockerConfig,[m
[31m-}[m
[31m-[m
[31m-#[allow(clippy::module_name_repetitions)][m
[31m-#[derive(Debug, Clone, Serialize, Deserialize)][m
[31m-pub struct DockerConfig {[m
[31m-    pub timeout_seconds: u32,[m
[31m-    pub memory_limit_mb: u32,[m
[31m-    pub mount_point: String,[m
[32m+[m[32m    pub workspace: PathBuf,[m
[32m+[m[32m    pub cache_dir: PathBuf,[m
 }[m
 [m
 #[allow(clippy::module_name_repetitions)][m
[36m@@ -62,7 +57,6 @@[m [mpub struct RunnerConfig {[m
     pub compile_dir: String,[m
     pub require_files: Vec<String>,[m
     pub env_vars: Vec<String>,[m
[31m-    pub docker: DockerConfig,[m
 }[m
 [m
 #[allow(clippy::module_name_repetitions)][m
[36m@@ -114,12 +108,6 @@[m [mimpl Config {[m
         &self.system.editors[m
     }[m
 [m
[31m-    /// Dockerの設定を取得します[m
[31m-    #[must_use][m
[31m-    pub const fn docker(&self) -> &DockerConfig {[m
[31m-        &self.system.docker[m
[31m-    }[m
[31m-[m
     /// デフォルトの言語を取得します[m
     #[must_use][m
     pub fn default_language(&self) -> &str {[m
[1mdiff --git a/src/contest/mod.rs b/src/contest/mod.rs[m
[1mindex 882b60d..bc7e20e 100644[m
[1m--- a/src/contest/mod.rs[m
[1m+++ b/src/contest/mod.rs[m
[36m@@ -1,6 +1,5 @@[m
 pub mod model;[m
[31m-pub mod parse;[m
 pub mod service;[m
 [m
[31m-pub use model::{Command, CommandContext, Contest, TestCase};[m
[31m-pub use service::{ContestHandler as Handler, TestRunner};[m
[32m+[m[32mpub use model::Contest;[m
[32m+[m[32mpub use service::{ContestRunner as Handler, TestRunner};[m
[1mdiff --git a/src/contest/service/command.rs b/src/contest/service/command.rs[m
[1mindex 56e8dff..8ddd393 100644[m
[1m--- a/src/contest/service/command.rs[m
[1m+++ b/src/contest/service/command.rs[m
[36m@@ -1,97 +1,29 @@[m
[31m-use crate::contest::model::{Command, CommandContext, Contest};[m
[31m-use crate::contest::service::{ContestHandler, TestRunner};[m
[31m-use crate::config::Config;[m
 use anyhow::Result;[m
[32m+[m[32muse crate::contest::service::{ContestRunner, TestRunner};[m
[32m+[m[32muse crate::contest::model::Contest;[m
 use crate::message::contest;[m
 [m
 pub struct Service {[m
[31m-    contest_service: ContestHandler,[m
[32m+[m[32m    contest_service: ContestRunner,[m
     test_service: TestRunner,[m
[31m-    config: Config,[m
 }[m
 [m
 impl Service {[m
[31m-    /// `CommandService`の新しいインスタンスを作成します[m
[31m-    /// [m
[31m-    /// # Errors[m
[31m-    /// [m
[31m-    /// - 設定ファイルの読み込みに失敗した場合[m
[31m-    pub fn new(contest_service: ContestHandler, test_service: TestRunner) -> Result<Self> {[m
[31m-        let config = Config::load()?;[m
[31m-        Ok(Self {[m
[31m-            contest_service,[m
[31m-            test_service,[m
[31m-            config,[m
[31m-        })[m
[31m-    }[m
[31m-[m
[31m-    /// コマンドを実行します。[m
[31m-    /// [m
[31m-    /// # Errors[m
[31m-    /// - コマンドの実行に失敗した場合[m
[31m-    /// - コンテストが選択されていない場合（必要な場合）[m
[31m-    pub fn execute(&self, context: CommandContext) -> Result<()> {[m
[31m-        match context.command {[m
[31m-            Command::Login => {[m
[31m-                println!("ログイン処理を実行します");[m
[31m-                // TODO: ログイン処理の実装[m
[31m-                Ok(())[m
[31m-            }[m
[31m-            Command::Config { site, contest_id, problem_id, language: _ } => {[m
[31m-                println!("問題を開きます: site={site:?}, contest={contest_id:?}, problem={problem_id:?}");[m
[31m-                site.map_or_else([m
[31m-                    || Err(anyhow::anyhow!(contest::error("invalid_command", "サイトが指定されていません"))),[m
[31m-                    |site_str| {[m
[31m-                        // 設定からテンプレートディレクトリを取得[m
[31m-                        let template_dir = self.config.contest_template_dir();[m
[31m-                        let active_dir = self.config.active_contest_dir();[m
[31m-                        [m
[31m-                        self.contest_service.open_with_config([m
[31m-                            &site_str,[m
[31m-                            contest_id.as_ref().ok_or_else(|| anyhow::anyhow!(contest::error("invalid_command", "コンテストIDが指定されていません")))?,[m
[31m-                            problem_id.as_ref().ok_or_else(|| anyhow::anyhow!(contest::error("invalid_command", "問題IDが指定されていません")))?,[m
[31m-                            &template_dir,[m
[31m-                            &active_dir,[m
[31m-                        )[m
[31m-                    }[m
[31m-                )[m
[31m-            }[m
[31m-            Command::Open => {[m
[31m-                println!("問題を開きます");[m
[31m-                Ok(())[m
[31m-            }[m
[31m-            Command::Test { test_number } => {[m
[31m-                context.contest.map_or_else([m
[31m-                    || Err(anyhow::anyhow!(contest::error("invalid_command", "コンテストが選択されていません"))),[m
[31m-                    |contest| {[m
[31m-                        println!("テストを実行します: test_number={test_number:?}");[m
[31m-                        // 設定からテストディレクトリを取得[m
[31m-                        let test_dir = self.config.test_dir();[m
[31m-                        let result = self.test_service.run_test_with_config(&contest, test_number, &test_dir)?;[m
[31m-                        println!("{}", result.summary());[m
[31m-                        Ok(())[m
[31m-                    }[m
[31m-                )[m
[31m-            }[m
[31m-            Command::Submit => {[m
[31m-                context.contest.map_or_else([m
[31m-                    || Err(anyhow::anyhow!(contest::error("invalid_command", "コンテストが選択されていません"))),[m
[31m-                    |contest| {[m
[31m-                        println!("提出を行います");[m
[31m-                        self.contest_service.submit(&contest)[m
[31m-                    }[m
[31m-                )[m
[31m-            }[m
[32m+[m[32m    pub fn new() -> Self {[m
[32m+[m[32m        Self {[m
[32m+[m[32m            contest_service: ContestRunner::new(),[m
[32m+[m[32m            test_service: TestRunner::new(Contest::default()),[m
         }[m
     }[m
 [m
[31m-    #[must_use = "この関数は新しいCommandContextインスタンスを返します"][m
[31m-    pub const fn with_contest(&self, command: Command, contest: Contest) -> CommandContext {[m
[31m-        CommandContext::with_contest(command, contest)[m
[31m-    }[m
[31m-[m
[31m-    #[must_use = "この関数は新しいCommandContextインスタンスを返します"][m
[31m-    pub const fn without_contest(&self, command: Command) -> CommandContext {[m
[31m-        CommandContext::new(command)[m
[32m+[m[32m    pub async fn run_test(&self, contest: Contest, test_number: Option<usize>) -> Result<()> {[m
[32m+[m[32m        let test_case = TestCase {[m
[32m+[m[32m            input: String::new(),[m
[32m+[m[32m           