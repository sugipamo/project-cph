{
  "quality_checks": {
    "none_default_checker": {
      "description": "None引数初期値の検出",
      "detection_type": "ast",
      "patterns": [],
      "ast_checks": {
        "function_defaults": {
          "check_type": "FunctionDef",
          "target": "args.defaults",
          "condition": "is None"
        }
      },
      "exclusions": {
        "functions": ["__init__", "main", "_execute_core", "is_potential_script_path"],
        "file_patterns": ["exception", "factory", "cli_app", "request", "base_", "persistence_", "composite_"]
      },
      "error_message": "None引数初期値が検出されました（CLAUDE.mdルール違反 - 呼び出し元で適切な値を用意）",
      "remediation": "呼び出し元で明示的に値を指定してください。デフォルト値に依存しない実装に修正してください。"
    },
    "dict_get_checker": {
      "description": "dict.get()メソッドの使用検出",
      "detection_type": "ast",
      "patterns": [],
      "ast_checks": {
        "dict_get_calls": {
          "check_type": "Call",
          "target": "func.attr",
          "condition": "== 'get'",
          "parent_types": ["dict", "config", "data", "params", "options", "settings", "mapping", "cache"]
        }
      },
      "exclusions": {
        "variable_names": ["client", "session", "request", "http", "api"],
        "method_names": ["get_config", "get_setting", "getattr", "get_user", "get_data"]
      },
      "error_message": "dict.get()の使用が検出されました",
      "remediation": "設定取得はsrc/configuration/readme.mdの方法に従ってください。存在しない設定は{setting}.jsonに追加して対応してください。"
    },
    "fallback_checker": {
      "description": "フォールバック処理の検出",
      "detection_type": "mixed",
      "patterns": [
        {
          "name": "or_fallback",
          "regex": "or\\s+[\"'\\[\\{0-9]",
          "description": "or演算子でのフォールバック"
        },
        {
          "name": "else_fallback",
          "regex": "else\\s+[\"'\\[\\{0-9]",
          "description": "条件式でのフォールバック"
        }
      ],
      "ast_checks": {
        "try_except_assignment": {
          "check_type": "ExceptHandler",
          "target": "body",
          "condition": "contains assignment or return"
        }
      },
      "exclusions": {
        "keywords": ["last_exception", "error_code", "logger", "raise", "exception", "in", "and", "or", "is", "not", "==", "!=", "if", "else", "version", "row", "value", "result"]
      },
      "error_message": "フォールバック処理が検出されました",
      "remediation": "フォールバック処理は禁止されています。必要なエラーを適切に処理し、隠蔽しないようにしてください。"
    },
    "dependency_injection_checker": {
      "description": "副作用の直接使用検出",
      "detection_type": "ast",
      "patterns": [],
      "monitored_modules": {
        "subprocess": ["run", "Popen", "call", "check_call", "check_output"],
        "shutil": ["copy", "copy2", "copytree", "move", "rmtree"],
        "sqlite3": ["connect"],
        "sys": ["stdout.write", "stderr.write"],
        "os": ["system", "popen", "utime", "chmod", "chown"],
        "pathlib.Path": ["write_text", "write_bytes", "mkdir", "rmdir", "unlink"],
        "docker": ["from_env", "DockerClient"],
        "json": ["dump", "dumps"],
        "yaml": ["dump", "dumps", "safe_dump"],
        "toml": ["dump", "dumps"]
      },
      "allowed_layers": ["infrastructure", "scripts/infrastructure"],
      "error_message": "副作用の直接使用が検出されました（infrastructure層での注入が必要）",
      "remediation": "副作用はsrc/infrastructure scripts/infrastructureのみとし、main.pyから注入してください。"
    },
    "infrastructure_operations_checker": {
      "description": "Infrastructure→Operations依存の検出",
      "detection_type": "regex",
      "patterns": [
        {
          "name": "operations_import",
          "regex": "from\\s+src\\.operations\\.([^.\\s]+)\\.([^.\\s]+)\\s+import\\s+(.+)",
          "description": "operationsモジュールからのインポート"
        },
        {
          "name": "operations_import_module",
          "regex": "import\\s+src\\.operations\\.([^.\\s]+)\\.([^.\\s]+)",
          "description": "operationsモジュール全体のインポート"
        }
      ],
      "severity_levels": {
        "high_frequency": ["LoggerInterface", "ShellResult", "DockerResult", "OperationResult", "FileOpType", "OperationRequestFoundation"],
        "caution": ["requests", "factories"],
        "allowed": ["interfaces", "results", "exceptions", "constants", "types"]
      },
      "error_message": "Infrastructure→Operations依存が検出されました",
      "remediation": "依存関係を見直し、適切な層構造を維持してください。"
    },
    "clean_architecture_checker": {
      "description": "クリーンアーキテクチャ違反の検出",
      "detection_type": "mixed",
      "layer_dependencies": {
        "operations": [],
        "context": ["operations"],
        "workflow": ["operations", "context"],
        "configuration": ["operations"],
        "infrastructure": ["operations", "context", "workflow", "configuration"],
        "cli": ["operations", "context", "workflow", "configuration", "infrastructure"],
        "scripts": ["operations", "context", "workflow", "configuration", "infrastructure", "cli"]
      },
      "domain_forbidden_imports": [
        "subprocess", "shutil", "sqlite3", "docker", "requests",
        "os", "sys", "pathlib", "logging", "datetime", "time"
      ],
      "side_effect_patterns": [
        {
          "name": "file_open",
          "regex": "\\bopen\\s*\\(",
          "description": "ファイルオープン"
        },
        {
          "name": "path_write",
          "regex": "Path\\(.*\\)\\.write_text",
          "description": "Path.write_text"
        },
        {
          "name": "requests_call",
          "regex": "requests\\.(get|post|put|delete)",
          "description": "HTTPリクエスト"
        }
      ],
      "error_message": "クリーンアーキテクチャ違反が検出されました",
      "remediation": "各層の責務を明確にし、依存関係の方向性を適切に保ってください。"
    },
    "naming_checker": {
      "description": "命名規則違反の検出",
      "detection_type": "mixed",
      "patterns": [
        {
          "name": "generic_filenames",
          "regex": "(helpers|utils|core|base|common)\\.py$",
          "description": "汎用的ファイル名"
        },
        {
          "name": "abstract_function_names",
          "regex": "^(handle|process|manage|execute|create|run|do|make|get|set|check)$",
          "description": "抽象的関数名"
        },
        {
          "name": "generic_class_names",
          "regex": "^(Base[A-Z]|Abstract[A-Z]|Manager|Handler|Processor|Controller|Service)$",
          "description": "汎用的クラス名"
        },
        {
          "name": "useless_prefix_functions",
          "regex": "^(simple_|pure_|basic_|plain_|raw_)",
          "description": "無駄なプレフィックス（関数）"
        },
        {
          "name": "useless_prefix_classes",
          "regex": "^(Simple|Pure|Basic|Plain|Raw)",
          "description": "無駄なプレフィックス（クラス）"
        }
      ],
      "max_filename_length": 35,
      "error_message": "命名規則違反が検出されました",
      "remediation": "具体的で意味のある名前を使用してください。汎用的な名前は避けてください。"
    },
    "getattr_checker": {
      "description": "getattr()デフォルト値使用の検出",
      "detection_type": "ast",
      "patterns": [],
      "ast_checks": {
        "getattr_with_default": {
          "check_type": "Call",
          "target": "func.id",
          "condition": "== 'getattr' and len(args) >= 3"
        }
      },
      "error_message": "getattr()のデフォルト値使用が検出されました（CLAUDE.md準拠性違反）",
      "remediation": "デフォルト値を指定せず、属性が存在しない場合は適切にエラーハンドリングしてください。"
    },
    "print_usage_checker": {
      "description": "print()関数使用の検出",
      "detection_type": "regex",
      "patterns": [
        {
          "name": "print_usage",
          "regex": "\\bprint\\s*\\(",
          "description": "print関数の使用"
        }
      ],
      "exclusions": {
        "directories": ["logging"],
        "patterns": ["file=sys.stderr"]
      },
      "error_message": "print()の使用が検出されました（ロギング使用を推奨）",
      "remediation": "適切なロギングメカニズムを使用してください。デバッグ出力もloggerを使用してください。"
    }
  }
}