{
  "timestamp": "20250626_141231",
  "log_dir": "src_check/auto_correct_log",
  "note": "バックアップは無効化されています。変更はGitで管理してください。",
  "moves": [
    {
      "source": "/home/cphelper/project-cph/src/core/base_composite_request/__init__.py",
      "destination": "/home/cphelper/project-cph/src/domain/__init__.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/base_composite_request/base_composite_request.py",
      "destination": "/home/cphelper/project-cph/src/domain/base_composite_request.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/base_request/__init__.py",
      "destination": "/home/cphelper/project-cph/src/domain/__init__.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/base_request/base_request.py",
      "destination": "/home/cphelper/project-cph/src/domain/base_request.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/configuration/config_node.py",
      "destination": "/home/cphelper/project-cph/src/domain/config_node.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/dependency/__init__.py",
      "destination": "/home/cphelper/project-cph/src/domain/__init__.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/dependency/dependency.py",
      "destination": "/home/cphelper/project-cph/src/domain/dependency.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/step_runner/__init__.py",
      "destination": "/home/cphelper/project-cph/src/domain/__init__.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/step_runner/step_runner.py",
      "destination": "/home/cphelper/project-cph/src/domain/step_runner.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/workflow_execution_svc/__init__.py",
      "destination": "/home/cphelper/project-cph/src/domain/__init__.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/workflow_execution_svc/workflow_execution_service.py",
      "destination": "/home/cphelper/project-cph/src/domain/services/workflow_execution_service.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/workflow_logger_adapter/__init__.py",
      "destination": "/home/cphelper/project-cph/src/domain/__init__.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/workflow_logger_adapter/workflow_logger_adapter.py",
      "destination": "/home/cphelper/project-cph/src/domain/workflow_logger_adapter.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/workflow_result/__init__.py",
      "destination": "/home/cphelper/project-cph/src/domain/__init__.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/workflow_result/workflow_result.py",
      "destination": "/home/cphelper/project-cph/src/domain/workflow_result.py",
      "reason": "domainカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/mock_regex_provider/__init__.py",
      "destination": "/home/cphelper/project-cph/src/utils/__init__.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/mock_regex_provider/mock_regex_provider.py",
      "destination": "/home/cphelper/project-cph/src/utils/mock_regex_provider.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/path_operations/__init__.py",
      "destination": "/home/cphelper/project-cph/src/utils/__init__.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/path_operations/path_operations.py",
      "destination": "/home/cphelper/project-cph/src/utils/path_operations.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/python_utils/__init__.py",
      "destination": "/home/cphelper/project-cph/src/utils/__init__.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/python_utils/python_utils.py",
      "destination": "/home/cphelper/project-cph/src/utils/python_utils.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/regex_provider/__init__.py",
      "destination": "/home/cphelper/project-cph/src/utils/__init__.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/regex_provider/regex_provider.py",
      "destination": "/home/cphelper/project-cph/src/utils/regex_provider.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/retry_decorator/__init__.py",
      "destination": "/home/cphelper/project-cph/src/utils/__init__.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/retry_decorator/retry_decorator.py",
      "destination": "/home/cphelper/project-cph/src/utils/retry_decorator.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/sys_provider/__init__.py",
      "destination": "/home/cphelper/project-cph/src/utils/__init__.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/sys_provider/sys_provider.py",
      "destination": "/home/cphelper/project-cph/src/utils/sys_provider.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/time_adapter/__init__.py",
      "destination": "/home/cphelper/project-cph/src/utils/__init__.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/time_adapter/time_adapter.py",
      "destination": "/home/cphelper/project-cph/src/utils/time_adapter.py",
      "reason": "utilsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/composite_structure/composite_structure.py",
      "destination": "/home/cphelper/project-cph/src/operations/composite_structure.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_interface/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_interface/docker_interface.py",
      "destination": "/home/cphelper/project-cph/src/operations/interfaces/docker_interface.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_result/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_result/docker_result.py",
      "destination": "/home/cphelper/project-cph/src/operations/results/docker_result.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/execution_interface/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/execution_interface/execution_interface.py",
      "destination": "/home/cphelper/project-cph/src/operations/interfaces/execution_interface.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/file_result/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/file_result/file_result.py",
      "destination": "/home/cphelper/project-cph/src/operations/results/file_result.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/python_request/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/python_request/python_request.py",
      "destination": "/home/cphelper/project-cph/src/operations/requests/python_request.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/search_strategy/search_strategy.py",
      "destination": "/home/cphelper/project-cph/src/operations/search_strategy.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/shell_request/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/shell_request/shell_request.py",
      "destination": "/home/cphelper/project-cph/src/operations/requests/shell_request.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/shell_result/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/shell_result/shell_result.py",
      "destination": "/home/cphelper/project-cph/src/operations/results/shell_result.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/composite_request/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/composite_request/composite_request.py",
      "destination": "/home/cphelper/project-cph/src/operations/requests/composite_request.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/docker_request/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/docker_request/docker_request.py",
      "destination": "/home/cphelper/project-cph/src/operations/requests/docker_request.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/file_request/__init__.py",
      "destination": "/home/cphelper/project-cph/src/operations/__init__.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/file_request/file_request.py",
      "destination": "/home/cphelper/project-cph/src/operations/requests/file_request.py",
      "reason": "operationsカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/base_repository/__init__.py",
      "destination": "/home/cphelper/project-cph/src/data/__init__.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/base_repository/base_repository.py",
      "destination": "/home/cphelper/project-cph/src/data/base/base_repository.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_container_repository/__init__.py",
      "destination": "/home/cphelper/project-cph/src/data/__init__.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_container_repository/docker_container_repository.py",
      "destination": "/home/cphelper/project-cph/src/data/docker_container/docker_container_repository.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_image_repository/__init__.py",
      "destination": "/home/cphelper/project-cph/src/data/__init__.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/docker_image_repository/docker_image_repository.py",
      "destination": "/home/cphelper/project-cph/src/data/docker_image/docker_image_repository.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/operation_repository/__init__.py",
      "destination": "/home/cphelper/project-cph/src/data/__init__.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/operation_repository/operation_repository.py",
      "destination": "/home/cphelper/project-cph/src/data/operation/operation_repository.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/session_repository/__init__.py",
      "destination": "/home/cphelper/project-cph/src/data/__init__.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/session_repository/session_repository.py",
      "destination": "/home/cphelper/project-cph/src/data/session/session_repository.py",
      "reason": "dataカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/config_loader_svc/__init__.py",
      "destination": "/home/cphelper/project-cph/src/application/__init__.py",
      "reason": "applicationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/config_loader_svc/config_loader_service.py",
      "destination": "/home/cphelper/project-cph/src/application/services/config_loader_service.py",
      "reason": "applicationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/contest_mgmt/__init__.py",
      "destination": "/home/cphelper/project-cph/src/application/__init__.py",
      "reason": "applicationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/contest_mgmt/contest_manager.py",
      "destination": "/home/cphelper/project-cph/src/application/contest_manager.py",
      "reason": "applicationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/debug_svc/__init__.py",
      "destination": "/home/cphelper/project-cph/src/application/__init__.py",
      "reason": "applicationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/debug_svc/debug_service.py",
      "destination": "/home/cphelper/project-cph/src/application/services/debug_service.py",
      "reason": "applicationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/application_logger_adapter/__init__.py",
      "destination": "/home/cphelper/project-cph/src/logging/__init__.py",
      "reason": "loggingカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/application_logger_adapter/application_logger_adapter.py",
      "destination": "/home/cphelper/project-cph/src/logging/application_logger_adapter.py",
      "reason": "loggingカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/mock_output_mgmt/__init__.py",
      "destination": "/home/cphelper/project-cph/src/logging/__init__.py",
      "reason": "loggingカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/mock_output_mgmt/mock_output_manager.py",
      "destination": "/home/cphelper/project-cph/src/logging/mock_output_manager.py",
      "reason": "loggingカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/unified_logger/__init__.py",
      "destination": "/home/cphelper/project-cph/src/logging/__init__.py",
      "reason": "loggingカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/unified_logger/unified_logger.py",
      "destination": "/home/cphelper/project-cph/src/logging/unified_logger.py",
      "reason": "loggingカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/controllers/di_config/__init__.py",
      "destination": "/home/cphelper/project-cph/src/configuration/__init__.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/controllers/di_config/di_config.py",
      "destination": "/home/cphelper/project-cph/src/configuration/di_config.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/build_infrastructure/__init__.py",
      "destination": "/home/cphelper/project-cph/src/configuration/__init__.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/build_infrastructure/build_infrastructure.py",
      "destination": "/home/cphelper/project-cph/src/configuration/build_infrastructure.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/configuration/__init__.py",
      "destination": "/home/cphelper/project-cph/src/configuration/__init__.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/configuration/config_resolver.py",
      "destination": "/home/cphelper/project-cph/src/configuration/config_resolver.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/configuration/configuration_repository.py",
      "destination": "/home/cphelper/project-cph/src/configuration/configuration_repository.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/environment_mgmt/__init__.py",
      "destination": "/home/cphelper/project-cph/src/configuration/__init__.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/environment_mgmt/environment_manager.py",
      "destination": "/home/cphelper/project-cph/src/configuration/environment_manager.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/system_config_loader/__init__.py",
      "destination": "/home/cphelper/project-cph/src/configuration/__init__.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/system_config_loader/system_config_loader.py",
      "destination": "/home/cphelper/project-cph/src/configuration/system_config_loader.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/system_config_repository/__init__.py",
      "destination": "/home/cphelper/project-cph/src/configuration/__init__.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/system_config_repository/system_config_repository.py",
      "destination": "/home/cphelper/project-cph/src/configuration/system_config_repository.py",
      "reason": "configurationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/controllers/docker_driver_with_tracking/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/controllers/docker_driver_with_tracking/docker_driver_with_tracking.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/docker/docker_driver_with_tracking.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/controllers/mock_docker_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/controllers/mock_docker_driver/mock_docker_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/docker/mock_docker_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/ast_analyzer/ast_analyzer.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/ast_analyzer.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/fast_sqlite_mgmt/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/fast_sqlite_mgmt/fast_sqlite_manager.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/fast_sqlite_manager.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/file_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/file_driver/file_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/file/file_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/local_filesystem/local_filesystem.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/local_filesystem.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/persistence_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/persistence_driver/persistence_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/generic/persistence_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/python_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/python_driver/python_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/python/python_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/shell_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/shell_driver/shell_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/shell/shell_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/sqlite_mgmt/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/sqlite_mgmt/sqlite_manager.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/sqlite_manager.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/handlers/docker_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/handlers/docker_driver/docker_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/docker/docker_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/local_file_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/local_file_driver/local_file_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/file/local_file_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/local_shell_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/local_shell_driver/local_shell_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/shell/local_shell_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/mock_file_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/mock_file_driver/mock_file_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/file/mock_file_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/mock_python_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/mock_python_driver/mock_python_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/python/mock_python_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/mock_shell_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/mock_shell_driver/mock_shell_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/shell/mock_shell_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/unified_driver/__init__.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/__init__.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/services/unified_driver/unified_driver.py",
      "destination": "/home/cphelper/project-cph/src/infrastructure/drivers/generic/unified_driver.py",
      "reason": "infrastructureカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/candidate_scorer/candidate_scorer.py",
      "destination": "/home/cphelper/project-cph/src/presentation/candidate_scorer.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/cli/cli.py",
      "destination": "/home/cphelper/project-cph/src/presentation/cli.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/cli_app/__init__.py",
      "destination": "/home/cphelper/project-cph/src/presentation/__init__.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/cli_app/cli_app.py",
      "destination": "/home/cphelper/project-cph/src/presentation/cli_app.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/context_formatter/__init__.py",
      "destination": "/home/cphelper/project-cph/src/presentation/__init__.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/context_formatter/context_formatter.py",
      "destination": "/home/cphelper/project-cph/src/presentation/context_formatter.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/context_validator/__init__.py",
      "destination": "/home/cphelper/project-cph/src/presentation/__init__.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/context_validator/context_validator.py",
      "destination": "/home/cphelper/project-cph/src/presentation/context_validator.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/directory_pattern_strategy/directory_pattern_strategy.py",
      "destination": "/home/cphelper/project-cph/src/presentation/directory_pattern_strategy.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/main/__init__.py",
      "destination": "/home/cphelper/project-cph/src/presentation/__init__.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/main/main.py",
      "destination": "/home/cphelper/project-cph/src/presentation/main.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/module_parser/module_parser.py",
      "destination": "/home/cphelper/project-cph/src/presentation/module_parser.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/path_based_strategy/path_based_strategy.py",
      "destination": "/home/cphelper/project-cph/src/presentation/path_based_strategy.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/search_import_candidates_use_case/search_import_candidates_use_case.py",
      "destination": "/home/cphelper/project-cph/src/presentation/search_import_candidates_use_case.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/symbol_based_strategy/symbol_based_strategy.py",
      "destination": "/home/cphelper/project-cph/src/presentation/symbol_based_strategy.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/user_input_parser/__init__.py",
      "destination": "/home/cphelper/project-cph/src/presentation/__init__.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/core/user_input_parser/user_input_parser.py",
      "destination": "/home/cphelper/project-cph/src/presentation/user_input_parser.py",
      "reason": "presentationカテゴリに属するため"
    },
    {
      "source": "/home/cphelper/project-cph/src/domain/__init__.py",
      "destination": "/home/cphelper/project-cph/src/presentation/__init__.py",
      "reason": "presentationカテゴリに属するため"
    }
  ],
  "import_updates": [
    {
      "file_path": "/home/cphelper/project-cph/src/domain/workflow.py",
      "old_import": "\"\"\"完全な純粋関数ベースのワークフロー生成・実行パイプライン\n\nクリーンアーキテクチャ準拠: workflow層からinfrastructure層への直接依存を削除\n\"\"\"\nfrom typing import Any, Optional, Protocol\nfrom core.dependency.dependency import optimize_copy_steps, optimize_mkdir_steps, resolve_dependencies\nfrom workflow.step.step import Step, StepContext\nfrom workflow.step.step_generation_service import generate_steps_from_json, optimize_step_sequence, validate_step_sequence\n\nclass CompositeRequestInterface(Protocol):\n    \"\"\"Composite request interface for dependency inversion\"\"\"\n    requests: list\n\n    def __init__(self, requests: list, debug_tag: Optional[str], name: Optional[str], execution_controller):\n        ...\n\n    @classmethod\n    def make_composite_request(cls, requests: list, debug_tag: Optional[str], name: Optional[str]):\n        ...\n\ndef steps_to_requests(steps: list[Step], context: StepContext, operations, composite_request_factory) -> CompositeRequestInterface:\n    \"\"\"Convert a list of steps to a CompositeRequest using RequestFactoryV2\n\n    Args:\n        steps: List of Step objects to convert\n        context: Step context for creating requests\n        operations: Operations object (DI container)\n        composite_request_factory: Factory for creating composite requests\n\n    Returns:\n        CompositeRequestInterface: Composite request containing all converted steps\n    \"\"\"\n    requests = []\n    factory = operations.get_request_factory()\n    for step in steps:\n        request = factory.create_request_from_step(step, context, operations)\n        if request is not None:\n            requests.append(request)\n    return composite_request_factory(requests, debug_tag='workflow', name=None, execution_controller=None)\n\ndef generate_workflow_from_json(json_steps: list[dict[str, Any]], context: StepContext, operations, composite_request_factory) -> tuple[CompositeRequestInterface, list[str], list[str]]:\n    \"\"\"JSONステップからCompositeRequestまでの完全なパイプラインを実行する純粋関数\n\n    Args:\n        json_steps: JSONから読み込んだステップのリスト\n        context: ステップ生成に必要なコンテキスト情報\n        operations: DIコンテナ（ドライバ取得用）\n\n    Returns:\n        Tuple[CompositeRequest, List[str], List[str]]:\n            (実行可能リクエスト, エラーリスト, 警告リスト)\n    \"\"\"\n    generation_result = generate_steps_from_json(json_steps, context)\n    if not generation_result.is_success:\n        empty_request = composite_request_factory([], debug_tag=None, name=None)\n        return (empty_request, generation_result.errors, generation_result.warnings)\n    steps = generation_result.steps\n    errors = list(generation_result.errors)\n    warnings = list(generation_result.warnings)\n    validation_errors = validate_step_sequence(steps)\n    if validation_errors:\n        errors.extend(validation_errors)\n        empty_request = composite_request_factory([], debug_tag=None, name=None)\n        return (empty_request, errors, warnings)\n    resolved_steps = resolve_dependencies(steps, context)\n    optimized_steps = optimize_workflow_steps(resolved_steps)\n    composite_request = steps_to_requests(optimized_steps, context, operations, composite_request_factory)\n    return (composite_request, errors, warnings)\n\ndef optimize_workflow_steps(steps: list[Step]) -> list[Step]:\n    \"\"\"ワークフローステップ全体を最適化する純粋関数\n\n    Args:\n        steps: 最適化対象のステップリスト\n\n    Returns:\n        List[Step]: 最適化されたステップリスト\n    \"\"\"\n    optimized = optimize_step_sequence(steps)\n    optimized = optimize_mkdir_steps(optimized)\n    optimized = optimize_copy_steps(optimized)\n    return optimized\n\ndef create_step_context_from_env_context(env_context) -> StepContext:\n    \"\"\"EnvContext から StepContext を作成するヘルパー関数\n\n    Args:\n        env_context: 既存の環境コンテキスト\n\n    Returns:\n        StepContext: 新しいステップコンテキスト\n    \"\"\"\n    return StepContext(contest_name=env_context.contest_name, problem_name=env_context.problem_name, language=env_context.language, env_type=env_context.env_type, command_type=env_context.command_type, local_workspace_path=env_context.local_workspace_path if hasattr(env_context, 'local_workspace_path') else env_context.workspace_path if hasattr(env_context, 'workspace_path') else '', contest_current_path=env_context.contest_current_path if hasattr(env_context, 'contest_current_path') else '', contest_stock_path=env_context.contest_stock_path if hasattr(env_context, 'contest_stock_path') else None, contest_template_path=env_context.contest_template_path if hasattr(env_context, 'contest_template_path') else None, contest_temp_path=env_context.contest_temp_path if hasattr(env_context, 'contest_temp_path') else None, source_file_name=env_context.source_file_name if hasattr(env_context, 'source_file_name') else None, language_id=env_context.language_id if hasattr(env_context, 'language_id') else None, file_patterns=env_context.file_patterns if hasattr(env_context, 'file_patterns') else None)\n\ndef validate_workflow_execution(composite_request: CompositeRequestInterface, errors: list[str], warnings: list[str]) -> tuple[bool, list[str]]:\n    \"\"\"ワークフロー実行前の最終検証を行う純粋関数\n\n    Args:\n        composite_request: 実行予定のコンポジットリクエスト\n        errors: これまでに発生したエラーリスト\n        warnings: これまでに発生した警告リスト\n\n    Returns:\n        Tuple[bool, List[str]]: (実行可能かどうか, 検証メッセージ)\n    \"\"\"\n    messages = []\n    if errors:\n        messages.append(f'Found {len(errors)} errors:')\n        messages.extend([f'  - {error}' for error in errors])\n        return (False, messages)\n    if warnings:\n        messages.append(f'Found {len(warnings)} warnings:')\n        messages.extend([f'  - {warning}' for warning in warnings])\n    if not composite_request.requests:\n        messages.append('No executable requests generated')\n        return (False, messages)\n    messages.append(f'Generated {len(composite_request.requests)} executable requests')\n    return (True, messages)\n\ndef debug_workflow_generation(json_steps: list[dict[str, Any]], context: StepContext) -> dict[str, Any]:\n    \"\"\"ワークフロー生成の各段階をデバッグ情報として返す純粋関数\n\n    Args:\n        json_steps: JSONから読み込んだステップのリスト\n        context: ステップ生成に必要なコンテキスト情報\n\n    Returns:\n        Dict[str, Any]: 各段階のデバッグ情報\n    \"\"\"\n    debug_info = {'input_steps': len(json_steps), 'stages': {}}\n    generation_result = generate_steps_from_json(json_steps, context)\n    debug_info['stages']['step_generation'] = {'generated_steps': len(generation_result.steps), 'errors': generation_result.errors, 'warnings': generation_result.warnings, 'steps': [{'type': step.type.value, 'cmd': step.cmd} for step in generation_result.steps]}\n    if generation_result.is_success:\n        resolved_steps = resolve_dependencies(generation_result.steps, context)\n        debug_info['stages']['dependency_resolution'] = {'original_steps': len(generation_result.steps), 'resolved_steps': len(resolved_steps), 'added_steps': len(resolved_steps) - len(generation_result.steps), 'steps': [{'type': step.type.value, 'cmd': step.cmd} for step in resolved_steps]}\n        optimized_steps = optimize_workflow_steps(resolved_steps)\n        debug_info['stages']['optimization'] = {'pre_optimization': len(resolved_steps), 'post_optimization': len(optimized_steps), 'removed_steps': len(resolved_steps) - len(optimized_steps), 'steps': [{'type': step.type.value, 'cmd': step.cmd} for step in optimized_steps]}\n    return debug_info",
      "new_import": "\"\"\"完全な純粋関数ベースのワークフロー生成・実行パイプライン\n\nクリーンアーキテクチャ準拠: workflow層からinfrastructure層への直接依存を削除\n\"\"\"\nfrom typing import Any, Optional, Protocol\nfrom domain.dependency import optimize_copy_steps, optimize_mkdir_steps, resolve_dependencies\nfrom workflow.step.step import Step, StepContext\nfrom workflow.step.step_generation_service import generate_steps_from_json, optimize_step_sequence, validate_step_sequence\n\nclass CompositeRequestInterface(Protocol):\n    \"\"\"Composite request interface for dependency inversion\"\"\"\n    requests: list\n\n    def __init__(self, requests: list, debug_tag: Optional[str], name: Optional[str], execution_controller):\n        ...\n\n    @classmethod\n    def make_composite_request(cls, requests: list, debug_tag: Optional[str], name: Optional[str]):\n        ...\n\ndef steps_to_requests(steps: list[Step], context: StepContext, operations, composite_request_factory) -> CompositeRequestInterface:\n    \"\"\"Convert a list of steps to a CompositeRequest using RequestFactoryV2\n\n    Args:\n        steps: List of Step objects to convert\n        context: Step context for creating requests\n        operations: Operations object (DI container)\n        composite_request_factory: Factory for creating composite requests\n\n    Returns:\n        CompositeRequestInterface: Composite request containing all converted steps\n    \"\"\"\n    requests = []\n    factory = operations.get_request_factory()\n    for step in steps:\n        request = factory.create_request_from_step(step, context, operations)\n        if request is not None:\n            requests.append(request)\n    return composite_request_factory(requests, debug_tag='workflow', name=None, execution_controller=None)\n\ndef generate_workflow_from_json(json_steps: list[dict[str, Any]], context: StepContext, operations, composite_request_factory) -> tuple[CompositeRequestInterface, list[str], list[str]]:\n    \"\"\"JSONステップからCompositeRequestまでの完全なパイプラインを実行する純粋関数\n\n    Args:\n        json_steps: JSONから読み込んだステップのリスト\n        context: ステップ生成に必要なコンテキスト情報\n        operations: DIコンテナ（ドライバ取得用）\n\n    Returns:\n        Tuple[CompositeRequest, List[str], List[str]]:\n            (実行可能リクエスト, エラーリスト, 警告リスト)\n    \"\"\"\n    generation_result = generate_steps_from_json(json_steps, context)\n    if not generation_result.is_success:\n        empty_request = composite_request_factory([], debug_tag=None, name=None)\n        return (empty_request, generation_result.errors, generation_result.warnings)\n    steps = generation_result.steps\n    errors = list(generation_result.errors)\n    warnings = list(generation_result.warnings)\n    validation_errors = validate_step_sequence(steps)\n    if validation_errors:\n        errors.extend(validation_errors)\n        empty_request = composite_request_factory([], debug_tag=None, name=None)\n        return (empty_request, errors, warnings)\n    resolved_steps = resolve_dependencies(steps, context)\n    optimized_steps = optimize_workflow_steps(resolved_steps)\n    composite_request = steps_to_requests(optimized_steps, context, operations, composite_request_factory)\n    return (composite_request, errors, warnings)\n\ndef optimize_workflow_steps(steps: list[Step]) -> list[Step]:\n    \"\"\"ワークフローステップ全体を最適化する純粋関数\n\n    Args:\n        steps: 最適化対象のステップリスト\n\n    Returns:\n        List[Step]: 最適化されたステップリスト\n    \"\"\"\n    optimized = optimize_step_sequence(steps)\n    optimized = optimize_mkdir_steps(optimized)\n    optimized = optimize_copy_steps(optimized)\n    return optimized\n\ndef create_step_context_from_env_context(env_context) -> StepContext:\n    \"\"\"EnvContext から StepContext を作成するヘルパー関数\n\n    Args:\n        env_context: 既存の環境コンテキスト\n\n    Returns:\n        StepContext: 新しいステップコンテキスト\n    \"\"\"\n    return StepContext(contest_name=env_context.contest_name, problem_name=env_context.problem_name, language=env_context.language, env_type=env_context.env_type, command_type=env_context.command_type, local_workspace_path=env_context.local_workspace_path if hasattr(env_context, 'local_workspace_path') else env_context.workspace_path if hasattr(env_context, 'workspace_path') else '', contest_current_path=env_context.contest_current_path if hasattr(env_context, 'contest_current_path') else '', contest_stock_path=env_context.contest_stock_path if hasattr(env_context, 'contest_stock_path') else None, contest_template_path=env_context.contest_template_path if hasattr(env_context, 'contest_template_path') else None, contest_temp_path=env_context.contest_temp_path if hasattr(env_context, 'contest_temp_path') else None, source_file_name=env_context.source_file_name if hasattr(env_context, 'source_file_name') else None, language_id=env_context.language_id if hasattr(env_context, 'language_id') else None, file_patterns=env_context.file_patterns if hasattr(env_context, 'file_patterns') else None)\n\ndef validate_workflow_execution(composite_request: CompositeRequestInterface, errors: list[str], warnings: list[str]) -> tuple[bool, list[str]]:\n    \"\"\"ワークフロー実行前の最終検証を行う純粋関数\n\n    Args:\n        composite_request: 実行予定のコンポジットリクエスト\n        errors: これまでに発生したエラーリスト\n        warnings: これまでに発生した警告リスト\n\n    Returns:\n        Tuple[bool, List[str]]: (実行可能かどうか, 検証メッセージ)\n    \"\"\"\n    messages = []\n    if errors:\n        messages.append(f'Found {len(errors)} errors:')\n        messages.extend([f'  - {error}' for error in errors])\n        return (False, messages)\n    if warnings:\n        messages.append(f'Found {len(warnings)} warnings:')\n        messages.extend([f'  - {warning}' for warning in warnings])\n    if not composite_request.requests:\n        messages.append('No executable requests generated')\n        return (False, messages)\n    messages.append(f'Generated {len(composite_request.requests)} executable requests')\n    return (True, messages)\n\ndef debug_workflow_generation(json_steps: list[dict[str, Any]], context: StepContext) -> dict[str, Any]:\n    \"\"\"ワークフロー生成の各段階をデバッグ情報として返す純粋関数\n\n    Args:\n        json_steps: JSONから読み込んだステップのリスト\n        context: ステップ生成に必要なコンテキスト情報\n\n    Returns:\n        Dict[str, Any]: 各段階のデバッグ情報\n    \"\"\"\n    debug_info = {'input_steps': len(json_steps), 'stages': {}}\n    generation_result = generate_steps_from_json(json_steps, context)\n    debug_info['stages']['step_generation'] = {'generated_steps': len(generation_result.steps), 'errors': generation_result.errors, 'warnings': generation_result.warnings, 'steps': [{'type': step.type.value, 'cmd': step.cmd} for step in generation_result.steps]}\n    if generation_result.is_success:\n        resolved_steps = resolve_dependencies(generation_result.steps, context)\n        debug_info['stages']['dependency_resolution'] = {'original_steps': len(generation_result.steps), 'resolved_steps': len(resolved_steps), 'added_steps': len(resolved_steps) - len(generation_result.steps), 'steps': [{'type': step.type.value, 'cmd': step.cmd} for step in resolved_steps]}\n        optimized_steps = optimize_workflow_steps(resolved_steps)\n        debug_info['stages']['optimization'] = {'pre_optimization': len(resolved_steps), 'post_optimization': len(optimized_steps), 'removed_steps': len(resolved_steps) - len(optimized_steps), 'steps': [{'type': step.type.value, 'cmd': step.cmd} for step in optimized_steps]}\n    return debug_info",
      "line_number": 0
    }
  ]
}