diff --git a/src/contest/error.rs b/src/contest/error.rs
index 1236a39..6af5b6d 100644
--- a/src/contest/error.rs
+++ b/src/contest/error.rs
@@ -5,9 +5,24 @@ pub fn site_err(msg: String) -> CphError {
 }
 
 pub fn language_err(msg: String) -> CphError {
-    CphError::Contest(ContestError::Language(LanguageError::Config { message: msg }))
+    CphError::Contest(ContestError::Language(LanguageError::Config {
+        message: msg,
+        help: "言語設定を確認してください。".to_string(),
+    }))
 }
 
 pub fn config_err(msg: String) -> CphError {
-    CphError::Contest(ContestError::Config(ConfigError::NotFound { path: msg }))
+    CphError::Contest(ContestError::Config(ConfigError::InvalidValue {
+        field: "contest".to_string(),
+        message: msg,
+        help: "設定ファイルの内容を確認してください。".to_string(),
+    }))
+}
+
+pub fn unsupported_language_err(lang: String) -> CphError {
+    CphError::Contest(ContestError::Language(LanguageError::Unsupported { lang }))
+}
+
+pub fn compiler_not_found_err(compiler: String) -> CphError {
+    CphError::Contest(ContestError::Language(LanguageError::CompilerNotFound { compiler }))
 }
diff --git a/src/docker/error.rs b/src/docker/error.rs
index af675e5..94a5e33 100644
--- a/src/docker/error.rs
+++ b/src/docker/error.rs
@@ -1,21 +1,44 @@
 use crate::error::{CphError, DockerError};
 
 pub fn docker_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "Docker操作中のエラー".to_string(),
+    })
 }
 
 pub fn container_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コンテナ操作中のエラー".to_string(),
+    })
 }
 
 pub fn compilation_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コンパイル中のエラー".to_string(),
+    })
 }
 
 pub fn command_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コマンド実行中のエラー".to_string(),
+    })
 }
 
 pub fn state_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コンテナの状態遷移中のエラー".to_string(),
+    })
+}
+
+pub fn build_err(image: String, context: String) -> CphError {
+    CphError::Docker(DockerError::BuildFailed { image, context })
+}
+
+pub fn connection_err() -> CphError {
+    CphError::Docker(DockerError::ConnectionFailed)
 } 
\ No newline at end of file
diff --git a/src/error.rs b/src/error.rs
index c8e581a..df508eb 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -6,53 +6,53 @@ pub const NO_ACTIVE_CONTEST: &str = "アクティブなコンテストがあり
 
 #[derive(Debug, Error)]
 pub enum ConfigError {
-    #[error("設定ファイルが見つかりません: {path}")]
+    #[error("設定ファイルが見つかりません: {path}\nヒント: 'config.yaml'ファイルが正しい場所にあることを確認してください。")]
     NotFound { path: String },
     
-    #[error("設定ファイルの解析に失敗しました: {0}")]
+    #[error("設定ファイルの解析に失敗しました: {0}\nヒント: YAMLの構文が正しいことを確認してください。")]
     Parse(#[from] serde_yaml::Error),
     
-    #[error("無効な設定値: {field} - {message}")]
-    InvalidValue { field: String, message: String },
+    #[error("無効な設定値: {field} - {message}\nヒント: {help}")]
+    InvalidValue { field: String, message: String, help: String },
 }
 
 #[derive(Debug, Error)]
 pub enum FileSystemError {
-    #[error("ファイルが見つかりません: {path}")]
+    #[error("ファイルが見つかりません: {path}\nヒント: パスが正しいことを確認してください。")]
     NotFound { path: String },
     
-    #[error("アクセス権限がありません: {path}")]
+    #[error("アクセス権限がありません: {path}\nヒント: ファイルの権限設定を確認してください。")]
     Permission { path: String },
     
-    #[error("IOエラー: {0}")]
-    Io(#[from] io::Error),
+    #[error("IOエラー: {0}\nコンテキスト: {1}")]
+    Io(io::Error, String),
     
-    #[error("パスエラー: {0}")]
+    #[error("パスエラー: {0}\nヒント: パスが有効であることを確認してください。")]
     Path(#[from] StripPrefixError),
 }
 
 #[derive(Debug, Error)]
 pub enum LanguageError {
-    #[error("サポートされていない言語です: {lang}")]
+    #[error("サポートされていない言語です: {lang}\nヒント: サポートされている言語は: cpp, python, rust です。")]
     Unsupported { lang: String },
     
-    #[error("コンパイラが見つかりません: {compiler}")]
+    #[error("コンパイラが見つかりません: {compiler}\nヒント: {compiler}がインストールされていることを確認してください。")]
     CompilerNotFound { compiler: String },
     
-    #[error("言語設定エラー: {message}")]
-    Config { message: String },
+    #[error("言語設定エラー: {message}\nヒント: {help}")]
+    Config { message: String, help: String },
 }
 
 #[derive(Debug, Error)]
 pub enum DockerError {
-    #[error("Dockerデーモンに接続できません")]
+    #[error("Dockerデーモンに接続できません\nヒント: Dockerが起動していることを確認してください。")]
     ConnectionFailed,
     
-    #[error("イメージのビルドに失敗しました: {image}")]
-    BuildFailed { image: String },
+    #[error("イメージのビルドに失敗しました: {image}\nコンテキスト: {context}\nヒント: Dockerfileを確認してください。")]
+    BuildFailed { image: String, context: String },
     
-    #[error("コンテナの実行に失敗しました: {message}")]
-    ExecutionFailed { message: String },
+    #[error("コンテナの実行に失敗しました: {message}\nコンテキスト: {context}")]
+    ExecutionFailed { message: String, context: String },
     
     #[error("ファイルシステムエラー: {0}")]
     Fs(#[from] FileSystemError),
diff --git a/src/fs/docker.rs b/src/fs/docker.rs
index 90c3702..14fcc28 100644
--- a/src/fs/docker.rs
+++ b/src/fs/docker.rs
@@ -3,20 +3,22 @@ use std::os::unix::fs::PermissionsExt;
 use crate::error::{CphError, FileSystemError, Result};
 use nix::unistd::{Uid, Gid};
 
+#[allow(dead_code)]
 pub trait DockerFileOperations {
     fn create_temp_directory(&self) -> Result<std::path::PathBuf>;
     fn set_permissions<P: AsRef<Path>>(&self, path: P, mode: u32) -> Result<()>;
     fn write_source_file<P: AsRef<Path>>(&self, dir: P, filename: &str, content: &str) -> Result<std::path::PathBuf>;
 }
 
+#[allow(dead_code)]
 pub trait DefaultDockerFileOperations: DockerFileOperations {
     fn ensure_directory_permissions(&self, dir: &Path) -> Result<()> {
         let metadata = std::fs::metadata(dir)
-            .map_err(|e| CphError::Fs(FileSystemError::Io(e)))?;
+            .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?;
         let mut perms = metadata.permissions();
         perms.set_mode(0o777);
         std::fs::set_permissions(dir, perms)
-            .map_err(|e| CphError::Fs(FileSystemError::Io(e)))?;
+            .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?;
         Ok(())
     }
 
@@ -31,12 +33,12 @@ pub fn set_docker_dir_permissions<P: AsRef<Path>>(dir: P) -> Result<()> {
     let dir = dir.as_ref();
 
     let metadata = std::fs::metadata(dir)
-        .map_err(|e| CphError::Fs(FileSystemError::Io(e)))?;
+        .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?;
 
     let mut perms = metadata.permissions();
     perms.set_mode(0o777);
     std::fs::set_permissions(dir, perms)
-        .map_err(|e| CphError::Fs(FileSystemError::Io(e)))?;
+        .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?;
 
     Ok(())
 }
@@ -77,7 +79,7 @@ mod tests {
         fn write_source_file<P: AsRef<Path>>(&self, dir: P, filename: &str, content: &str) -> Result<std::path::PathBuf> {
             let file_path = dir.as_ref().join(filename);
             fs::write(&file_path, content)
-                .map_err(|e| CphError::Fs(FileSystemError::Io(e)))?;
+                .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?;
             Ok(file_path)
         }
     }
@@ -96,7 +98,7 @@ mod tests {
         let file_path = ops.write_source_file(&temp_dir, "test.txt", "test content")?;
         assert!(file_path.exists());
         assert_eq!(fs::read_to_string(&file_path)
-            .map_err(|e| CphError::Fs(FileSystemError::Io(e)))?, "test content");
+            .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?, "test content");
 
         // 権限設定
         ops.set_permissions(&temp_dir, 0o777)?;
@@ -107,15 +109,12 @@ mod tests {
     #[test]
     fn test_set_docker_dir_permissions() -> Result<()> {
         let temp_dir = TempDir::new()
-            .map_err(|e| CphError::Fs(FileSystemError::Io(std::io::Error::new(
-                std::io::ErrorKind::Other,
-                format!("一時ディレクトリの作成に失敗しました: {}", e),
-            ))))?;
+            .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?;
 
         set_docker_dir_permissions(temp_dir.path())?;
 
         let metadata = fs::metadata(temp_dir.path())
-            .map_err(|e| CphError::Fs(FileSystemError::Io(e)))?;
+            .map_err(|e| CphError::Fs(FileSystemError::Io(e, "Dockerファイルシステムの操作中のエラー".to_string())))?;
         let mode = metadata.permissions().mode();
         assert_eq!(mode & 0o777, 0o777);
 
diff --git a/src/fs/error.rs b/src/fs/error.rs
index e71190b..749a34e 100644
--- a/src/fs/error.rs
+++ b/src/fs/error.rs
@@ -5,8 +5,18 @@ pub fn fs_err(msg: String) -> CphError {
 }
 
 pub fn fs_err_with_source(msg: &str, source: impl std::error::Error) -> CphError {
-    CphError::Fs(FileSystemError::Io(std::io::Error::new(
-        std::io::ErrorKind::Other,
-        format!("{}: {}", msg, source),
-    )))
+    CphError::Fs(FileSystemError::Io(
+        std::io::Error::new(std::io::ErrorKind::Other, format!("{}: {}", msg, source)),
+        "ファイルシステム操作中のエラー".to_string(),
+    ))
+}
+
+#[allow(dead_code)]
+pub fn fs_permission_err(path: String) -> CphError {
+    CphError::Fs(FileSystemError::Permission { path })
+}
+
+#[allow(dead_code)]
+pub fn fs_io_err(error: std::io::Error, context: String) -> CphError {
+    CphError::Fs(FileSystemError::Io(error, context))
 } 
\ No newline at end of file
diff --git a/src/fs/manager.rs b/src/fs/manager.rs
index 233787b..d1c0112 100644
--- a/src/fs/manager.rs
+++ b/src/fs/manager.rs
@@ -16,7 +16,7 @@ impl FileManager {
             .map_err(|e| CphError::Fs(FileSystemError::Io(std::io::Error::new(
                 std::io::ErrorKind::Other,
                 format!("ディレクトリの作成に失敗しました: {}", e),
-            ))))?;
+            ), "ファイルシステム操作中のエラー".to_string())))?;
         Ok(full_path)
     }
 
@@ -27,13 +27,13 @@ impl FileManager {
                 .map_err(|e| CphError::Fs(FileSystemError::Io(std::io::Error::new(
                     std::io::ErrorKind::Other,
                     format!("ディレクトリの作成に失敗しました: {}", e),
-                ))))?;
+                ), "ファイルシステム操作中のエラー".to_string())))?;
         }
         std::fs::write(&full_path, content)
             .map_err(|e| CphError::Fs(FileSystemError::Io(std::io::Error::new(
                 std::io::ErrorKind::Other,
                 format!("ファイルの書き込みに失敗しました: {}", e),
-            ))))?;
+            ), "ファイルシステム操作中のエラー".to_string())))?;
         Ok(full_path)
     }
 
@@ -43,7 +43,7 @@ impl FileManager {
             .map_err(|e| CphError::Fs(FileSystemError::Io(std::io::Error::new(
                 std::io::ErrorKind::Other,
                 format!("メタデータの取得に失敗しました: {}", e),
-            ))))?;
+            ), "ファイルシステム操作中のエラー".to_string())))?;
 
         let mut perms = metadata.permissions();
         #[cfg(unix)]
@@ -55,7 +55,7 @@ impl FileManager {
             .map_err(|e| CphError::Fs(FileSystemError::Io(std::io::Error::new(
                 std::io::ErrorKind::Other,
                 format!("権限の設定に失敗しました: {}", e),
-            ))))?;
+            ), "ファイルシステム操作中のエラー".to_string())))?;
 
         Ok(())
     }
diff --git a/src/fs/transaction.rs b/src/fs/transaction.rs
index a1efd7e..e9346ad 100644
--- a/src/fs/transaction.rs
+++ b/src/fs/transaction.rs
@@ -40,13 +40,13 @@ impl Transaction {
                             return Err(CphError::Fs(FileSystemError::Io(std::io::Error::new(
                                 std::io::ErrorKind::Other,
                                 format!("ロールバック中にエラーが発生しました: {}", rollback_err),
-                            ))));
+                            ), "トランザクション操作中のエラー".to_string())));
                         }
                     }
                     return Err(CphError::Fs(FileSystemError::Io(std::io::Error::new(
                         std::io::ErrorKind::Other,
                         format!("操作の実行中にエラーが発生しました: {}", e),
-                    ))));
+                    ), "トランザクション操作中のエラー".to_string())));
                 }
             }
         }
