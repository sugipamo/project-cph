diff --git a/src/error.rs b/src/error.rs
index 859dc55..e8d7092 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -9,6 +9,16 @@ pub mod fs;
 pub mod docker;
 pub mod contest;
 pub mod config;
+pub mod macros;
+
+/// エラーの重大度を表す列挙型
+#[derive(Debug, Clone, Copy, PartialEq, Eq)]
+pub enum ErrorSeverity {
+    Info,
+    Warning,
+    Error,
+    Critical,
+}
 
 /// エラーコンテキストを表す構造体
 #[derive(Debug, Clone)]
@@ -17,9 +27,9 @@ pub struct ErrorContext {
     pub location: String,
     pub hint: Option<String>,
     pub source: Option<Arc<dyn std::error::Error + Send + Sync>>,
-    // トレース情報の追加
     pub backtrace: Option<String>,
     pub system_state: Option<SystemState>,
+    pub severity: ErrorSeverity,
 }
 
 /// システム状態を表す構造体
@@ -28,6 +38,8 @@ pub struct SystemState {
     pub working_directory: String,
     pub active_contest: Option<String>,
     pub docker_status: Option<String>,
+    pub last_operation: Option<String>,
+    pub environment_info: Option<String>,
 }
 
 impl ErrorContext {
@@ -37,8 +49,9 @@ impl ErrorContext {
             location: location.into(),
             hint: None,
             source: None,
-            backtrace: std::backtrace::Backtrace::capture().to_string().into(),
+            backtrace: Some(std::backtrace::Backtrace::capture().to_string()),
             system_state: None,
+            severity: ErrorSeverity::Error,
         }
     }
 
@@ -56,31 +69,42 @@ impl ErrorContext {
         self.system_state = Some(state);
         self
     }
+
+    pub fn with_severity(mut self, severity: ErrorSeverity) -> Self {
+        self.severity = severity;
+        self
+    }
 }
 
 /// 共通のエラー型
 #[derive(Debug, Error)]
 pub enum CphError {
-    #[error("ファイルシステムエラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
-        context.operation, context.location, 
+    #[error("{}\n場所: {}\n重大度: {:?}\nエラー: {}\nヒント: {}", 
+        context.operation,
+        context.location,
+        context.severity,
         context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
-        context.hint.as_deref().unwrap_or("ファイルシステムの操作を確認してください。"))]
+        context.hint.as_deref().unwrap_or("詳細については、ドキュメントを参照してください。"))]
     FileSystem {
         context: ErrorContext,
         kind: fs::FileSystemErrorKind,
     },
 
-    #[error("Dockerエラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
-        context.operation, context.location,
+    #[error("{}\n場所: {}\n重大度: {:?}\nエラー: {}\nヒント: {}", 
+        context.operation,
+        context.location,
+        context.severity,
         context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
-        context.hint.as_deref().unwrap_or("Docker環境を確認してください。"))]
+        context.hint.as_deref().unwrap_or("Dockerの設定を確認してください。"))]
     Docker {
         context: ErrorContext,
         kind: docker::DockerErrorKind,
     },
 
-    #[error("コンテストエラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
-        context.operation, context.location,
+    #[error("{}\n場所: {}\n重大度: {:?}\nエラー: {}\nヒント: {}", 
+        context.operation,
+        context.location,
+        context.severity,
         context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
         context.hint.as_deref().unwrap_or("コンテストの設定を確認してください。"))]
     Contest {
@@ -88,8 +112,10 @@ pub enum CphError {
         kind: contest::ContestErrorKind,
     },
 
-    #[error("設定エラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
-        context.operation, context.location,
+    #[error("{}\n場所: {}\n重大度: {:?}\nエラー: {}\nヒント: {}", 
+        context.operation,
+        context.location,
+        context.severity,
         context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
         context.hint.as_deref().unwrap_or("設定ファイルを確認してください。"))]
     Config {
@@ -97,93 +123,22 @@ pub enum CphError {
         kind: config::ConfigErrorKind,
     },
 
-    #[error("{}\nヒント: {}", 
+    #[error("{}\n場所: {}\n重大度: {:?}\nヒント: {}", 
         context.operation,
+        context.location,
+        context.severity,
         context.hint.as_deref().unwrap_or("詳細については、ドキュメントを参照してください。"))]
     Other {
         context: ErrorContext,
     },
 }
 
-#[derive(Debug, Clone)]
-pub enum FileSystemErrorKind {
-    NotFound,
-    Permission,
-    Io,
-    Path,
-}
-
-impl std::fmt::Display for FileSystemErrorKind {
-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
-        match self {
-            Self::NotFound => write!(f, "ファイルが見つかりません"),
-            Self::Permission => write!(f, "アクセス権限がありません"),
-            Self::Io => write!(f, "IOエラー"),
-            Self::Path => write!(f, "パスエラー"),
-        }
-    }
-}
-
-#[derive(Debug, Clone)]
-pub enum DockerErrorKind {
-    ConnectionFailed,
-    BuildFailed,
-    ExecutionFailed,
-    StateFailed,
-}
-
-impl std::fmt::Display for DockerErrorKind {
-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
-        match self {
-            Self::ConnectionFailed => write!(f, "Dockerデーモンに接続できません"),
-            Self::BuildFailed => write!(f, "イメージのビルドに失敗しました"),
-            Self::ExecutionFailed => write!(f, "コンテナの実行に失敗しました"),
-            Self::StateFailed => write!(f, "コンテナの状態管理に失敗しました"),
-        }
-    }
-}
-
-#[derive(Debug, Clone)]
-pub enum ContestErrorKind {
-    Site,
-    Language,
-    Compiler,
-    State,
-}
-
-impl std::fmt::Display for ContestErrorKind {
-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
-        match self {
-            Self::Site => write!(f, "サイトエラー"),
-            Self::Language => write!(f, "言語エラー"),
-            Self::Compiler => write!(f, "コンパイラエラー"),
-            Self::State => write!(f, "状態管理エラー"),
-        }
-    }
-}
-
-#[derive(Debug, Clone)]
-pub enum ConfigErrorKind {
-    NotFound,
-    Parse,
-    InvalidValue,
-}
-
-impl std::fmt::Display for ConfigErrorKind {
-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
-        match self {
-            Self::NotFound => write!(f, "設定ファイルが見つかりません"),
-            Self::Parse => write!(f, "設定ファイルの解析に失敗しました"),
-            Self::InvalidValue => write!(f, "無効な設定値"),
-        }
-    }
-}
-
 /// エラーにコンテキストを追加するためのトレイト
 pub trait ErrorExt {
     fn with_context(self, context: ErrorContext) -> Self;
     fn with_hint(self, hint: impl Into<String>) -> Self;
     fn with_source(self, source: impl std::error::Error + Send + Sync + 'static) -> Self;
+    fn with_severity(self, severity: ErrorSeverity) -> Self;
 }
 
 impl ErrorExt for CphError {
@@ -264,6 +219,114 @@ impl ErrorExt for CphError {
             }
         }
     }
+
+    fn with_severity(self, severity: ErrorSeverity) -> Self {
+        match self {
+            CphError::FileSystem { context, kind } => {
+                CphError::FileSystem {
+                    context: context.with_severity(severity),
+                    kind,
+                }
+            }
+            CphError::Docker { context, kind } => {
+                CphError::Docker {
+                    context: context.with_severity(severity),
+                    kind,
+                }
+            }
+            CphError::Contest { context, kind } => {
+                CphError::Contest {
+                    context: context.with_severity(severity),
+                    kind,
+                }
+            }
+            CphError::Config { context, kind } => {
+                CphError::Config {
+                    context: context.with_severity(severity),
+                    kind,
+                }
+            }
+            CphError::Other { context } => {
+                CphError::Other {
+                    context: context.with_severity(severity),
+                }
+            }
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub enum FileSystemErrorKind {
+    NotFound,
+    Permission,
+    Io,
+    Path,
+}
+
+impl std::fmt::Display for FileSystemErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::NotFound => write!(f, "ファイルが見つかりません"),
+            Self::Permission => write!(f, "アクセス権限がありません"),
+            Self::Io => write!(f, "IOエラー"),
+            Self::Path => write!(f, "パスエラー"),
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub enum DockerErrorKind {
+    ConnectionFailed,
+    BuildFailed,
+    ExecutionFailed,
+    StateFailed,
+}
+
+impl std::fmt::Display for DockerErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::ConnectionFailed => write!(f, "Dockerデーモンに接続できません"),
+            Self::BuildFailed => write!(f, "イメージのビルドに失敗しました"),
+            Self::ExecutionFailed => write!(f, "コンテナの実行に失敗しました"),
+            Self::StateFailed => write!(f, "コンテナの状態管理に失敗しました"),
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub enum ContestErrorKind {
+    Site,
+    Language,
+    Compiler,
+    State,
+}
+
+impl std::fmt::Display for ContestErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::Site => write!(f, "サイトエラー"),
+            Self::Language => write!(f, "言語エラー"),
+            Self::Compiler => write!(f, "コンパイラエラー"),
+            Self::State => write!(f, "状態管理エラー"),
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub enum ConfigErrorKind {
+    NotFound,
+    Parse,
+    InvalidValue,
+}
+
+impl std::fmt::Display for ConfigErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::NotFound => write!(f, "設定ファイルが見つかりません"),
+            Self::Parse => write!(f, "設定ファイルの解析に失敗しました"),
+            Self::InvalidValue => write!(f, "無効な設定値"),
+        }
+    }
 }
 
 pub type Result<T> = std::result::Result<T, CphError>;
@@ -273,70 +336,51 @@ pub mod helpers {
     use super::*;
 
     // ファイルシステム関連のヘルパー
-    pub fn fs_not_found(operation: impl Into<String>, path: impl Into<String>) -> CphError {
-        CphError::FileSystem {
-            context: ErrorContext::new(operation, path),
-            kind: fs::FileSystemErrorKind::NotFound,
-        }
+    pub fn fs_not_found(op: impl Into<String>, path: impl Into<String>) -> CphError {
+        fs_error!(op.into(), path.into(), FileSystemErrorKind::NotFound)
     }
 
-    pub fn fs_permission(operation: impl Into<String>, path: impl Into<String>) -> CphError {
-        CphError::FileSystem {
-            context: ErrorContext::new(operation, path),
-            kind: fs::FileSystemErrorKind::Permission,
-        }
+    pub fn fs_permission(op: impl Into<String>, path: impl Into<String>) -> CphError {
+        fs_error!(op.into(), path.into(), FileSystemErrorKind::Permission)
     }
 
-    pub fn fs_io(operation: impl Into<String>, path: impl Into<String>, error: io::Error) -> CphError {
-        CphError::FileSystem {
-            context: ErrorContext::new(operation, path).with_source(error),
-            kind: fs::FileSystemErrorKind::Io,
-        }
+    pub fn fs_io(op: impl Into<String>, path: impl Into<String>, error: std::io::Error) -> CphError {
+        fs_error!(op.into(), path.into(), FileSystemErrorKind::Io)
+            .with_source(error)
     }
 
     // Docker関連のヘルパー
-    pub fn docker_connection(operation: impl Into<String>, details: impl Into<String>) -> CphError {
-        CphError::Docker {
-            context: ErrorContext::new(operation, details),
-            kind: docker::DockerErrorKind::ConnectionFailed,
-        }
+    pub fn docker_build(op: impl Into<String>, context: impl Into<String>, error: std::io::Error) -> CphError {
+        docker_error!(op.into(), context.into(), DockerErrorKind::BuildFailed)
+            .with_source(error)
     }
 
-    pub fn docker_build(operation: impl Into<String>, details: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
-        CphError::Docker {
-            context: ErrorContext::new(operation, details).with_source(error),
-            kind: docker::DockerErrorKind::BuildFailed,
-        }
+    pub fn docker_execution(op: impl Into<String>, context: impl Into<String>, error: std::io::Error) -> CphError {
+        docker_error!(op.into(), context.into(), DockerErrorKind::ExecutionFailed)
+            .with_source(error)
+    }
+
+    pub fn docker_connection(op: impl Into<String>, context: impl Into<String>) -> CphError {
+        docker_error!(op.into(), context.into(), DockerErrorKind::ConnectionFailed)
     }
 
     // コンテスト関連のヘルパー
-    pub fn contest_site(operation: impl Into<String>, details: impl Into<String>) -> CphError {
-        CphError::Contest {
-            context: ErrorContext::new(operation, details),
-            kind: contest::ContestErrorKind::Site,
-        }
+    pub fn contest_site(op: impl Into<String>, context: impl Into<String>) -> CphError {
+        contest_error!(op.into(), context.into(), ContestErrorKind::Site)
     }
 
-    pub fn contest_language(operation: impl Into<String>, details: impl Into<String>) -> CphError {
-        CphError::Contest {
-            context: ErrorContext::new(operation, details),
-            kind: contest::ContestErrorKind::Language,
-        }
+    pub fn contest_language(op: impl Into<String>, context: impl Into<String>) -> CphError {
+        contest_error!(op.into(), context.into(), ContestErrorKind::Language)
     }
 
     // 設定関連のヘルパー
-    pub fn config_not_found(operation: impl Into<String>, path: impl Into<String>) -> CphError {
-        CphError::Config {
-            context: ErrorContext::new(operation, path),
-            kind: config::ConfigErrorKind::NotFound,
-        }
+    pub fn config_not_found(op: impl Into<String>, path: impl Into<String>) -> CphError {
+        config_error!(op.into(), path.into(), ConfigErrorKind::NotFound)
     }
 
-    pub fn config_parse(operation: impl Into<String>, path: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
-        CphError::Config {
-            context: ErrorContext::new(operation, path).with_source(error),
-            kind: config::ConfigErrorKind::Parse,
-        }
+    pub fn config_parse(op: impl Into<String>, path: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
+        config_error!(op.into(), path.into(), ConfigErrorKind::Parse)
+            .with_source(error)
     }
 }
 
