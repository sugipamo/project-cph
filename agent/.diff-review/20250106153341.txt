diff --git a/src/contest/error.rs b/src/contest/error.rs
index 0761ac0..c0fc777 100644
--- a/src/contest/error.rs
+++ b/src/contest/error.rs
@@ -1,41 +1,36 @@
 use crate::error::{CphError, helpers, ErrorExt};
+use crate::error::contest::ContestErrorKind;
+use crate::error::config::ConfigErrorKind;
 
 pub fn site_err(msg: String) -> CphError {
-    helpers::contest_site(
-        "サイトアクセス",
-        format!("Contest Site: {}", msg)
-    )
+    helpers::contest_error(ContestErrorKind::Site, "サイトアクセス", format!("Contest Site: {}", msg))
 }
 
 pub fn site_err_with_hint(msg: String, hint: String) -> CphError {
-    helpers::contest_site(
-        "サイトアクセス",
-        format!("Contest Site: {}", msg)
-    ).with_hint(hint)
+    helpers::contest_error(ContestErrorKind::Site, "サイトアクセス", format!("Contest Site: {}", msg))
+        .with_hint(hint)
 }
 
 pub fn language_err(msg: String) -> CphError {
-    helpers::contest_language("言語設定", msg)
+    helpers::contest_error(ContestErrorKind::Language, "言語設定", msg)
 }
 
 pub fn config_err(msg: String) -> CphError {
-    CphError::Config {
-        context: crate::error::ErrorContext::new("コンテスト設定", "contest").with_hint(msg),
-        kind: crate::error::config::ConfigErrorKind::InvalidValue,
-    }
+    helpers::config_error(ConfigErrorKind::InvalidValue, "コンテスト設定", msg)
 }
 
 pub fn unsupported_language_err(lang: String) -> CphError {
-    let lang_clone = lang.clone();
-    helpers::contest_language("言語チェック", lang)
-        .with_hint(format!("サポートされていない言語です: {}", lang_clone))
+    let hint = format!("サポートされていない言語です: {}", lang);
+    helpers::contest_error(ContestErrorKind::Language, "言語チェック", lang)
+        .with_hint(hint)
 }
 
 pub fn compiler_not_found_err(compiler: String) -> CphError {
-    let compiler_clone = compiler.clone();
-    CphError::Contest {
-        context: crate::error::ErrorContext::new("コンパイラチェック", compiler)
-            .with_hint(format!("コンパイラが見つかりません: {}", compiler_clone)),
-        kind: crate::error::contest::ContestErrorKind::Compiler,
-    }
+    let hint = format!("コンパイラが見つかりません: {}", compiler);
+    helpers::contest_error(ContestErrorKind::Compiler, "コンパイラチェック", compiler)
+        .with_hint(hint)
+}
+
+pub fn state_err(msg: String) -> CphError {
+    helpers::contest_error(ContestErrorKind::State, "状態管理", msg)
 }
diff --git a/src/docker/error.rs b/src/docker/error.rs
index 57b2c83..42f42b5 100644
--- a/src/docker/error.rs
+++ b/src/docker/error.rs
@@ -1,61 +1,36 @@
 use crate::error::{CphError, helpers, ErrorExt};
+use crate::error::docker::DockerErrorKind;
 
 pub fn docker_err(msg: String) -> CphError {
-    helpers::docker_build(
-        "Docker操作",
-        "Docker",
-        std::io::Error::new(std::io::ErrorKind::Other, msg)
-    )
+    helpers::docker_error(DockerErrorKind::ExecutionFailed, "Docker操作", msg)
 }
 
 pub fn container_err(msg: String) -> CphError {
-    helpers::docker_build(
-        "コンテナ操作",
-        "Container",
-        std::io::Error::new(std::io::ErrorKind::Other, msg)
-    )
+    helpers::docker_error(DockerErrorKind::ExecutionFailed, "コンテナ操作", msg)
 }
 
 pub fn compilation_err(msg: String) -> CphError {
-    helpers::docker_build(
-        "コンパイル",
-        "Compiler",
-        std::io::Error::new(std::io::ErrorKind::Other, msg)
-    )
+    helpers::docker_error(DockerErrorKind::BuildFailed, "コンパイル", msg)
 }
 
 pub fn command_err(msg: String) -> CphError {
-    helpers::docker_build(
-        "コマンド実行",
-        "Command",
-        std::io::Error::new(std::io::ErrorKind::Other, msg)
-    )
+    helpers::docker_error(DockerErrorKind::ExecutionFailed, "コマンド実行", msg)
 }
 
 pub fn state_err(msg: String) -> CphError {
-    helpers::docker_build(
-        "状態管理",
-        "State",
-        std::io::Error::new(std::io::ErrorKind::Other, msg)
-    )
+    helpers::docker_error(DockerErrorKind::StateFailed, "状態管理", msg)
 }
 
 pub fn build_err(image: String, context: String) -> CphError {
-    helpers::docker_build(
-        "イメージビルド",
-        &image,
-        std::io::Error::new(std::io::ErrorKind::Other, format!("コンテキスト: {}", context))
-    )
+    helpers::docker_error(DockerErrorKind::BuildFailed, "イメージビルド", &image)
+        .with_hint(format!("コンテキスト: {}", context))
 }
 
 pub fn build_err_with_hint(image: String, context: String, hint: String) -> CphError {
-    helpers::docker_build(
-        "イメージビルド",
-        &image,
-        std::io::Error::new(std::io::ErrorKind::Other, format!("コンテキスト: {}", context))
-    ).with_hint(hint)
+    helpers::docker_error(DockerErrorKind::BuildFailed, "イメージビルド", &image)
+        .with_hint(format!("コンテキスト: {}, ヒント: {}", context, hint))
 }
 
 pub fn connection_err() -> CphError {
-    helpers::docker_connection("Docker接続", "デーモン接続")
+    helpers::docker_error(DockerErrorKind::ConnectionFailed, "Docker接続", "接続に失敗しました")
 } 
\ No newline at end of file
diff --git a/src/error.rs b/src/error.rs
index 4745958..5f0a8fd 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -1,7 +1,6 @@
 #[macro_use]
 pub mod macros;
 
-use std::io;
 use std::sync::Arc;
 use thiserror::Error;
 
@@ -22,6 +21,12 @@ pub enum ErrorSeverity {
     Critical,
 }
 
+impl Default for ErrorSeverity {
+    fn default() -> Self {
+        Self::Error
+    }
+}
+
 /// エラーコンテキストを表す構造体
 #[derive(Debug, Clone)]
 pub struct ErrorContext {
@@ -44,6 +49,20 @@ pub struct SystemState {
     pub environment_info: Option<String>,
 }
 
+impl Default for ErrorContext {
+    fn default() -> Self {
+        Self {
+            operation: String::new(),
+            location: String::new(),
+            hint: None,
+            source: None,
+            backtrace: None,
+            system_state: None,
+            severity: ErrorSeverity::default(),
+        }
+    }
+}
+
 impl ErrorContext {
     pub fn new(operation: impl Into<String>, location: impl Into<String>) -> Self {
         Self {
@@ -51,9 +70,9 @@ impl ErrorContext {
             location: location.into(),
             hint: None,
             source: None,
-            backtrace: Some(std::backtrace::Backtrace::capture().to_string()),
+            backtrace: None,
             system_state: None,
-            severity: ErrorSeverity::Error,
+            severity: ErrorSeverity::default(),
         }
     }
 
@@ -263,6 +282,7 @@ pub enum FileSystemErrorKind {
     Permission,
     Io,
     Path,
+    Transaction,
 }
 
 impl std::fmt::Display for FileSystemErrorKind {
@@ -272,6 +292,7 @@ impl std::fmt::Display for FileSystemErrorKind {
             Self::Permission => write!(f, "アクセス権限がありません"),
             Self::Io => write!(f, "IOエラー"),
             Self::Path => write!(f, "パスエラー"),
+            Self::Transaction => write!(f, "トランザクションエラー"),
         }
     }
 }
@@ -282,6 +303,7 @@ pub enum DockerErrorKind {
     BuildFailed,
     ExecutionFailed,
     StateFailed,
+    ValidationFailed,
 }
 
 impl std::fmt::Display for DockerErrorKind {
@@ -291,6 +313,7 @@ impl std::fmt::Display for DockerErrorKind {
             Self::BuildFailed => write!(f, "イメージのビルドに失敗しました"),
             Self::ExecutionFailed => write!(f, "コンテナの実行に失敗しました"),
             Self::StateFailed => write!(f, "コンテナの状態管理に失敗しました"),
+            Self::ValidationFailed => write!(f, "バリデーションエラー"),
         }
     }
 }
@@ -301,6 +324,7 @@ pub enum ContestErrorKind {
     Language,
     Compiler,
     State,
+    Parse,
 }
 
 impl std::fmt::Display for ContestErrorKind {
@@ -310,6 +334,7 @@ impl std::fmt::Display for ContestErrorKind {
             Self::Language => write!(f, "言語エラー"),
             Self::Compiler => write!(f, "コンパイラエラー"),
             Self::State => write!(f, "状態管理エラー"),
+            Self::Parse => write!(f, "パースエラー"),
         }
     }
 }
@@ -319,6 +344,7 @@ pub enum ConfigErrorKind {
     NotFound,
     Parse,
     InvalidValue,
+    Validation,
 }
 
 impl std::fmt::Display for ConfigErrorKind {
@@ -327,6 +353,7 @@ impl std::fmt::Display for ConfigErrorKind {
             Self::NotFound => write!(f, "設定ファイルが見つかりません"),
             Self::Parse => write!(f, "設定ファイルの解析に失敗しました"),
             Self::InvalidValue => write!(f, "無効な設定値"),
+            Self::Validation => write!(f, "バリデーションエラー"),
         }
     }
 }
@@ -336,53 +363,79 @@ pub type Result<T> = std::result::Result<T, CphError>;
 // エラーヘルパー関数
 pub mod helpers {
     use super::*;
-
-    // ファイルシステム関連のヘルパー
-    pub fn fs_not_found(op: impl Into<String>, path: impl Into<String>) -> CphError {
-        fs_error!(op.into(), path.into(), FileSystemErrorKind::NotFound)
-    }
-
-    pub fn fs_permission(op: impl Into<String>, path: impl Into<String>) -> CphError {
-        fs_error!(op.into(), path.into(), FileSystemErrorKind::Permission)
-    }
-
-    pub fn fs_io(op: impl Into<String>, path: impl Into<String>, error: std::io::Error) -> CphError {
-        fs_error!(op.into(), path.into(), FileSystemErrorKind::Io)
-            .with_source(error)
-    }
-
-    // Docker関連のヘルパー
-    pub fn docker_build(op: impl Into<String>, context: impl Into<String>, error: std::io::Error) -> CphError {
-        docker_error!(op.into(), context.into(), DockerErrorKind::BuildFailed)
-            .with_source(error)
-    }
-
-    pub fn docker_execution(op: impl Into<String>, context: impl Into<String>, error: std::io::Error) -> CphError {
-        docker_error!(op.into(), context.into(), DockerErrorKind::ExecutionFailed)
-            .with_source(error)
+    use super::fs::FileSystemErrorKind;
+    use super::docker::DockerErrorKind;
+    use super::contest::ContestErrorKind;
+    use super::config::ConfigErrorKind;
+
+    // ファイルシステム関連のヘルパー関数
+    pub fn fs_error(kind: FileSystemErrorKind, op: impl Into<String>, path: impl Into<String>) -> CphError {
+        CphError::FileSystem {
+            context: ErrorContext::new(op, path).with_severity(match kind {
+                FileSystemErrorKind::NotFound => ErrorSeverity::Warning,
+                FileSystemErrorKind::Permission => ErrorSeverity::Error,
+                FileSystemErrorKind::Io => ErrorSeverity::Error,
+                FileSystemErrorKind::Path => ErrorSeverity::Warning,
+                FileSystemErrorKind::Transaction => ErrorSeverity::Error,
+            }),
+            kind,
+        }
     }
 
-    pub fn docker_connection(op: impl Into<String>, context: impl Into<String>) -> CphError {
-        docker_error!(op.into(), context.into(), DockerErrorKind::ConnectionFailed)
+    // Docker関連のヘルパー関数
+    pub fn docker_error(kind: DockerErrorKind, op: impl Into<String>, context: impl Into<String>) -> CphError {
+        CphError::Docker {
+            context: ErrorContext::new(op, context).with_severity(match kind {
+                DockerErrorKind::ConnectionFailed => ErrorSeverity::Critical,
+                DockerErrorKind::BuildFailed => ErrorSeverity::Error,
+                DockerErrorKind::ExecutionFailed => ErrorSeverity::Error,
+                DockerErrorKind::StateFailed => ErrorSeverity::Warning,
+                DockerErrorKind::ValidationFailed => ErrorSeverity::Error,
+            }),
+            kind,
+        }
     }
 
-    // コンテスト関連のヘルパー
-    pub fn contest_site(op: impl Into<String>, context: impl Into<String>) -> CphError {
-        contest_error!(op.into(), context.into(), ContestErrorKind::Site)
+    // コンテスト関連のヘルパー関数
+    pub fn contest_error(kind: ContestErrorKind, op: impl Into<String>, context: impl Into<String>) -> CphError {
+        CphError::Contest {
+            context: ErrorContext::new(op, context).with_severity(match kind {
+                ContestErrorKind::Site => ErrorSeverity::Error,
+                ContestErrorKind::Language => ErrorSeverity::Warning,
+                ContestErrorKind::Compiler => ErrorSeverity::Error,
+                ContestErrorKind::State => ErrorSeverity::Warning,
+                ContestErrorKind::Parse => ErrorSeverity::Error,
+            }),
+            kind,
+        }
     }
 
-    pub fn contest_language(op: impl Into<String>, context: impl Into<String>) -> CphError {
-        contest_error!(op.into(), context.into(), ContestErrorKind::Language)
+    // 設定関連のヘルパー関数
+    pub fn config_error(kind: ConfigErrorKind, op: impl Into<String>, context: impl Into<String>) -> CphError {
+        CphError::Config {
+            context: ErrorContext::new(op, context).with_severity(match kind {
+                ConfigErrorKind::NotFound => ErrorSeverity::Warning,
+                ConfigErrorKind::Parse => ErrorSeverity::Error,
+                ConfigErrorKind::InvalidValue => ErrorSeverity::Error,
+                ConfigErrorKind::Validation => ErrorSeverity::Error,
+            }),
+            kind,
+        }
     }
 
-    // 設定関連のヘルパー
-    pub fn config_not_found(op: impl Into<String>, path: impl Into<String>) -> CphError {
-        config_error!(op.into(), path.into(), ConfigErrorKind::NotFound)
+    // 一般的なエラーヘルパー関数
+    pub fn other_error(op: impl Into<String>, context: impl Into<String>, severity: ErrorSeverity) -> CphError {
+        CphError::Other {
+            context: ErrorContext::new(op, context).with_severity(severity),
+        }
     }
 
-    pub fn config_parse(op: impl Into<String>, path: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
-        config_error!(op.into(), path.into(), ConfigErrorKind::Parse)
-            .with_source(error)
+    // バックトレース付きのエラーコンテキスト生成
+    pub fn with_backtrace(mut context: ErrorContext) -> ErrorContext {
+        if context.backtrace.is_none() {
+            context.backtrace = Some(std::backtrace::Backtrace::capture().to_string());
+        }
+        context
     }
 }
 
diff --git a/src/error/helpers.rs b/src/error/helpers.rs
index f6c87ee..91fa13f 100644
--- a/src/error/helpers.rs
+++ b/src/error/helpers.rs
@@ -1,53 +1,71 @@
-use super::*;
-use crate::{fs_error, docker_error, contest_error, config_error};
+use crate::error::{CphError, ErrorContext, ErrorSeverity};
+use crate::error::fs::FileSystemErrorKind;
+use crate::error::docker::DockerErrorKind;
+use crate::error::contest::ContestErrorKind;
+use crate::error::config::ConfigErrorKind;
 
-// ファイルシステム関連のヘルパー
-pub fn fs_not_found(op: impl Into<String>, path: impl Into<String>) -> CphError {
-    fs_error!(op.into(), path.into(), FileSystemErrorKind::NotFound)
+// ファイルシステム関連のヘルパー関数
+pub fn fs_error(kind: FileSystemErrorKind, op: impl Into<String>, path: impl Into<String>) -> CphError {
+    CphError::FileSystem {
+        context: ErrorContext::new(op, path).with_severity(match kind {
+            FileSystemErrorKind::NotFound => ErrorSeverity::Warning,
+            FileSystemErrorKind::Permission => ErrorSeverity::Error,
+            FileSystemErrorKind::Io => ErrorSeverity::Error,
+            FileSystemErrorKind::Path => ErrorSeverity::Warning,
+        }),
+        kind,
+    }
 }
 
-pub fn fs_permission(op: impl Into<String>, path: impl Into<String>) -> CphError {
-    fs_error!(op.into(), path.into(), FileSystemErrorKind::Permission)
+// Docker関連のヘルパー関数
+pub fn docker_error(kind: DockerErrorKind, op: impl Into<String>, context: impl Into<String>) -> CphError {
+    CphError::Docker {
+        context: ErrorContext::new(op, context).with_severity(match kind {
+            DockerErrorKind::ConnectionFailed => ErrorSeverity::Critical,
+            DockerErrorKind::BuildFailed => ErrorSeverity::Error,
+            DockerErrorKind::ExecutionFailed => ErrorSeverity::Error,
+            DockerErrorKind::StateFailed => ErrorSeverity::Warning,
+        }),
+        kind,
+    }
 }
 
-pub fn fs_io(op: impl Into<String>, path: impl Into<String>, error: std::io::Error) -> CphError {
-    fs_error!(op.into(), path.into(), FileSystemErrorKind::Io)
-        .with_source(error)
+// コンテスト関連のヘルパー関数
+pub fn contest_error(kind: ContestErrorKind, op: impl Into<String>, context: impl Into<String>) -> CphError {
+    CphError::Contest {
+        context: ErrorContext::new(op, context).with_severity(match kind {
+            ContestErrorKind::Site => ErrorSeverity::Error,
+            ContestErrorKind::Language => ErrorSeverity::Warning,
+            ContestErrorKind::Compiler => ErrorSeverity::Error,
+            ContestErrorKind::State => ErrorSeverity::Warning,
+        }),
+        kind,
+    }
 }
 
-// Docker関連のヘルパー
-pub fn docker_build(op: impl Into<String>, context: impl Into<String>, error: std::io::Error) -> CphError {
-    docker_error!(op.into(), context.into(), DockerErrorKind::BuildFailed)
-        .with_source(error)
+// 設定関連のヘルパー関数
+pub fn config_error(kind: ConfigErrorKind, op: impl Into<String>, context: impl Into<String>) -> CphError {
+    CphError::Config {
+        context: ErrorContext::new(op, context).with_severity(match kind {
+            ConfigErrorKind::NotFound => ErrorSeverity::Warning,
+            ConfigErrorKind::Parse => ErrorSeverity::Error,
+            ConfigErrorKind::InvalidValue => ErrorSeverity::Error,
+        }),
+        kind,
+    }
 }
 
-pub fn docker_execution(op: impl Into<String>, context: impl Into<String>, error: std::io::Error) -> CphError {
-    docker_error!(op.into(), context.into(), DockerErrorKind::ExecutionFailed)
-        .with_source(error)
+// 一般的なエラーヘルパー関数
+pub fn other_error(op: impl Into<String>, context: impl Into<String>, severity: ErrorSeverity) -> CphError {
+    CphError::Other {
+        context: ErrorContext::new(op, context).with_severity(severity),
+    }
 }
 
-pub fn docker_connection(op: impl Into<String>, context: impl Into<String>) -> CphError {
-    docker_error!(op.into(), context.into(), DockerErrorKind::ConnectionFailed)
-}
-
-// コンテスト関連のヘルパー
-pub fn contest_site(op: impl Into<String>, context: impl Into<String>) -> CphError {
-    contest_error!(op.into(), context.into(), ContestErrorKind::Site)
-}
-
-pub fn contest_language(op: impl Into<String>, context: impl Into<String>) -> CphError {
-    contest_error!(op.into(), context.into(), ContestErrorKind::Language)
-}
-
-// 設定関連のヘルパー
-pub fn config_not_found(op: impl Into<String>, path: impl Into<String>) -> CphError {
-    config_error!(op.into(), path.into(), ConfigErrorKind::NotFound)
-}
-
-pub fn config_parse(op: impl Into<String>, path: impl Into<String>) -> CphError {
-    config_error!(op.into(), path.into(), ConfigErrorKind::Parse)
-}
-
-pub fn config_invalid(op: impl Into<String>, path: impl Into<String>) -> CphError {
-    config_error!(op.into(), path.into(), ConfigErrorKind::InvalidValue)
+// バックトレース付きのエラーコンテキスト生成
+pub fn with_backtrace(mut context: ErrorContext) -> ErrorContext {
+    if context.backtrace.is_none() {
+        context.backtrace = Some(std::backtrace::Backtrace::capture().to_string());
+    }
+    context
 } 
\ No newline at end of file
diff --git a/src/fs/error.rs b/src/fs/error.rs
index 9898bdd..c80c972 100644
--- a/src/fs/error.rs
+++ b/src/fs/error.rs
@@ -1,17 +1,24 @@
-use crate::error::{CphError, helpers};
+use crate::error::{CphError, helpers, ErrorExt};
+use crate::error::fs::FileSystemErrorKind;
 
 pub fn not_found_err(path: String) -> CphError {
-    helpers::fs_not_found("ファイル検索", path)
+    helpers::fs_error(FileSystemErrorKind::NotFound, "ファイル検索", path)
 }
 
 pub fn io_err(error: std::io::Error, context: String) -> CphError {
-    helpers::fs_io("ファイル操作", context, error)
+    helpers::fs_error(FileSystemErrorKind::Io, "ファイル操作", context)
+        .with_source(error)
 }
 
 pub fn permission_err(path: String) -> CphError {
-    helpers::fs_permission("ファイルアクセス", path)
+    helpers::fs_error(FileSystemErrorKind::Permission, "ファイルアクセス", path)
 }
 
 pub fn transaction_err(error: std::io::Error, context: String) -> CphError {
-    helpers::fs_io("トランザクション処理", context, error)
+    helpers::fs_error(FileSystemErrorKind::Transaction, "トランザクション処理", context)
+        .with_source(error)
+}
+
+pub fn path_err(path: String) -> CphError {
+    helpers::fs_error(FileSystemErrorKind::Path, "パス解決", path)
 } 
\ No newline at end of file
diff --git a/src/test/mod.rs b/src/test/mod.rs
index a22ffe1..e0b9dbe 100644
--- a/src/test/mod.rs
+++ b/src/test/mod.rs
@@ -1,4 +1,5 @@
 use crate::error::{helpers, CphError, ErrorExt};
+use crate::error::config::ConfigErrorKind;
 
 #[derive(Debug, Clone)]
 pub struct TestCase {
@@ -9,7 +10,8 @@ pub struct TestCase {
 
 pub fn read_test_cases(test_dir: &str) -> Result<Vec<TestCase>, CphError> {
     let entries = std::fs::read_dir(test_dir)
-        .map_err(|e| helpers::config_not_found(
+        .map_err(|e| helpers::config_error(
+            ConfigErrorKind::NotFound,
             "テストディレクトリの読み取り",
             format!("ディレクトリ: {}, エラー: {}", test_dir, e)
         ))?;
@@ -17,7 +19,8 @@ pub fn read_test_cases(test_dir: &str) -> Result<Vec<TestCase>, CphError> {
     let mut test_cases = Vec::new();
     for entry in entries {
         let entry = entry
-            .map_err(|e| helpers::config_not_found(
+            .map_err(|e| helpers::config_error(
+                ConfigErrorKind::NotFound,
                 "テストファイルの読み取り",
                 format!("エラー: {}", e)
             ))?;
@@ -26,20 +29,23 @@ pub fn read_test_cases(test_dir: &str) -> Result<Vec<TestCase>, CphError> {
         if path.extension().map_or(false, |ext| ext == "in") {
             let expected_path = path.with_extension("out");
             if !expected_path.exists() {
-                return Err(helpers::config_not_found(
+                return Err(helpers::config_error(
+                    ConfigErrorKind::NotFound,
                     "期待値ファイルの確認",
                     format!("ファイル: {:?}", expected_path)
                 ).with_hint("テストケースには.inファイルと対応する.outファイルが必要です。"));
             }
 
             let input = std::fs::read_to_string(&path)
-                .map_err(|e| helpers::config_not_found(
+                .map_err(|e| helpers::config_error(
+                    ConfigErrorKind::NotFound,
                     "入力ファイルの読み取り",
                     format!("ファイル: {:?}, エラー: {}", path, e)
                 ))?;
 
             let expected = std::fs::read_to_string(&expected_path)
-                .map_err(|e| helpers::config_not_found(
+                .map_err(|e| helpers::config_error(
+                    ConfigErrorKind::NotFound,
                     "期待値ファイルの読み取り",
                     format!("ファイル: {:?}, エラー: {}", expected_path, e)
                 ))?;
@@ -56,9 +62,9 @@ pub fn read_test_cases(test_dir: &str) -> Result<Vec<TestCase>, CphError> {
 }
 
 pub fn not_found_err(path: String) -> CphError {
-    helpers::config_not_found("ファイル検索", path)
+    helpers::config_error(ConfigErrorKind::NotFound, "ファイル検索", path)
 }
 
 pub fn not_found_err_with_hint(path: String, hint: String) -> CphError {
-    helpers::config_not_found("ファイル検索", path).with_hint(hint)
+    helpers::config_error(ConfigErrorKind::NotFound, "ファイル検索", path).with_hint(hint)
 } 
\ No newline at end of file
