diff --git a/src/contest/model/state.rs b/src/contest/model/state.rs
index d3d50e7..cacfe4e 100644
--- a/src/contest/model/state.rs
+++ b/src/contest/model/state.rs
@@ -1,15 +1,42 @@
+// ContestStateとValidatedStateの実装について：
+// 
+// 当初はCow<'static, str>やStringの使用を検討しましたが、以下の理由でArcを採用しています：
+// 1. イミュータブルな設計の維持
+//    - validate()メソッドで所有権の移動が不要（Arc::cloneで対応）
+//    - 元のContestStateは変更されず再利用可能
+// 
+// 2. 将来のマルチスレッド対応
+//    - Arcによりスレッド間で安全に共有可能
+//    - 後からの変更コストを最小化
+// 
+// 3. パフォーマンスの最適化
+//    - Arc::cloneは参照カウントの増加のみで、実データのコピーは発生しない
+//    - メモリ効率が良い
+//
+// これらの理由から、シンプルさと将来の拡張性を両立する設計としてArcを採用しています。
+
 use std::path::PathBuf;
+use std::sync::Arc;
 use crate::error::Result;
 use crate::error::contest::ContestErrorKind;
 use crate::contest::error::contest_error;
 
 #[derive(Debug, Clone)]
 pub struct ContestState {
-    site: Option<String>,
-    contest_id: Option<String>,
-    problem_id: Option<String>,
-    language: Option<String>,
-    source_path: Option<PathBuf>,
+    site: Option<Arc<String>>,
+    contest_id: Option<Arc<String>>,
+    problem_id: Option<Arc<String>>,
+    language: Option<Arc<String>>,
+    source_path: Option<Arc<PathBuf>>,
+}
+
+#[derive(Debug, Clone)]
+pub struct ValidatedState {
+    pub(crate) site: Arc<String>,
+    pub(crate) contest_id: Arc<String>,
+    pub(crate) problem_id: Arc<String>,
+    pub(crate) language: Arc<String>,
+    pub(crate) source_path: Arc<PathBuf>,
 }
 
 impl ContestState {
@@ -24,97 +51,95 @@ impl ContestState {
     }
 
     pub fn site(&self) -> Option<&str> {
-        self.site.as_deref()
+        self.site.as_ref().map(|s| s.as_str())
     }
 
     pub fn contest_id(&self) -> Option<&str> {
-        self.contest_id.as_deref()
+        self.contest_id.as_ref().map(|s| s.as_str())
     }
 
     pub fn problem_id(&self) -> Option<&str> {
-        self.problem_id.as_deref()
+        self.problem_id.as_ref().map(|s| s.as_str())
     }
 
     pub fn language(&self) -> Option<&str> {
-        self.language.as_deref()
+        self.language.as_ref().map(|s| s.as_str())
     }
 
     pub fn source_path(&self) -> Option<&PathBuf> {
-        self.source_path.as_ref()
+        self.source_path.as_ref().map(|p| p.as_ref())
     }
 
-    pub fn validate_site(&self) -> Result<()> {
+    pub fn validate(&self) -> Result<ValidatedState> {
         if self.site.is_none() {
-            return Err(contest_error(
-                ContestErrorKind::NotFound,
-                "サイトが指定されていません"
-            ));
+            return Err(contest_error(ContestErrorKind::NotFound, "サイトが指定されていません"));
         }
-        Ok(())
-    }
-
-    pub fn validate_contest_id(&self) -> Result<()> {
         if self.contest_id.is_none() {
-            return Err(contest_error(
-                ContestErrorKind::NotFound,
-                "コンテストIDが指定されていません"
-            ));
+            return Err(contest_error(ContestErrorKind::NotFound, "コンテストIDが指定されていません"));
         }
-        Ok(())
-    }
-
-    pub fn validate_problem_id(&self) -> Result<()> {
         if self.problem_id.is_none() {
-            return Err(contest_error(
-                ContestErrorKind::NotFound,
-                "問題IDが指定されていません"
-            ));
+            return Err(contest_error(ContestErrorKind::NotFound, "問題IDが指定されていません"));
         }
-        Ok(())
-    }
-
-    pub fn validate_language(&self) -> Result<()> {
         if self.language.is_none() {
-            return Err(contest_error(
-                ContestErrorKind::NotFound,
-                "言語が指定されていません"
-            ));
+            return Err(contest_error(ContestErrorKind::NotFound, "言語が指定されていません"));
+        }
+        if self.source_path.is_none() {
+            return Err(contest_error(ContestErrorKind::NotFound, "ソースパスが指定されていません"));
         }
-        Ok(())
+
+        Ok(ValidatedState {
+            site: Arc::clone(self.site.as_ref().unwrap()),
+            contest_id: Arc::clone(self.contest_id.as_ref().unwrap()),
+            problem_id: Arc::clone(self.problem_id.as_ref().unwrap()),
+            language: Arc::clone(self.language.as_ref().unwrap()),
+            source_path: Arc::clone(self.source_path.as_ref().unwrap()),
+        })
     }
 
-    pub fn with_site<T: Into<String>>(self, site: T) -> Self {
-        Self {
-            site: Some(site.into()),
-            ..self
-        }
+    pub fn with_site<T: Into<String>>(mut self, site: T) -> Self {
+        self.site = Some(Arc::new(site.into()));
+        self
     }
 
-    pub fn with_contest_id<T: Into<String>>(self, contest_id: T) -> Self {
-        Self {
-            contest_id: Some(contest_id.into()),
-            ..self
-        }
+    pub fn with_contest_id<T: Into<String>>(mut self, contest_id: T) -> Self {
+        self.contest_id = Some(Arc::new(contest_id.into()));
+        self
     }
 
-    pub fn with_problem_id<T: Into<String>>(self, problem_id: T) -> Self {
-        Self {
-            problem_id: Some(problem_id.into()),
-            ..self
-        }
+    pub fn with_problem_id<T: Into<String>>(mut self, problem_id: T) -> Self {
+        self.problem_id = Some(Arc::new(problem_id.into()));
+        self
     }
 
-    pub fn with_language<T: Into<String>>(self, language: T) -> Self {
-        Self {
-            language: Some(language.into()),
-            ..self
-        }
+    pub fn with_language<T: Into<String>>(mut self, language: T) -> Self {
+        self.language = Some(Arc::new(language.into()));
+        self
     }
 
-    pub fn with_source_path(self, path: PathBuf) -> Self {
-        Self {
-            source_path: Some(path),
-            ..self
-        }
+    pub fn with_source_path<T: Into<PathBuf>>(mut self, source_path: T) -> Self {
+        self.source_path = Some(Arc::new(source_path.into()));
+        self
+    }
+}
+
+impl ValidatedState {
+    pub fn site(&self) -> &str {
+        &self.site
+    }
+
+    pub fn contest_id(&self) -> &str {
+        &self.contest_id
+    }
+
+    pub fn problem_id(&self) -> &str {
+        &self.problem_id
+    }
+
+    pub fn language(&self) -> &str {
+        &self.language
+    }
+
+    pub fn source_path(&self) -> &PathBuf {
+        &self.source_path
     }
 } 
\ No newline at end of file
diff --git a/src/contest/service/contest.rs b/src/contest/service/contest.rs
index e6e08b1..59ff147 100644
--- a/src/contest/service/contest.rs
+++ b/src/contest/service/contest.rs
@@ -1,4 +1,3 @@
-use std::borrow::Cow;
 use crate::error::Result;
 use crate::error::contest::ContestErrorKind;
 use crate::contest::error::contest_error;
