diff --git a/src/contest/error.rs b/src/contest/error.rs
index 119bcf5..29ed0e4 100644
--- a/src/contest/error.rs
+++ b/src/contest/error.rs
@@ -1,38 +1,26 @@
-use crate::error::{CphError, ContestError, LanguageError, ConfigError};
+use crate::error::{CphError, helpers, ErrorExt};
 
 pub fn site_err(msg: String) -> CphError {
-    CphError::Contest(ContestError::Site {
-        message: msg,
-        hint: None,
-    })
+    helpers::contest_site(msg)
 }
 
 pub fn site_err_with_hint(msg: String, hint: String) -> CphError {
-    CphError::Contest(ContestError::Site {
-        message: msg,
-        hint: Some(hint),
-    })
+    helpers::contest_site(msg)
+        .with_hint(hint)
 }
 
 pub fn language_err(msg: String) -> CphError {
-    CphError::Contest(ContestError::Language(LanguageError::Config {
-        message: msg,
-        help: "言語設定を確認してください。".to_string(),
-    }))
+    helpers::contest_language(msg)
 }
 
 pub fn config_err(msg: String) -> CphError {
-    CphError::Contest(ContestError::Config(ConfigError::InvalidValue {
-        field: "contest".to_string(),
-        message: msg,
-        help: "設定ファイルの内容を確認してください。".to_string(),
-    }))
+    helpers::config_invalid("contest", msg)
 }
 
 pub fn unsupported_language_err(lang: String) -> CphError {
-    CphError::Contest(ContestError::Language(LanguageError::Unsupported { lang }))
+    helpers::contest_language(format!("サポートされていない言語です: {}", lang))
 }
 
 pub fn compiler_not_found_err(compiler: String) -> CphError {
-    CphError::Contest(ContestError::Language(LanguageError::CompilerNotFound { compiler }))
+    helpers::contest_compiler(compiler)
 }
diff --git a/src/docker/error.rs b/src/docker/error.rs
index 07481de..636defa 100644
--- a/src/docker/error.rs
+++ b/src/docker/error.rs
@@ -1,95 +1,34 @@
-use crate::error::{CphError, DockerError};
+use crate::error::{CphError, helpers, ErrorExt};
 
 pub fn docker_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed {
-        message: msg,
-        context: "Docker操作".to_string(),
-    })
+    helpers::docker_execution(msg)
 }
 
 pub fn container_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed {
-        message: msg,
-        context: "コンテナ操作".to_string(),
-    })
+    helpers::docker_execution(msg)
 }
 
 pub fn compilation_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed {
-        message: msg,
-        context: "コンパイル処理".to_string(),
-    })
+    helpers::docker_execution(msg)
 }
 
 pub fn command_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed {
-        message: msg,
-        context: "コマンド実行".to_string(),
-    })
+    helpers::docker_execution(msg)
 }
 
 pub fn state_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed {
-        message: msg,
-        context: "コンテナの状態管理".to_string(),
-    })
+    helpers::docker_execution(msg)
 }
 
 pub fn build_err(image: String, context: String) -> CphError {
-    CphError::Docker(DockerError::BuildFailed {
-        image,
-        context,
-        hint: Some("Dockerfileの構文とビルド設定を確認してください。".to_string()),
-    })
+    helpers::docker_build(format!("イメージ: {}, コンテキスト: {}", image, context))
 }
 
 pub fn build_err_with_hint(image: String, context: String, hint: String) -> CphError {
-    CphError::Docker(DockerError::BuildFailed {
-        image,
-        context,
-        hint: Some(hint),
-    })
+    helpers::docker_build(format!("イメージ: {}, コンテキスト: {}", image, context))
+        .with_hint(hint)
 }
 
 pub fn connection_err() -> CphError {
-    CphError::Docker(DockerError::ConnectionFailed)
-}
-
-/// エラーにコンテキストを追加するためのトレイト
-pub trait ErrorExt<T> {
-    fn with_context(self, context: impl Into<String>) -> Result<T, CphError>;
-    fn with_hint(self, hint: impl Into<String>) -> Result<T, CphError>;
-}
-
-impl<T, E: Into<CphError>> ErrorExt<T> for Result<T, E> {
-    fn with_context(self, context: impl Into<String>) -> Result<T, CphError> {
-        self.map_err(|e| {
-            let error = e.into();
-            match error {
-                CphError::Docker(DockerError::ExecutionFailed { message, .. }) => {
-                    CphError::Docker(DockerError::ExecutionFailed {
-                        message,
-                        context: context.into(),
-                    })
-                }
-                _ => error,
-            }
-        })
-    }
-
-    fn with_hint(self, hint: impl Into<String>) -> Result<T, CphError> {
-        self.map_err(|e| {
-            let error = e.into();
-            match error {
-                CphError::Docker(DockerError::BuildFailed { image, context, .. }) => {
-                    CphError::Docker(DockerError::BuildFailed {
-                        image,
-                        context,
-                        hint: Some(hint.into()),
-                    })
-                }
-                _ => error,
-            }
-        })
-    }
+    helpers::docker_connection()
 } 
\ No newline at end of file
diff --git a/src/error.rs b/src/error.rs
index ea4bd20..32da0bc 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -1,5 +1,4 @@
 use std::io;
-use std::path::StripPrefixError;
 use thiserror::Error;
 
 pub const NO_ACTIVE_CONTEST: &str = "アクティブなコンテストがありません。'work'コマンドで設定してください。";
@@ -27,133 +26,281 @@ impl ErrorContext {
     }
 }
 
+/// 共通のエラー型
 #[derive(Debug, Error)]
-pub enum ConfigError {
-    #[error("設定ファイルが見つかりません\n場所: {path}\nヒント: {}", .hint.as_deref().unwrap_or("'config.yaml'ファイルが正しい場所にあることを確認してください。"))]
-    NotFound { 
+pub enum CphError {
+    #[error("ファイルシステムエラー\n{kind}\n場所: {path}\nヒント: {}", .hint.as_deref().unwrap_or("ファイルシステムの操作を確認してください。"))]
+    FileSystem {
+        kind: FileSystemErrorKind,
         path: String,
         hint: Option<String>,
     },
-    
-    #[error("設定ファイルの解析に失敗しました\n原因: {source}\nヒント: YAMLの構文が正しいことを確認してください。")]
-    Parse {
-        #[from]
-        source: serde_yaml::Error,
-    },
-    
-    #[error("無効な設定値\nフィールド: {field}\n内容: {message}\nヒント: {help}")]
-    InvalidValue { 
-        field: String,
+
+    #[error("Dockerエラー\n{kind}\n内容: {message}\nヒント: {}", .hint.as_deref().unwrap_or("Docker環境を確認してください。"))]
+    Docker {
+        kind: DockerErrorKind,
         message: String,
-        help: String,
+        hint: Option<String>,
     },
-}
 
-#[derive(Debug, Error)]
-pub enum FileSystemError {
-    #[error("ファイルが見つかりません\n場所: {path}\nヒント: {}", .hint.as_deref().unwrap_or("パスが正しいことを確認してください。"))]
-    NotFound { 
-        path: String,
+
+    #[error("コンテストエラー\n{kind}\n内容: {message}\nヒント: {}", .hint.as_deref().unwrap_or("コンテストの設定を確認してください。"))]
+    Contest {
+        kind: ContestErrorKind,
+        message: String,
         hint: Option<String>,
     },
-    
-    #[error("アクセス権限がありません\n場所: {path}\nヒント: {}", .hint.as_deref().unwrap_or("ファイルの権限設定を確認してください。"))]
-    Permission { 
-        path: String,
+
+    #[error("設定エラー\n{kind}\n内容: {message}\nヒント: {}", .hint.as_deref().unwrap_or("設定ファイルを確認してください。"))]
+    Config {
+        kind: ConfigErrorKind,
+        message: String,
         hint: Option<String>,
     },
-    
-    #[error("IOエラー\n操作: {context}\n原因: {source}")]
-    Io {
-        source: io::Error,
-        context: String,
-    },
-    
-    #[error("パスエラー\n原因: {source}\nヒント: パスが有効であることを確認してください。")]
-    Path {
-        #[from]
-        source: StripPrefixError,
-    },
-}
 
-#[derive(Debug, Error)]
-pub enum LanguageError {
-    #[error("サポートされていない言語です\n言語: {lang}\nヒント: サポートされている言語は: cpp, python, rust です。")]
-    Unsupported { 
-        lang: String,
-    },
-    
-    #[error("コンパイラが見つかりません\nコンパイラ: {compiler}\nヒント: {compiler}がインストールされていることを確認してください。")]
-    CompilerNotFound { 
-        compiler: String,
-    },
-    
-    #[error("言語設定エラー\n内容: {message}\nヒント: {help}")]
-    Config { 
+    #[error("{message}\nヒント: {}", .hint.as_deref().unwrap_or("詳細については、ドキュメントを参照してください。"))]
+    Other {
         message: String,
-        help: String,
+        hint: Option<String>,
     },
 }
 
-#[derive(Debug, Error)]
-pub enum DockerError {
-    #[error("Dockerデーモンに接続できません\nヒント: Dockerが起動していることを確認してください。")]
+#[derive(Debug, Clone)]
+pub enum FileSystemErrorKind {
+    NotFound,
+    Permission,
+    Io,
+    Path,
+}
+
+impl std::fmt::Display for FileSystemErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::NotFound => write!(f, "ファイルが見つかりません"),
+            Self::Permission => write!(f, "アクセス権限がありません"),
+            Self::Io => write!(f, "IOエラー"),
+            Self::Path => write!(f, "パスエラー"),
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub enum DockerErrorKind {
     ConnectionFailed,
-    
-    #[error("イメージのビルドに失敗しました\nイメージ: {image}\nコンテキスト: {context}\nヒント: {}", .hint.as_deref().unwrap_or("Dockerfileを確認してください。"))]
-    BuildFailed { 
-        image: String,
-        context: String,
-        hint: Option<String>,
-    },
-    
-    #[error("コンテナの実行に失敗しました\n操作: {context}\n内容: {message}")]
-    ExecutionFailed { 
-        message: String,
-        context: String,
-    },
-    
-    #[error("ファイルシステムエラー: {0}")]
-    Fs(#[from] FileSystemError),
+    BuildFailed,
+    ExecutionFailed,
+    StateFailed,
 }
 
-#[derive(Debug, Error)]
-pub enum ContestError {
-    #[error("設定エラー: {0}")]
-    Config(#[from] ConfigError),
-    
-    #[error("ファイルシステムエラー: {0}")]
-    FileSystem(#[from] FileSystemError),
-    
-    #[error("言語エラー: {0}")]
-    Language(#[from] LanguageError),
-    
-    #[error("サイトエラー\n内容: {message}\nヒント: {}", .hint.as_deref().unwrap_or("サイトの設定を確認してください。"))]
-    Site { 
-        message: String,
-        hint: Option<String>,
-    },
+impl std::fmt::Display for DockerErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::ConnectionFailed => write!(f, "Dockerデーモンに接続できません"),
+            Self::BuildFailed => write!(f, "イメージのビルドに失敗しました"),
+            Self::ExecutionFailed => write!(f, "コンテナの実行に失敗しました"),
+            Self::StateFailed => write!(f, "コンテナの状態管理に失敗しました"),
+        }
+    }
 }
 
-#[derive(Debug, Error)]
-pub enum CphError {
-    #[error("{0}")]
-    Contest(#[from] ContestError),
-    
-    #[error("{0}")]
-    Docker(#[from] DockerError),
-    
-    #[error("{0}")]
-    Config(#[from] ConfigError),
-    
-    #[error("{0}")]
-    Fs(#[from] FileSystemError),
-    
-    #[error("{message}\nヒント: {}", .hint.as_deref().unwrap_or("詳細については、ドキュメントを参照してください。"))]
-    Other { 
-        message: String,
-        hint: Option<String>,
-    },
+#[derive(Debug, Clone)]
+pub enum ContestErrorKind {
+    Site,
+    Language,
+    Compiler,
+    State,
+}
+
+impl std::fmt::Display for ContestErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::Site => write!(f, "サイトエラー"),
+            Self::Language => write!(f, "言語エラー"),
+            Self::Compiler => write!(f, "コンパイラエラー"),
+            Self::State => write!(f, "状態管理エラー"),
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub enum ConfigErrorKind {
+    NotFound,
+    Parse,
+    InvalidValue,
 }
 
-pub type Result<T> = std::result::Result<T, CphError>; 
\ No newline at end of file
+impl std::fmt::Display for ConfigErrorKind {
+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+        match self {
+            Self::NotFound => write!(f, "設定ファイルが見つかりません"),
+            Self::Parse => write!(f, "設定ファイルの解析に失敗しました"),
+            Self::InvalidValue => write!(f, "無効な設定値"),
+        }
+    }
+}
+
+/// エラーにコンテキストを追加するためのトレイト
+pub trait ErrorExt {
+    fn with_context(self, context: impl Into<String>) -> Self;
+    fn with_hint(self, hint: impl Into<String>) -> Self;
+}
+
+impl ErrorExt for CphError {
+    fn with_context(self, context: impl Into<String>) -> Self {
+        match self {
+            CphError::Docker { kind, message: _, hint } => {
+                CphError::Docker {
+                    kind,
+                    message: context.into(),
+                    hint,
+                }
+            }
+            _ => self,
+        }
+    }
+
+    fn with_hint(self, hint: impl Into<String>) -> Self {
+        match self {
+            CphError::FileSystem { kind, path, hint: _ } => {
+                CphError::FileSystem {
+                    kind,
+                    path,
+                    hint: Some(hint.into()),
+                }
+            }
+            CphError::Docker { kind, message, hint: _ } => {
+                CphError::Docker {
+                    kind,
+                    message,
+                    hint: Some(hint.into()),
+                }
+            }
+            CphError::Contest { kind, message, hint: _ } => {
+                CphError::Contest {
+                    kind,
+                    message,
+                    hint: Some(hint.into()),
+                }
+            }
+            CphError::Config { kind, message, hint: _ } => {
+                CphError::Config {
+                    kind,
+                    message,
+                    hint: Some(hint.into()),
+                }
+            }
+            CphError::Other { message, hint: _ } => {
+                CphError::Other {
+                    message,
+                    hint: Some(hint.into()),
+                }
+            }
+        }
+    }
+}
+
+pub type Result<T> = std::result::Result<T, CphError>;
+
+// エラーヘルパー関数
+pub mod helpers {
+    use super::*;
+
+    // FileSystem
+    pub fn fs_not_found(path: impl Into<String>) -> CphError {
+        CphError::FileSystem {
+            kind: FileSystemErrorKind::NotFound,
+            path: path.into(),
+            hint: None,
+        }
+    }
+
+    pub fn fs_permission(path: impl Into<String>) -> CphError {
+        CphError::FileSystem {
+            kind: FileSystemErrorKind::Permission,
+            path: path.into(),
+            hint: None,
+        }
+    }
+
+    pub fn fs_io(path: impl Into<String>, error: io::Error) -> CphError {
+        CphError::FileSystem {
+            kind: FileSystemErrorKind::Io,
+            path: path.into(),
+            hint: Some(error.to_string()),
+        }
+    }
+
+    // Docker
+    pub fn docker_connection() -> CphError {
+        CphError::Docker {
+            kind: DockerErrorKind::ConnectionFailed,
+            message: "Dockerデーモンに接続できません".to_string(),
+            hint: None,
+        }
+    }
+
+    pub fn docker_build(message: impl Into<String>) -> CphError {
+        CphError::Docker {
+            kind: DockerErrorKind::BuildFailed,
+            message: message.into(),
+            hint: None,
+        }
+    }
+
+    pub fn docker_execution(message: impl Into<String>) -> CphError {
+        CphError::Docker {
+            kind: DockerErrorKind::ExecutionFailed,
+            message: message.into(),
+            hint: None,
+        }
+    }
+
+    // Contest
+    pub fn contest_site(message: impl Into<String>) -> CphError {
+        CphError::Contest {
+            kind: ContestErrorKind::Site,
+            message: message.into(),
+            hint: None,
+        }
+    }
+
+    pub fn contest_language(message: impl Into<String>) -> CphError {
+        CphError::Contest {
+            kind: ContestErrorKind::Language,
+            message: message.into(),
+            hint: None,
+        }
+    }
+
+    pub fn contest_compiler(compiler: impl Into<String>) -> CphError {
+        CphError::Contest {
+            kind: ContestErrorKind::Compiler,
+            message: format!("コンパイラが見つかりません: {}", compiler.into()),
+            hint: None,
+        }
+    }
+
+    // Config
+    pub fn config_not_found(path: impl Into<String>) -> CphError {
+        CphError::Config {
+            kind: ConfigErrorKind::NotFound,
+            message: format!("設定ファイルが見つかりません: {}", path.into()),
+            hint: None,
+        }
+    }
+
+    pub fn config_parse(error: impl std::error::Error) -> CphError {
+        CphError::Config {
+            kind: ConfigErrorKind::Parse,
+            message: error.to_string(),
+            hint: None,
+        }
+    }
+
+    pub fn config_invalid(field: impl Into<String>, message: impl Into<String>) -> CphError {
+        CphError::Config {
+            kind: ConfigErrorKind::InvalidValue,
+            message: format!("{}: {}", field.into(), message.into()),
+            hint: None,
+        }
+    }
+} 
\ No newline at end of file
diff --git a/src/fs/error.rs b/src/fs/error.rs
index 1d0e65d..6c71b05 100644
--- a/src/fs/error.rs
+++ b/src/fs/error.rs
@@ -1,29 +1,17 @@
-use crate::error::{CphError, FileSystemError};
+use crate::error::{CphError, helpers};
 
 pub fn not_found_err(path: String) -> CphError {
-    CphError::Fs(FileSystemError::NotFound {
-        path,
-        hint: None,
-    })
+    helpers::fs_not_found(path)
 }
 
 pub fn io_err(error: std::io::Error, context: String) -> CphError {
-    CphError::Fs(FileSystemError::Io {
-        source: error,
-        context,
-    })
+    helpers::fs_io(context, error)
 }
 
 pub fn permission_err(path: String) -> CphError {
-    CphError::Fs(FileSystemError::Permission {
-        path,
-        hint: None,
-    })
+    helpers::fs_permission(path)
 }
 
 pub fn transaction_err(error: std::io::Error, context: String) -> CphError {
-    CphError::Fs(FileSystemError::Io {
-        source: error,
-        context,
-    })
+    helpers::fs_io(context, error)
 } 
\ No newline at end of file
diff --git a/src/test/mod.rs b/src/test/mod.rs
index 1495b29..2d37c7a 100644
--- a/src/test/mod.rs
+++ b/src/test/mod.rs
@@ -1,5 +1,5 @@
 use std::path::PathBuf;
-use crate::error::{CphError, ConfigError, Result};
+use crate::error::{CphError, Result, helpers, ErrorExt};
 
 #[derive(Debug)]
 pub struct TestCase {
@@ -9,19 +9,17 @@ pub struct TestCase {
 
 pub fn load_test_cases(test_dir: &PathBuf) -> Result<Vec<TestCase>> {
     let entries = std::fs::read_dir(test_dir)
-        .map_err(|e| CphError::Config(ConfigError::NotFound {
-            path: format!("テストディレクトリの読み取りに失敗しました: {}", e),
-            hint: None,
-        }))?;
+        .map_err(|e| helpers::config_not_found(
+            format!("テストディレクトリの読み取りに失敗しました: {}", e)
+        ))?;
 
     let mut test_cases = Vec::new();
 
     for entry in entries {
         let entry = entry
-            .map_err(|e| CphError::Config(ConfigError::NotFound {
-                path: format!("テストファイルの読み取りに失敗しました: {}", e),
-                hint: None,
-            }))?;
+            .map_err(|e| helpers::config_not_found(
+                format!("テストファイルの読み取りに失敗しました: {}", e)
+            ))?;
 
         let path = entry.path();
         if !path.is_file() || !path.extension().map_or(false, |ext| ext == "in") {
@@ -30,23 +28,20 @@ pub fn load_test_cases(test_dir: &PathBuf) -> Result<Vec<TestCase>> {
 
         let expected_path = path.with_extension("out");
         if !expected_path.exists() {
-            return Err(CphError::Config(ConfigError::NotFound {
-                path: format!("期待値ファイルが存在しません: {:?}", expected_path),
-                hint: Some("テストケースには.inファイルと対応する.outファイルが必要です。".to_string()),
-            }));
+            return Err(helpers::config_not_found(
+                format!("期待値ファイルが存在しません: {:?}", expected_path)
+            ).with_hint("テストケースには.inファイルと対応する.outファイルが必要です。"));
         }
 
         let input = std::fs::read_to_string(&path)
-            .map_err(|e| CphError::Config(ConfigError::NotFound {
-                path: format!("入力ファイルの読み取りに失敗しました: {}", e),
-                hint: None,
-            }))?;
+            .map_err(|e| helpers::config_not_found(
+                format!("入力ファイルの読み取りに失敗しました: {}", e)
+            ))?;
 
         let expected = std::fs::read_to_string(&expected_path)
-            .map_err(|e| CphError::Config(ConfigError::NotFound {
-                path: format!("期待値ファイルの読み取りに失敗しました: {}", e),
-                hint: None,
-            }))?;
+            .map_err(|e| helpers::config_not_found(
+                format!("期待値ファイルの読み取りに失敗しました: {}", e)
+            ))?;
 
         test_cases.push(TestCase { input, expected });
     }
@@ -55,17 +50,11 @@ pub fn load_test_cases(test_dir: &PathBuf) -> Result<Vec<TestCase>> {
 }
 
 pub fn config_not_found_err(path: String) -> CphError {
-    CphError::Config(ConfigError::NotFound {
-        path,
-        hint: None,
-    })
+    helpers::config_not_found(path)
 }
 
 pub fn config_not_found_err_with_hint(path: String, hint: String) -> CphError {
-    CphError::Config(ConfigError::NotFound {
-        path,
-        hint: Some(hint),
-    })
+    helpers::config_not_found(path).with_hint(hint)
 }
 
 #[cfg(test)]
@@ -73,25 +62,24 @@ mod tests {
     use super::*;
     use std::fs;
     use tempfile::TempDir;
-    use crate::error::{CphError, ConfigError};
 
     #[test]
     fn test_load_test_cases() -> Result<()> {
         let temp_dir = TempDir::new()
-            .map_err(|e| CphError::Config(ConfigError::NotFound {
-                path: format!("一時ディレクトリの作成に失敗しました: {}", e)
-            }))?;
+            .map_err(|e| helpers::config_not_found(
+                format!("一時ディレクトリの作成に失敗しました: {}", e)
+            ))?;
         let test_dir = temp_dir.path().to_path_buf();
 
         // テストケースファイルの作成
         fs::write(test_dir.join("test1.in"), "input1")
-            .map_err(|e| CphError::Config(ConfigError::NotFound {
-                path: format!("テストファイルの作成に失敗しました: {}", e)
-            }))?;
+            .map_err(|e| helpers::config_not_found(
+                format!("テストファイルの作成に失敗しました: {}", e)
+            ))?;
         fs::write(test_dir.join("test1.out"), "output1")
-            .map_err(|e| CphError::Config(ConfigError::NotFound {
-                path: format!("テストファイルの作成に失敗しました: {}", e)
-            }))?;
+            .map_err(|e| helpers::config_not_found(
+                format!("テストファイルの作成に失敗しました: {}", e)
+            ))?;
 
         let test_cases = load_test_cases(&test_dir)?;
         assert_eq!(test_cases.len(), 1);
