diff --git a/src/docker/fs.rs b/src/docker/fs.rs
index 1b538ca..ad03953 100644
--- a/src/docker/fs.rs
+++ b/src/docker/fs.rs
@@ -1,7 +1,7 @@
 use std::path::Path;
 use std::process::Command;
-use crate::error::Result;
-use crate::fs::error::create_io_error;
+use anyhow::Result;
+use crate::error::fs::io_error as create_io_error;
 
 /// コンテナにファイルをコピーします
 pub fn copy_to_container<P: AsRef<Path>>(container_id: &str, source: P, target: P) -> Result<()> {
diff --git a/src/error/fs.rs b/src/error/fs.rs
index 984db0b..6fc377b 100644
--- a/src/error/fs.rs
+++ b/src/error/fs.rs
@@ -1,22 +1,65 @@
 use std::path::Path;
 use anyhow::Error;
 
-pub fn fs_error(message: impl Into<String>) -> Error {
-    Error::msg(message.into())
+/// ファイルが見つからない場合のエラーを作成します
+pub fn not_found_error<P: AsRef<Path>>(path: P) -> Error {
+    Error::msg(format!("ファイルが見つかりません: {}", path.as_ref().display()))
 }
 
+/// I/Oエラーを作成します
 pub fn io_error<P: AsRef<Path>>(error: std::io::Error, path: P) -> Error {
-    Error::new(error)
-}
-
-pub fn not_found_error<P: AsRef<Path>>(path: P) -> Error {
-    Error::msg(format!("ファイルが見つかりません: {}", path.as_ref().display()))
+    Error::new(error).context(format!("I/Oエラー: {}", path.as_ref().display()))
 }
 
+/// アクセス権限エラーを作成します
 pub fn permission_error<P: AsRef<Path>>(path: P) -> Error {
     Error::msg(format!("権限エラー: {}", path.as_ref().display()))
 }
 
+/// パスエラーを作成します
 pub fn invalid_path_error<P: AsRef<Path>>(path: P) -> Error {
     Error::msg(format!("無効なパス: {}", path.as_ref().display()))
+}
+
+/// トランザクションエラーを作成します
+pub fn transaction_error(message: impl Into<String>) -> Error {
+    Error::msg(format!("トランザクションエラー: {}", message.into()))
+}
+
+/// バックアップエラーを作成します
+pub fn backup_error(message: impl Into<String>) -> Error {
+    Error::msg(format!("バックアップエラー: {}", message.into()))
+}
+
+/// 検証エラーを作成します
+pub fn validation_error(message: impl Into<String>) -> Error {
+    Error::msg(format!("バリデーションエラー: {}", message.into()))
+}
+
+/// その他のファイルシステムエラーを作成します
+pub fn fs_error(message: impl Into<String>) -> Error {
+    Error::msg(message.into())
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use std::path::PathBuf;
+
+    #[test]
+    fn test_not_found_error() {
+        let path = PathBuf::from("/test/path");
+        let error = not_found_error(&path);
+        assert!(error.to_string().contains("ファイルが見つかりません"));
+        assert!(error.to_string().contains("/test/path"));
+    }
+
+    #[test]
+    fn test_io_error() {
+        let path = PathBuf::from("/test/path");
+        let io_err = std::io::Error::new(std::io::ErrorKind::Other, "test error");
+        let error = io_error(io_err, &path);
+        assert!(error.to_string().contains("I/Oエラー"));
+        assert!(error.to_string().contains("/test/path"));
+    }
 } 
\ No newline at end of file
diff --git a/src/fs/backup.rs b/src/fs/backup.rs
index 927d141..435e826 100644
--- a/src/fs/backup.rs
+++ b/src/fs/backup.rs
@@ -3,7 +3,7 @@ use std::path::{Path, PathBuf};
 use std::sync::Arc;
 use tempfile::TempDir;
 use anyhow::Result;
-use super::error::helpers::create_io_error;
+use crate::error::fs::io_error as create_io_error;
 
 /// バックアップを管理する構造体
 #[derive(Debug, Clone)]
diff --git a/src/fs/core.rs b/src/fs/core.rs
index c7673ac..2175e83 100644
--- a/src/fs/core.rs
+++ b/src/fs/core.rs
@@ -1,10 +1,11 @@
 use std::path::{Path, PathBuf};
+use std::fs;
 use anyhow::Result;
-use super::error::{
-    create_not_found_error,
-    create_io_error,
-    create_invalid_path_error,
-    create_permission_error,
+use crate::error::fs::{
+    not_found_error as create_not_found_error,
+    io_error as create_io_error,
+    permission_error as create_permission_error,
+    invalid_path_error as create_invalid_path_error
 };
 
 /// ディレクトリの存在を確認し、存在しない場合は作成します
diff --git a/src/fs/error/helpers.rs b/src/fs/error/helpers.rs
deleted file mode 100644
index 55cf3f6..0000000
--- a/src/fs/error/helpers.rs
+++ /dev/null
@@ -1,105 +0,0 @@
-use std::path::Path;
-use anyhow::Error;
-
-/// ファイルが見つからない場合のエラーを作成します
-pub fn create_not_found_error<P: AsRef<Path>>(path: P) -> Error {
-    Error::msg(format!("ファイルが見つかりません: {}", path.as_ref().display()))
-}
-
-/// I/Oエラーを作成します
-pub fn create_io_error<P: AsRef<Path>>(error: std::io::Error, path: P) -> Error {
-    Error::new(error).context(format!("I/Oエラー: {}", path.as_ref().display()))
-}
-
-/// アクセス権限エラーを作成します
-pub fn create_permission_error<P: AsRef<Path>>(path: P) -> Error {
-    Error::msg(format!("権限エラー: {}", path.as_ref().display()))
-}
-
-/// パスエラーを作成します
-pub fn create_invalid_path_error<P: AsRef<Path>>(path: P) -> Error {
-    Error::msg(format!("無効なパス: {}", path.as_ref().display()))
-}
-
-/// トランザクションエラーを作成します
-pub fn create_transaction_error(message: impl Into<String>) -> Error {
-    Error::msg(format!("トランザクションエラー: {}", message.into()))
-}
-
-/// バックアップエラーを作成します
-pub fn create_backup_error(message: impl Into<String>) -> Error {
-    Error::msg(format!("バックアップエラー: {}", message.into()))
-}
-
-/// 検証エラーを作成します
-pub fn create_validation_error(message: impl Into<String>) -> Error {
-    Error::msg(format!("バリデーションエラー: {}", message.into()))
-}
-
-/// その他のファイルシステムエラーを作成します
-pub fn create_other_error(message: impl Into<String>) -> Error {
-    Error::msg(message.into())
-}
-
-#[cfg(test)]
-mod tests {
-    use super::*;
-    use std::path::PathBuf;
-
-    #[test]
-    fn test_create_not_found_error() {
-        let path = PathBuf::from("test.txt");
-        let error = create_not_found_error(&path);
-        assert!(error.to_string().contains("test.txt"));
-        assert!(error.to_string().contains("ファイルが見つかりません"));
-    }
-
-    #[test]
-    fn test_create_io_error() {
-        use std::io::{Error as IoError, ErrorKind};
-        let io_error = IoError::new(ErrorKind::Other, "test error");
-        let error = create_io_error(io_error, "test.txt");
-        assert!(error.to_string().contains("test.txt"));
-        assert!(error.to_string().contains("I/Oエラー"));
-    }
-
-    #[test]
-    fn test_create_permission_error() {
-        let path = PathBuf::from("test.txt");
-        let error = create_permission_error(&path);
-        assert!(error.to_string().contains("test.txt"));
-        assert!(error.to_string().contains("権限エラー"));
-    }
-
-    #[test]
-    fn test_create_invalid_path_error() {
-        let path = PathBuf::from("invalid/path");
-        let error = create_invalid_path_error(&path);
-        assert!(error.to_string().contains("invalid/path"));
-        assert!(error.to_string().contains("無効なパス"));
-    }
-
-    #[test]
-    fn test_create_transaction_error() {
-        let error = create_transaction_error("test error");
-        assert!(error.to_string().contains("トランザクションエラー"));
-    }
-
-    #[test]
-    fn test_create_backup_error() {
-        let error = create_backup_error("test error");
-        assert!(error.to_string().contains("バックアップエラー"));
-    }
-
-    #[test]
-    fn test_create_validation_error() {
-        let error = create_validation_error("test error");
-        assert!(error.to_string().contains("バリデーションエラー"));
-    }
-
-    #[test]
-    fn test_create_other_error() {
-        let error = create_other_error("test error");
-        assert!(error.to_string().contains("test error"));
-    }
-} 
\ No newline at end of file
diff --git a/src/fs/error/mod.rs b/src/fs/error/mod.rs
deleted file mode 100644
index dda7c72d..0000000
--- a/src/fs/error/mod.rs
+++ /dev/null
@@ -1,12 +0,0 @@
-pub use helpers::{
-    create_not_found_error,
-    create_io_error,
-    create_permission_error,
-    create_invalid_path_error,
-    create_transaction_error,
-    create_backup_error,
-    create_validation_error,
-    create_other_error,
-};
-
-pub mod helpers; 
\ No newline at end of file
diff --git a/src/fs/manager.rs b/src/fs/manager.rs
index 5f6b0f9..910de70 100644
--- a/src/fs/manager.rs
+++ b/src/fs/manager.rs
@@ -1,7 +1,11 @@
 use std::path::{Path, PathBuf};
 use std::sync::Arc;
 use anyhow::Result;
-use crate::fs::error::helpers::{create_io_error, create_not_found_error, create_invalid_path_error};
+use crate::error::fs::{
+    io_error as create_io_error,
+    not_found_error as create_not_found_error,
+    invalid_path_error as create_invalid_path_error
+};
 use crate::fs::transaction::{FileTransaction, FileOperation, CreateFileOperation, DeleteFileOperation};
 
 // ファイルマネージャーの状態を表現する型
diff --git a/src/fs/mod.rs b/src/fs/mod.rs
index 94c52a4..734163e 100644
--- a/src/fs/mod.rs
+++ b/src/fs/mod.rs
@@ -1,6 +1,5 @@
 pub mod backup;
 pub mod core;
-pub mod error;
 pub mod manager;
 pub mod transaction;
 
@@ -18,13 +17,13 @@ pub use core::{
     check_permissions,
 };
 
-pub use error::{
-    create_not_found_error,
-    create_io_error,
-    create_permission_error,
-    create_invalid_path_error,
-    create_transaction_error,
-    create_backup_error,
-    create_validation_error,
-    create_other_error,
+pub use crate::error::fs::{
+    not_found_error as create_not_found_error,
+    io_error as create_io_error,
+    permission_error as create_permission_error,
+    invalid_path_error as create_invalid_path_error,
+    transaction_error as create_transaction_error,
+    backup_error as create_backup_error,
+    validation_error as create_validation_error,
+    fs_error as create_other_error,
 }; 
\ No newline at end of file
diff --git a/src/fs/transaction.rs b/src/fs/transaction.rs
index 3f6c915..b262c9b 100644
--- a/src/fs/transaction.rs
+++ b/src/fs/transaction.rs
@@ -1,7 +1,7 @@
-use std::path::PathBuf;
+use std::path::{Path, PathBuf};
 use std::sync::Arc;
 use anyhow::Error;
-use crate::fs::error::helpers::create_io_error;
+use crate::error::fs::io_error as create_io_error;
 
 pub trait FileOperation: Send + Sync + std::fmt::Debug {
     fn execute(&self) -> Result<(), Error>;
