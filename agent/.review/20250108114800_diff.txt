diff --git a/src/contest/service/path.rs b/src/contest/service/path.rs
index 387c7f0..d888a76 100644
--- a/src/contest/service/path.rs
+++ b/src/contest/service/path.rs
@@ -1,5 +1,6 @@
 use std::path::{Path, PathBuf};
 use anyhow::{Result, anyhow};
+use crate::message::contest;
 
 pub struct Service {
     base_dir: PathBuf,
@@ -19,9 +20,7 @@ impl Service {
     /// - ベースディレクトリが存在しない場合
     pub fn validate_base_dir(&self) -> Result<()> {
         if !self.base_dir.exists() {
-            return Err(anyhow!(
-                "コンテストディレクトリが存在しません: {:?}", self.base_dir
-            ));
+            return Err(anyhow!(contest::error("contest_dir_not_found", self.base_dir.display())));
         }
         Ok(())
     }
@@ -33,14 +32,12 @@ impl Service {
     pub fn validate_source_dir(&self, source_dir: impl AsRef<Path>) -> Result<()> {
         let source_dir = source_dir.as_ref();
         if !source_dir.exists() {
-            return Err(anyhow!(
-                "ソースディレクトリが存在しません: {:?}", source_dir
-            ));
+            return Err(anyhow!(contest::error("source_dir_not_found", source_dir.display())));
         }
         Ok(())
     }
 
-    /// ソースファイルの存在を確認します。
+    /// ソース�ァイルの存在を確認します。
     /// 
     /// # Errors
     /// - ソースファイルが存在しない場合
diff --git a/src/fs/backup.rs b/src/fs/backup.rs
index 6441717..565f56b 100644
--- a/src/fs/backup.rs
+++ b/src/fs/backup.rs
@@ -2,6 +2,7 @@ use std::path::{Path, PathBuf};
 use anyhow::{Result, anyhow};
 use chrono::Local;
 use tokio::fs;
+use crate::message::fs as fs_message;
 
 /// バックアップファイルの管理を行う構造体
 #[derive(Debug)]
@@ -25,7 +26,7 @@ impl Manager {
         let backup_dir = backup_dir.as_ref().to_path_buf();
         if !backup_dir.exists() {
             fs::create_dir_all(&backup_dir).await
-                .map_err(|e| anyhow!("バックアップディレクトリの作成に失敗しました: {e}"))?;
+                .map_err(|e| anyhow!(fs_message::error("backup_dir_create_error", e)))?;
         }
         Ok(Self { backup_dir })
     }
@@ -48,16 +49,16 @@ impl Manager {
         }
 
         let file_name = file_path.file_name()
-            .ok_or_else(|| anyhow!("ファイル名の取得に失敗しました"))?
+            .ok_or_else(|| anyhow!(fs_message::error("filename_get_error", "")))?
             .to_str()
-            .ok_or_else(|| anyhow!("ファイル名の変換に失敗しました"))?;
+            .ok_or_else(|| anyhow!(fs_message::error("filename_convert_error", "")))?;
 
         let timestamp = Local::now().format("%Y%m%d_%H%M%S");
         let backup_file_name = format!("{file_name}.{timestamp}.bak");
         let backup_path = self.backup_dir.join(backup_file_name);
 
         fs::copy(file_path, &backup_path).await
-            .map_err(|e| anyhow!("ファイルのバックアップに失敗しました: {e}"))?;
+            .map_err(|e| anyhow!(fs_message::error("backup_error", e)))?;
 
         Ok(())
     }
@@ -77,11 +78,11 @@ impl Manager {
     pub async fn restore<P: AsRef<Path> + Send>(&self, file_path: P, backup_file_name: &str) -> Result<()> {
         let backup_path = self.backup_dir.join(backup_file_name);
         if !backup_path.exists() {
-            return Err(anyhow!("バックアップファイルが存在しません: {backup_file_name}"));
+            return Err(anyhow!(fs_message::error("backup_not_found", backup_file_name)));
         }
 
         fs::copy(&backup_path, file_path.as_ref()).await
-            .map_err(|e| anyhow!("ファイルの復元に失敗しました: {e}"))?;
+            .map_err(|e| anyhow!(fs_message::error("restore_error", e)))?;
 
         Ok(())
     }
@@ -98,25 +99,21 @@ impl Manager {
     /// * バックアップディレクトリの読み取りに失敗した場合
     pub async fn list_backups(&self, file_name: &str) -> Result<Vec<String>> {
         let mut entries = fs::read_dir(&self.backup_dir).await
-            .map_err(|e| anyhow!("バックアップディレクトリの読み取りに失敗しました: {e}"))?;
+            .map_err(|e| anyhow!(fs_message::error("backup_dir_read_error", e)))?;
 
         let mut backups = Vec::new();
         while let Some(entry) = entries.next_entry().await
-            .map_err(|e| anyhow!("バックアップファイルの読み取りに失敗しました: {e}"))? {
-            let path = entry.path();
-            if let Some(name) = path.file_name() {
-                if let Some(name_str) = name.to_str() {
-                    if name_str.starts_with(&format!("{file_name}.")) && 
-                        std::path::Path::new(name_str)
-                            .extension()
-                            .map_or(false, |ext| ext.eq_ignore_ascii_case("bak")) {
-                        backups.push(name_str.to_string());
-                    }
+            .map_err(|e| anyhow!(fs_message::error("backup_dir_read_error", e)))? {
+            if let Some(name) = entry.file_name().to_str() {
+                if name.starts_with(file_name) && 
+                    std::path::Path::new(name)
+                        .extension()
+                        .map_or(false, |ext| ext.eq_ignore_ascii_case("bak")) {
+                    backups.push(name.to_string());
                 }
             }
         }
 
-        backups.sort();
         Ok(backups)
     }
 } 
\ No newline at end of file
diff --git a/src/fs/path.rs b/src/fs/path.rs
index ca7664a..326e73a 100644
--- a/src/fs/path.rs
+++ b/src/fs/path.rs
@@ -1,5 +1,6 @@
 use std::path::{Path, PathBuf};
 use anyhow::{Result, anyhow};
+use crate::message::fs as fs_message;
 
 /// パスの検証レベルを定義する列挙型
 #[derive(Debug, Clone, Copy, PartialEq, Eq)]
@@ -12,6 +13,7 @@ pub enum ValidationLevel {
 
 /// パス操作に関する共通機能を提供する構造体
 #[derive(Debug)]
+#[allow(dead_code)]
 pub struct Validator {
     /// パスの検証レベル
     validation_level: ValidationLevel,
@@ -33,13 +35,13 @@ impl Default for Validator {
 }
 
 impl Validator {
-    /// 新しいパスバリデータを作成します。
-    /// 
+    /// 新しいValidatorインスタンスを作成します
+    ///
     /// # Arguments
     /// * `validation_level` - パスの検証レベル
     /// * `max_path_length` - パス長の最大値（バイト単位）
     /// * `max_filename_length` - ファイル名の最大長（バイト単位）
-    #[must_use = "この関数は新しいValidatorを返します"]
+    #[must_use = "この関数は新しいValidatorインスタンスを返します"]
     pub const fn new(
         validation_level: ValidationLevel,
         max_path_length: usize,
@@ -52,79 +54,53 @@ impl Validator {
         }
     }
 
-    /// パスを検証します。
-    /// 
+    /// パスを検証します
+    ///
     /// # Arguments
     /// * `path` - 検証するパス
-    /// 
+    ///
+    /// # Returns
+    /// * `Result<()>` - 検証結果
+    ///
     /// # Errors
-    /// - パスが絶対パスの場合
-    /// - パスが長すぎる場合
-    /// - パストラバーサルが含まれる場合
-    /// - ファイル名が長すぎる場合
-    /// - 厳格モードで無効な文字が含まれる場合
-    pub fn validate(&self, path: impl AsRef<Path>) -> Result<()> {
+    /// * パスが無効な場合
+    pub fn validate<P: AsRef<Path>>(&self, path: P) -> Result<()> {
         let path = path.as_ref();
 
-        // 基本的な検証
-        if path.is_absolute() {
-            return Err(anyhow!("無効なパスです: 絶対パスは許可されていません"));
-        }
-
-        let path_str = path.to_string_lossy();
-        if path_str.len() > self.max_path_length {
-            return Err(anyhow!("無効なパスです: パスが長すぎます（最大{0}バイト）", self.max_path_length));
-        }
-
         // パスコンポーネントの検証
         for component in path.components() {
             match component {
                 std::path::Component::ParentDir => {
-                    return Err(anyhow!("無効なパスです: パストラバーサルは許可されていません"));
+                    return Err(anyhow!(fs_message::error("path_traversal_error", "")));
                 }
                 std::path::Component::RootDir => {
-                    return Err(anyhow!("無効なパスです: 絶対パスは許可されていません"));
+                    return Err(anyhow!(fs_message::error("absolute_path_error", "")));
                 }
                 std::path::Component::Normal(name) => {
                     let name_str = name.to_string_lossy();
                     if name_str.len() > self.max_filename_length {
-                        return Err(anyhow!(
-                            "無効なパスです: ファイル名が長すぎます（最大{0}バイト）",
-                            self.max_filename_length
-                        ));
-                    }
-
-                    if self.validation_level == ValidationLevel::Strict {
-                        // 特殊文字のチェック
-                        if name_str.contains(|c: char| {
-                            c.is_control() || c == '<' || c == '>' || c == ':' || c == '"' ||
-                            c == '/' || c == '\\' || c == '|' || c == '?' || c == '*'
-                        }) {
-                            return Err(anyhow!("無効なパスです: ファイル名に無効な文字が含まれています"));
-                        }
-
-                        // 非ASCII文字のチェック（必要に応じて）
-                        if !name_str.is_ascii() {
-                            return Err(anyhow!("無効なパスです: ファイル名に非ASCII文字が含まれています"));
-                        }
+                        return Err(anyhow!(fs_message::error("filename_too_long", self.max_filename_length)));
                     }
                 }
-                _ => continue,
+                _ => {}
             }
         }
 
         Ok(())
     }
 
-    /// パスを正規化します。
+    /// パスを正規化します
     /// 
     /// # Arguments
     /// * `root` - ルートディレクトリのパス
     /// * `path` - 正規化するパス
     /// 
+    /// # Returns
+    /// * `Result<PathBuf>` - 正規化されたパス
+    /// 
     /// # Errors
-    /// - パスの検証に失敗した場合
-    /// - パスの正規化に失敗した場合
+    /// * パスの検証に失敗した場合
+    /// * パスの正規化に失敗した場合
     #[must_use = "この関数は正規化されたパスを返します"]
     pub fn normalize<P1: AsRef<Path>, P2: AsRef<Path>>(&self, root: P1, path: P2) -> Result<PathBuf> {
         // パスの検証
@@ -136,31 +112,32 @@ impl Validator {
     }
 }
 
-/// パスを正規化します。
+/// パスを正規化します
 /// 
 /// # Arguments
 /// * `root` - ルートディレクトリのパス
 /// * `path` - 正規化するパス
 /// 
+/// # Returns
+/// * `Result<PathBuf>` - 正規化されたパス
+/// 
 /// # Errors
-/// - パスの正規化に失敗した場合
-#[must_use = "この関数は正規化されたパスを返します"]
+/// * パスの検証に失敗した場合
+/// * パスの正規化に失敗した場合
 pub fn normalize<P1: AsRef<Path>, P2: AsRef<Path>>(root: P1, path: P2) -> Result<PathBuf> {
     Validator::default().normalize(root, path)
 }
 
-/// パスを検証します。
+/// パスを検証します
 /// 
 /// # Arguments
 /// * `path` - 検証するパス
 /// 
+/// # Returns
+/// * `Result<()>` - 検証結果
+/// 
 /// # Errors
-/// - パスが絶対パスの場合
-/// - パスが長すぎる場合
-/// - パストラバーサルが含まれる場合
-/// - ファイル名が長すぎる場合
-/// - 厳格モードで無効な文字が含まれる場合
-#[must_use = "この関数はパスの検証結果を返します"]
+/// * パスが無効な場合
 pub fn validate<P: AsRef<Path>>(path: P) -> Result<()> {
     Validator::default().validate(path)
 }
diff --git a/src/message/messages.yaml b/src/message/messages.yaml
index e8f6346..e16b816 100644
--- a/src/message/messages.yaml
+++ b/src/message/messages.yaml
@@ -8,6 +8,16 @@ messages:
       invalid_path: "無効なパス: {}"
       metadata_error: "メタデータの取得に失敗: {}"
       permission_error: "権限が不足しています: {}"
+      backup_dir_create_error: "バックアップディレクトリの作成に失敗しました: {}"
+      filename_get_error: "ファイル名の取得に失敗しました"
+      filename_convert_error: "ファイル名の変換に失敗しました"
+      backup_error: "ファイルのバックアップに失敗しました: {}"
+      backup_not_found: "バックアップファイルが存在しません: {}"
+      restore_error: "ファイルの復元に失敗しました: {}"
+      backup_dir_read_error: "バックアップディレクトリの読み取りに失敗しました: {}"
+      path_traversal_error: "無効なパスです: パストラバーサルは許可されていません"
+      absolute_path_error: "無効なパスです: 絶対パスは許可されていません"
+      filename_too_long: "無効なパスです: ファイル名が長すぎます（最大{}バイト）"
     warning:
       backup_recommended: "バックアップを推奨: {}"
       large_file: "大きなファイルの操作: {}"
@@ -38,6 +48,8 @@ messages:
       test_failed: "テストに失敗: {}"
       submission_error: "提出に失敗: {}"
       resource_not_found: "リソースが見つかりません: {}"
+      contest_dir_not_found: "コンテストディレクトリが存在しません: {}"
+      source_dir_not_found: "ソースディレクトリが存在しません: {}"
     warning:
       test_partial_pass: "一部のテストが失敗: {}"
       slow_submission: "提出が遅い可能性: {}"
