diff --git a/src/contest/model/state.rs b/src/contest/model/state.rs
index fb5dfa2..19ccbf6 100644
--- a/src/contest/model/state.rs
+++ b/src/contest/model/state.rs
@@ -1,6 +1,6 @@
 use std::path::PathBuf;
 use serde::{Serialize, Deserialize};
-use crate::contest::error::{ContestResult, ContestError};
+use crate::contest::error::{ContestError};
 
 /// コンテストの状態を表す構造体
 #[derive(Debug, Default, Clone, Serialize, Deserialize)]
diff --git a/src/contest/service/contest.rs b/src/contest/service/contest.rs
index b411056..6f7381d 100644
--- a/src/contest/service/contest.rs
+++ b/src/contest/service/contest.rs
@@ -1,16 +1,18 @@
 use std::sync::Arc;
 use tokio::sync::Mutex;
-use crate::contest::error::{ContestResult, ContestError};
+use crate::config::Config;
+use crate::contest::error::{ContestError, ContestResult};
 use crate::docker::traits::DockerOperations;
-use crate::docker::config::ContainerConfig;
 
 pub struct ContestService {
-    docker_operations: Arc<Mutex<dyn DockerOperations>>,
+    config: Config,
+    docker_operations: Arc<Mutex<Box<dyn DockerOperations>>>,
 }
 
 impl ContestService {
-    pub fn new(docker_operations: Arc<Mutex<dyn DockerOperations>>) -> Self {
+    pub fn new(config: Config, docker_operations: Arc<Mutex<Box<dyn DockerOperations>>>) -> Self {
         Self {
+            config,
             docker_operations,
         }
     }
@@ -20,21 +22,8 @@ impl ContestService {
         self.run_tests().await
     }
 
-    async fn compile_source(&self, source_code: &str) -> ContestResult<()> {
-        let mut ops = self.docker_operations.lock().await;
-        let config = ContainerConfig::new(
-            "rust:latest".to_string(),
-            512,
-            "/workspace".to_string(),
-            "/tmp".to_string(),
-        );
-
-        ops.initialize(config).await
-            .map_err(|e| ContestError::Docker(e.to_string()))?;
-        
-        ops.start().await
-            .map_err(|e| ContestError::Docker(e.to_string()))?;
-
+    async fn compile_source(&self, _source_code: &str) -> ContestResult<()> {
+        // TODO: コンパイル処理の実装
         Ok(())
     }
 
diff --git a/src/contest/service/test.rs b/src/contest/service/test.rs
index 8aceb9a..80be328 100644
--- a/src/contest/service/test.rs
+++ b/src/contest/service/test.rs
@@ -1,7 +1,7 @@
 use std::path::PathBuf;
 use crate::config::Config;
-use crate::contest::error::{ContestError, ContestResult};
-use crate::test::{TestCase, TestRunner};
+use crate::contest::error::{ContestResult, ContestError};
+use crate::test::TestCase;
 
 pub struct TestService {
     config: Config,
@@ -12,30 +12,27 @@ impl TestService {
         Self { config }
     }
 
-    pub async fn run_test(&self, problem_id: &str) -> ContestResult<Vec<bool>> {
+    pub async fn run_tests(&self, problem_id: &str) -> ContestResult<()> {
         let test_dir = self.get_test_dir(problem_id)?;
-        
         if !test_dir.exists() {
-            std::fs::create_dir_all(&test_dir)
-                .map_err(|e| ContestError::IO(e))?;
+            return Err(ContestError::Config(
+                format!("テストディレクトリが存在しません: {:?}", test_dir)
+            ));
         }
 
-        let mut results = Vec::new();
         let entries = std::fs::read_dir(&test_dir)
             .map_err(|e| ContestError::IO(e))?;
 
         for entry in entries {
             let entry = entry.map_err(|e| ContestError::IO(e))?;
             let path = entry.path();
-
             if path.is_file() && path.extension().map_or(false, |ext| ext == "in") {
-                let test_case = self.load_test_case(&path)?;
-                // TODO: 実際のテスト実行を実装
-                results.push(true);
+                let _test_case = self.load_test_case(&path)?;
+                // TODO: テストケースの実行処理を実装
             }
         }
 
-        Ok(results)
+        Ok(())
     }
 
     fn get_test_dir(&self, problem_id: &str) -> ContestResult<PathBuf> {
diff --git a/src/docker/fs.rs b/src/docker/fs.rs
index 7088696..f63a66e 100644
--- a/src/docker/fs.rs
+++ b/src/docker/fs.rs
@@ -65,11 +65,14 @@ mod tests {
         // ソースファイルの書き込み
         let file_path = manager.write_source_file(&temp_dir, "test.txt", "test content")?;
         assert!(file_path.exists());
-        assert_eq!(fs::read_to_string(&file_path).unwrap(), "test content");
+        let content = fs::read_to_string(&file_path)
+            .map_err(|e| DockerError::Filesystem(e.to_string()))?;
+        assert_eq!(content, "test content");
 
         // 権限設定
         manager.set_permissions(&temp_dir, 0o777)?;
-        let metadata = fs::metadata(&temp_dir).unwrap();
+        let metadata = fs::metadata(&temp_dir)
+            .map_err(|e| DockerError::Filesystem(e.to_string()))?;
         assert_eq!(metadata.permissions().mode() & 0o777, 0o777);
 
         // クリーンアップ
diff --git a/src/oj/mod.rs b/src/oj/mod.rs
index df9d271..570e718 100644
--- a/src/oj/mod.rs
+++ b/src/oj/mod.rs
@@ -27,12 +27,14 @@ pub fn open_in_cursor(url: &str, source_path: Option<&PathBuf>) -> Result<()> {
         println!("{}", format!("Note: To automatically open URLs, please set the $BROWSER environment variable.").yellow());
     }
     
-    if let Err(e) = Command::new("code").arg(source_path.unwrap().display().to_string()).output() {
-        println!("Note: Failed to open in VSCode: {}", e);
-    }
+    if let Some(path) = source_path {
+        if let Err(e) = Command::new("code").arg(path.display().to_string()).output() {
+            println!("Note: Failed to open in VSCode: {}", e);
+        }
 
-    if let Err(e) = Command::new("cursor").arg(source_path.unwrap().display().to_string()).output() {
-        println!("Note: Failed to open in Cursor: {}", e);
+        if let Err(e) = Command::new("cursor").arg(path.display().to_string()).output() {
+            println!("Note: Failed to open in Cursor: {}", e);
+        }
     }
 
     Ok(())
@@ -266,8 +268,7 @@ impl OJContainer {
     }
 }
 
-#[allow(dead_code)]
-fn has_test_cases(dir: &PathBuf) -> Result<bool> {
+pub fn has_test_cases(dir: &PathBuf) -> Result<bool> {
     if !dir.exists() {
         return Ok(false);
     }
diff --git a/src/test/mod.rs b/src/test/mod.rs
index 3c3c2d8..918c203 100644
--- a/src/test/mod.rs
+++ b/src/test/mod.rs
@@ -1,5 +1,4 @@
-use std::path::{Path, PathBuf};
-use crate::config::Config;
+use std::path::PathBuf;
 use crate::contest::error::{ContestError, ContestResult};
 
 pub struct TestCase {
