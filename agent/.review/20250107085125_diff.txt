diff --git a/src/fs/transaction.rs b/src/fs/transaction.rs
index c1967ea..e0c5f4a 100644
--- a/src/fs/transaction.rs
+++ b/src/fs/transaction.rs
@@ -1,6 +1,5 @@
 use std::path::PathBuf;
 use std::sync::Arc;
-use std::time::SystemTime;
 use crate::error::Error;
 use crate::fs::error::helpers::create_io_error;
 
@@ -12,16 +11,11 @@ pub trait FileOperation: Send + Sync + std::fmt::Debug {
 }
 
 #[derive(Debug, Clone)]
-pub struct TransactionHistory {
-    timestamp: SystemTime,
-    transition: TransactionTransition,
-    result: TransactionResult,
-}
-
-#[derive(Debug, Clone)]
-pub enum TransactionResult {
-    Success,
-    Failure(String),
+pub enum TransactionState {
+    Pending,
+    Executed,
+    RolledBack,
+    Failed(Arc<Error>),
 }
 
 #[derive(Debug, Clone)]
@@ -31,19 +25,10 @@ pub enum TransactionTransition {
     Rollback,
 }
 
-#[derive(Debug, Clone)]
-pub enum TransactionState {
-    Pending,
-    Executed,
-    RolledBack,
-    Failed(Arc<Error>),
-}
-
 #[derive(Debug, Clone)]
 pub struct FileTransaction {
     operations: Arc<Vec<Arc<dyn FileOperation>>>,
     state: TransactionState,
-    history: Arc<Vec<TransactionHistory>>,
 }
 
 impl FileTransaction {
@@ -51,21 +36,6 @@ impl FileTransaction {
         Self {
             operations: Arc::new(Vec::new()),
             state: TransactionState::Pending,
-            history: Arc::new(Vec::new()),
-        }
-    }
-
-    fn with_transition_record(&self, transition: TransactionTransition, result: TransactionResult) -> Self {
-        let mut history = (*self.history).clone();
-        history.push(TransactionHistory {
-            timestamp: SystemTime::now(),
-            transition,
-            result,
-        });
-        Self {
-            operations: self.operations.clone(),
-            state: self.state.clone(),
-            history: Arc::new(history),
         }
     }
 
@@ -73,7 +43,6 @@ impl FileTransaction {
         Self {
             operations: Arc::new(operations),
             state: self.state.clone(),
-            history: self.history.clone(),
         }
     }
 
@@ -81,7 +50,6 @@ impl FileTransaction {
         Self {
             operations: self.operations.clone(),
             state,
-            history: self.history.clone(),
         }
     }
 
@@ -89,49 +57,37 @@ impl FileTransaction {
         match (self.state.clone(), transition.clone()) {
             (TransactionState::Pending, TransactionTransition::AddOperation(op)) => {
                 if let Err(e) = op.validate() {
-                    return Ok(self.with_transition_record(
-                        transition,
-                        TransactionResult::Failure(format!("操作の検証に失敗: {}", e))
+                    return Err(create_io_error(
+                        std::io::Error::new(
+                            std::io::ErrorKind::InvalidInput,
+                            format!("操作の検証に失敗: {}", e)
+                        ),
+                        "操作の検証に失敗"
                     ));
                 }
 
                 let mut operations = (*self.operations).clone();
                 operations.push(op);
-                Ok(self.with_transition_record(
-                    transition,
-                    TransactionResult::Success
-                ).with_operations(operations))
+                Ok(self.with_operations(operations))
             },
             (TransactionState::Pending, TransactionTransition::Execute) => {
                 let operations = self.operations.clone();
                 for operation in operations.iter() {
                     if let Err(e) = operation.execute() {
-                        let failed_state = self.with_transition_record(
-                            transition.clone(),
-                            TransactionResult::Failure(format!("実行に失敗: {}", e))
-                        ).with_state(TransactionState::Failed(Arc::new(e)));
+                        let failed_state = self.with_state(TransactionState::Failed(Arc::new(e)));
                         return Ok(failed_state.apply_transition(TransactionTransition::Rollback)?);
                     }
                 }
-                Ok(self.with_transition_record(
-                    transition,
-                    TransactionResult::Success
-                ).with_state(TransactionState::Executed))
+                Ok(self.with_state(TransactionState::Executed))
             },
             (TransactionState::Executed | TransactionState::Pending, TransactionTransition::Rollback) => {
                 let operations = self.operations.clone();
                 for operation in operations.iter().rev() {
                     if let Err(e) = operation.rollback() {
-                        return Ok(self.with_transition_record(
-                            transition,
-                            TransactionResult::Failure(format!("ロールバックに失敗: {}", e))
-                        ).with_state(TransactionState::Failed(Arc::new(e))));
+                        return Ok(self.with_state(TransactionState::Failed(Arc::new(e))));
                     }
                 }
-                Ok(self.with_transition_record(
-                    transition,
-                    TransactionResult::Success
-                ).with_state(TransactionState::RolledBack))
+                Ok(self.with_state(TransactionState::RolledBack))
             },
             (state, transition) => {
                 let error = create_io_error(
@@ -141,10 +97,7 @@ impl FileTransaction {
                     ),
                     "トランザクション状態遷移エラー"
                 );
-                Ok(self.with_transition_record(
-                    transition,
-                    TransactionResult::Failure(error.to_string())
-                ).with_state(TransactionState::Failed(Arc::new(error))))
+                Ok(self.with_state(TransactionState::Failed(Arc::new(error))))
             }
         }
     }
@@ -170,22 +123,15 @@ impl FileTransaction {
         &self.operations
     }
 
-    pub fn history(&self) -> &[TransactionHistory] {
-        &self.history
-    }
-
     // トランザクションの合成メソッド
     pub fn combine(self, other: Self) -> Result<Self, Error> {
         match (self.state.clone(), other.state) {
             (TransactionState::Pending, TransactionState::Pending) => {
                 let mut operations = (*self.operations).clone();
                 operations.extend((*other.operations).clone());
-                let mut history = (*self.history).clone();
-                history.extend((*other.history).clone());
                 Ok(Self {
                     operations: Arc::new(operations),
                     state: TransactionState::Pending,
-                    history: Arc::new(history),
                 })
             },
             _ => {
@@ -196,10 +142,7 @@ impl FileTransaction {
                     ),
                     "トランザクション合成エラー"
                 );
-                Ok(self.with_transition_record(
-                    TransactionTransition::Execute,
-                    TransactionResult::Failure(error.to_string())
-                ).with_state(TransactionState::Failed(Arc::new(error))))
+                Ok(self.with_state(TransactionState::Failed(Arc::new(error))))
             }
         }
     }
