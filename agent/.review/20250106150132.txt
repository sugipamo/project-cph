レビュー結果:
1. エラー処理の改善
   - エラーメッセージの日本語化
   - エラーコンテキストの追加
   - エラーソースの追加
   - より詳細なエラー情報の提供

2. 重要な機能の削除: なし

3. コンパイルエラー: なし

4. 機能の重複: なし

5. 実装の効率性: 問題なし

結論: エラーメッセージの可読性と有用性を向上させる改善であり、マージに問題ありません。

diff --git a/src/contest/error.rs b/src/contest/error.rs
index 29ed0e4..c6d589b 100644
--- a/src/contest/error.rs
+++ b/src/contest/error.rs
@@ -1,26 +1,37 @@
 use crate::error::{CphError, helpers, ErrorExt};
 
 pub fn site_err(msg: String) -> CphError {
-    helpers::contest_site(msg)
+    helpers::contest_site(
+        "サイトアクセス",
+        "Contest Site",
+        Box::new(std::io::Error::new(std::io::ErrorKind::Other, msg))
+    )
 }
 
 pub fn site_err_with_hint(msg: String, hint: String) -> CphError {
-    helpers::contest_site(msg)
-        .with_hint(hint)
+    helpers::contest_site(
+        "サイトアクセス",
+        "Contest Site",
+        Box::new(std::io::Error::new(std::io::ErrorKind::Other, msg))
+    ).with_hint(hint)
 }
 
 pub fn language_err(msg: String) -> CphError {
-    helpers::contest_language(msg)
+    helpers::contest_language("言語設定", msg)
 }
 
 pub fn config_err(msg: String) -> CphError {
-    helpers::config_invalid("contest", msg)
+    helpers::config_invalid("コンテスト設定", "contest", msg)
 }
 
 pub fn unsupported_language_err(lang: String) -> CphError {
-    helpers::contest_language(format!("サポートされていない言語です: {}", lang))
+    let lang_clone = lang.clone();
+    helpers::contest_language("言語チェック", lang)
+        .with_hint(format!("サポートされていない言語です: {}", lang_clone))
 }
 
 pub fn compiler_not_found_err(compiler: String) -> CphError {
-    helpers::contest_compiler(compiler)
+    let compiler_clone = compiler.clone();
+    helpers::contest_compiler("コンパイラチェック", compiler)
+        .with_hint(format!("コンパイラが見つかりません: {}", compiler_clone))
 }
diff --git a/src/docker/error.rs b/src/docker/error.rs
index 636defa..e6b33b5 100644
--- a/src/docker/error.rs
+++ b/src/docker/error.rs
@@ -1,34 +1,41 @@
 use crate::error::{CphError, helpers, ErrorExt};
 
 pub fn docker_err(msg: String) -> CphError {
-    helpers::docker_execution(msg)
+    helpers::docker_execution("Docker操作", "Docker", Box::new(std::io::Error::new(std::io::ErrorKind::Other, msg)))
 }
 
 pub fn container_err(msg: String) -> CphError {
-    helpers::docker_execution(msg)
+    helpers::docker_execution("コンテナ操作", "Container", Box::new(std::io::Error::new(std::io::ErrorKind::Other, msg)))
 }
 
 pub fn compilation_err(msg: String) -> CphError {
-    helpers::docker_execution(msg)
+    helpers::docker_execution("コンパイル", "Compiler", Box::new(std::io::Error::new(std::io::ErrorKind::Other, msg)))
 }
 
 pub fn command_err(msg: String) -> CphError {
-    helpers::docker_execution(msg)
+    helpers::docker_execution("コマンド実行", "Command", Box::new(std::io::Error::new(std::io::ErrorKind::Other, msg)))
 }
 
 pub fn state_err(msg: String) -> CphError {
-    helpers::docker_execution(msg)
+    helpers::docker_execution("状態管理", "State", Box::new(std::io::Error::new(std::io::ErrorKind::Other, msg)))
 }
 
 pub fn build_err(image: String, context: String) -> CphError {
-    helpers::docker_build(format!("イメージ: {}, コンテキスト: {}", image, context))
+    helpers::docker_build(
+        "イメージビルド",
+        &image,
+        Box::new(std::io::Error::new(std::io::ErrorKind::Other, format!("コンテキスト: {}", context)))
+    )
 }
 
 pub fn build_err_with_hint(image: String, context: String, hint: String) -> CphError {
-    helpers::docker_build(format!("イメージ: {}, コンテキスト: {}", image, context))
-        .with_hint(hint)
+    helpers::docker_build(
+        "イメージビルド",
+        &image,
+        Box::new(std::io::Error::new(std::io::ErrorKind::Other, format!("コンテキスト: {}", context)))
+    ).with_hint(hint)
 }
 
 pub fn connection_err() -> CphError {
-    helpers::docker_connection()
+    helpers::docker_connection("Docker接続")
 } 
\ No newline at end of file
diff --git a/src/error.rs b/src/error.rs
index 32da0bc..70a0cae 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -1,4 +1,5 @@
 use std::io;
+use std::sync::Arc;
 use thiserror::Error;
 
 pub const NO_ACTIVE_CONTEST: &str = "アクティブなコンテストがありません。'work'コマンドで設定してください。";
@@ -9,6 +10,7 @@ pub struct ErrorContext {
     pub operation: String,
     pub location: String,
     pub hint: Option<String>,
+    pub source: Option<Arc<dyn std::error::Error + Send + Sync>>,
 }
 
 impl ErrorContext {
@@ -17,6 +19,7 @@ impl ErrorContext {
             operation: operation.into(),
             location: location.into(),
             hint: None,
+            source: None,
         }
     }
 
@@ -24,43 +27,57 @@ impl ErrorContext {
         self.hint = Some(hint.into());
         self
     }
+
+    pub fn with_source(mut self, source: impl std::error::Error + Send + Sync + 'static) -> Self {
+        self.source = Some(Arc::new(source));
+        self
+    }
 }
 
 /// 共通のエラー型
 #[derive(Debug, Error)]
 pub enum CphError {
-    #[error("ファイルシステムエラー\n{kind}\n場所: {path}\nヒント: {}", .hint.as_deref().unwrap_or("ファイルシステムの操作を確認してください。"))]
+    #[error("ファイルシステムエラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
+        context.operation, context.location, 
+        context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
+        context.hint.as_deref().unwrap_or("ファイルシステムの操作を確認してください。"))]
     FileSystem {
+        context: ErrorContext,
         kind: FileSystemErrorKind,
-        path: String,
-        hint: Option<String>,
     },
 
-    #[error("Dockerエラー\n{kind}\n内容: {message}\nヒント: {}", .hint.as_deref().unwrap_or("Docker環境を確認してください。"))]
+    #[error("Dockerエラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
+        context.operation, context.location,
+        context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
+        context.hint.as_deref().unwrap_or("Docker環境を確認してください。"))]
     Docker {
+        context: ErrorContext,
         kind: DockerErrorKind,
-        message: String,
-        hint: Option<String>,
     },
 
-    #[error("コンテストエラー\n{kind}\n内容: {message}\nヒント: {}", .hint.as_deref().unwrap_or("コンテストの設定を確認してください。"))]
+    #[error("コンテストエラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
+        context.operation, context.location,
+        context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
+        context.hint.as_deref().unwrap_or("コンテストの設定を確認してください。"))]
     Contest {
+        context: ErrorContext,
         kind: ContestErrorKind,
-        message: String,
-        hint: Option<String>,
     },
 
-    #[error("設定エラー\n{kind}\n内容: {message}\nヒント: {}", .hint.as_deref().unwrap_or("設定ファイルを確認してください。"))]
+    #[error("設定エラー\n操作: {}\n場所: {}\nエラー: {}\nヒント: {}", 
+        context.operation, context.location,
+        context.source.as_ref().map_or("不明".to_string(), |e| e.to_string()),
+        context.hint.as_deref().unwrap_or("設定ファイルを確認してください。"))]
     Config {
+        context: ErrorContext,
         kind: ConfigErrorKind,
-        message: String,
-        hint: Option<String>,
     },
 
-    #[error("{message}\nヒント: {}", .hint.as_deref().unwrap_or("詳細については、ドキュメントを参照してください。"))]
+    #[error("{}\nヒント: {}", 
+        context.operation,
+        context.hint.as_deref().unwrap_or("詳細については、ドキュメントを参照してください。"))]
     Other {
-        message: String,
-        hint: Option<String>,
+        context: ErrorContext,
     },
 }
 
@@ -140,58 +157,85 @@ impl std::fmt::Display for ConfigErrorKind {
 
 /// エラーにコンテキストを追加するためのトレイト
 pub trait ErrorExt {
-    fn with_context(self, context: impl Into<String>) -> Self;
+    fn with_context(self, context: ErrorContext) -> Self;
     fn with_hint(self, hint: impl Into<String>) -> Self;
+    fn with_source(self, source: impl std::error::Error + Send + Sync + 'static) -> Self;
 }
 
 impl ErrorExt for CphError {
-    fn with_context(self, context: impl Into<String>) -> Self {
+    fn with_context(self, context: ErrorContext) -> Self {
         match self {
-            CphError::Docker { kind, message: _, hint } => {
+            CphError::FileSystem { kind, .. } => CphError::FileSystem { context, kind },
+            CphError::Docker { kind, .. } => CphError::Docker { context, kind },
+            CphError::Contest { kind, .. } => CphError::Contest { context, kind },
+            CphError::Config { kind, .. } => CphError::Config { context, kind },
+            CphError::Other { .. } => CphError::Other { context },
+        }
+    }
+
+    fn with_hint(self, hint: impl Into<String>) -> Self {
+        match self {
+            CphError::FileSystem { context, kind } => {
+                CphError::FileSystem {
+                    context: context.with_hint(hint),
+                    kind,
+                }
+            }
+            CphError::Docker { context, kind } => {
                 CphError::Docker {
+                    context: context.with_hint(hint),
                     kind,
-                    message: context.into(),
-                    hint,
                 }
             }
-            _ => self,
+            CphError::Contest { context, kind } => {
+                CphError::Contest {
+                    context: context.with_hint(hint),
+                    kind,
+                }
+            }
+            CphError::Config { context, kind } => {
+                CphError::Config {
+                    context: context.with_hint(hint),
+                    kind,
+                }
+            }
+            CphError::Other { context } => {
+                CphError::Other {
+                    context: context.with_hint(hint),
+                }
+            }
         }
     }
 
-    fn with_hint(self, hint: impl Into<String>) -> Self {
+    fn with_source(self, source: impl std::error::Error + Send + Sync + 'static) -> Self {
         match self {
-            CphError::FileSystem { kind, path, hint: _ } => {
+            CphError::FileSystem { context, kind } => {
                 CphError::FileSystem {
+                    context: context.with_source(source),
                     kind,
-                    path,
-                    hint: Some(hint.into()),
                 }
             }
-            CphError::Docker { kind, message, hint: _ } => {
+            CphError::Docker { context, kind } => {
                 CphError::Docker {
+                    context: context.with_source(source),
                     kind,
-                    message,
-                    hint: Some(hint.into()),
                 }
             }
-            CphError::Contest { kind, message, hint: _ } => {
+            CphError::Contest { context, kind } => {
                 CphError::Contest {
+                    context: context.with_source(source),
                     kind,
-                    message,
-                    hint: Some(hint.into()),
                 }
             }
-            CphError::Config { kind, message, hint: _ } => {
+            CphError::Config { context, kind } => {
                 CphError::Config {
+                    context: context.with_source(source),
                     kind,
-                    message,
-                    hint: Some(hint.into()),
                 }
             }
-            CphError::Other { message, hint: _ } => {
+            CphError::Other { context } => {
                 CphError::Other {
-                    message,
-                    hint: Some(hint.into()),
+                    context: context.with_source(source),
                 }
             }
         }
@@ -205,102 +249,90 @@ pub mod helpers {
     use super::*;
 
     // FileSystem
-    pub fn fs_not_found(path: impl Into<String>) -> CphError {
+    pub fn fs_not_found(operation: impl Into<String>, path: impl Into<String>) -> CphError {
         CphError::FileSystem {
+            context: ErrorContext::new(operation, path),
             kind: FileSystemErrorKind::NotFound,
-            path: path.into(),
-            hint: None,
         }
     }
 
-    pub fn fs_permission(path: impl Into<String>) -> CphError {
+    pub fn fs_permission(operation: impl Into<String>, path: impl Into<String>) -> CphError {
         CphError::FileSystem {
+            context: ErrorContext::new(operation, path),
             kind: FileSystemErrorKind::Permission,
-            path: path.into(),
-            hint: None,
         }
     }
 
-    pub fn fs_io(path: impl Into<String>, error: io::Error) -> CphError {
+    pub fn fs_io(operation: impl Into<String>, path: impl Into<String>, error: io::Error) -> CphError {
         CphError::FileSystem {
+            context: ErrorContext::new(operation, path).with_source(error),
             kind: FileSystemErrorKind::Io,
-            path: path.into(),
-            hint: Some(error.to_string()),
         }
     }
 
     // Docker
-    pub fn docker_connection() -> CphError {
+    pub fn docker_connection(operation: impl Into<String>) -> CphError {
         CphError::Docker {
+            context: ErrorContext::new(operation, "Docker daemon"),
             kind: DockerErrorKind::ConnectionFailed,
-            message: "Dockerデーモンに接続できません".to_string(),
-            hint: None,
         }
     }
 
-    pub fn docker_build(message: impl Into<String>) -> CphError {
+    pub fn docker_build(operation: impl Into<String>, image: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
         CphError::Docker {
+            context: ErrorContext::new(operation, image).with_source(error),
             kind: DockerErrorKind::BuildFailed,
-            message: message.into(),
-            hint: None,
         }
     }
 
-    pub fn docker_execution(message: impl Into<String>) -> CphError {
+    pub fn docker_execution(operation: impl Into<String>, container: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
         CphError::Docker {
+            context: ErrorContext::new(operation, container).with_source(error),
             kind: DockerErrorKind::ExecutionFailed,
-            message: message.into(),
-            hint: None,
         }
     }
 
     // Contest
-    pub fn contest_site(message: impl Into<String>) -> CphError {
+    pub fn contest_site(operation: impl Into<String>, site: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
         CphError::Contest {
+            context: ErrorContext::new(operation, site).with_source(error),
             kind: ContestErrorKind::Site,
-            message: message.into(),
-            hint: None,
         }
     }
 
-    pub fn contest_language(message: impl Into<String>) -> CphError {
+    pub fn contest_language(operation: impl Into<String>, lang: impl Into<String>) -> CphError {
         CphError::Contest {
+            context: ErrorContext::new(operation, lang),
             kind: ContestErrorKind::Language,
-            message: message.into(),
-            hint: None,
         }
     }
 
-    pub fn contest_compiler(compiler: impl Into<String>) -> CphError {
+    pub fn contest_compiler(operation: impl Into<String>, compiler: impl Into<String>) -> CphError {
         CphError::Contest {
+            context: ErrorContext::new(operation, compiler),
             kind: ContestErrorKind::Compiler,
-            message: format!("コンパイラが見つかりません: {}", compiler.into()),
-            hint: None,
         }
     }
 
     // Config
-    pub fn config_not_found(path: impl Into<String>) -> CphError {
+    pub fn config_not_found(operation: impl Into<String>, path: impl Into<String>) -> CphError {
         CphError::Config {
+            context: ErrorContext::new(operation, path),
             kind: ConfigErrorKind::NotFound,
-            message: format!("設定ファイルが見つかりません: {}", path.into()),
-            hint: None,
         }
     }
 
-    pub fn config_parse(error: impl std::error::Error) -> CphError {
+    pub fn config_parse(operation: impl Into<String>, path: impl Into<String>, error: impl std::error::Error + Send + Sync + 'static) -> CphError {
         CphError::Config {
+            context: ErrorContext::new(operation, path).with_source(error),
             kind: ConfigErrorKind::Parse,
-            message: error.to_string(),
-            hint: None,
         }
     }
 
-    pub fn config_invalid(field: impl Into<String>, message: impl Into<String>) -> CphError {
+    pub fn config_invalid(operation: impl Into<String>, field: impl Into<String>, message: impl Into<String>) -> CphError {
         CphError::Config {
+            context: ErrorContext::new(operation, field).with_hint(message),
             kind: ConfigErrorKind::InvalidValue,
-            message: format!("{}: {}", field.into(), message.into()),
-            hint: None,
         }
     }
 } 
\ No newline at end of file
diff --git a/src/fs/error.rs b/src/fs/error.rs
index 6c71b05..9898bdd 100644
--- a/src/fs/error.rs
+++ b/src/fs/error.rs
@@ -1,17 +1,17 @@
 use crate::error::{CphError, helpers};
 
 pub fn not_found_err(path: String) -> CphError {
-    helpers::fs_not_found(path)
+    helpers::fs_not_found("ファイル検索", path)
 }
 
 pub fn io_err(error: std::io::Error, context: String) -> CphError {
-    helpers::fs_io(context, error)
+    helpers::fs_io("ファイル操作", context, error)
 }
 
 pub fn permission_err(path: String) -> CphError {
-    helpers::fs_permission(path)
+    helpers::fs_permission("ファイルアクセス", path)
 }
 
 pub fn transaction_err(error: std::io::Error, context: String) -> CphError {
-    helpers::fs_io(context, error)
+    helpers::fs_io("トランザクション処理", context, error)
 } 
\ No newline at end of file
diff --git a/src/test/mod.rs b/src/test/mod.rs
index 2d37c7a..a22ffe1 100644
--- a/src/test/mod.rs
+++ b/src/test/mod.rs
@@ -1,91 +1,64 @@
-use std::path::PathBuf;
-use crate::error::{CphError, Result, helpers, ErrorExt};
+use crate::error::{helpers, CphError, ErrorExt};
 
-#[derive(Debug)]
+#[derive(Debug, Clone)]
 pub struct TestCase {
     pub input: String,
     pub expected: String,
+    pub path: String,
 }
 
-pub fn load_test_cases(test_dir: &PathBuf) -> Result<Vec<TestCase>> {
+pub fn read_test_cases(test_dir: &str) -> Result<Vec<TestCase>, CphError> {
     let entries = std::fs::read_dir(test_dir)
         .map_err(|e| helpers::config_not_found(
-            format!("テストディレクトリの読み取りに失敗しました: {}", e)
+            "テストディレクトリの読み取り",
+            format!("ディレクトリ: {}, エラー: {}", test_dir, e)
         ))?;
 
     let mut test_cases = Vec::new();
-
     for entry in entries {
         let entry = entry
             .map_err(|e| helpers::config_not_found(
-                format!("テストファイルの読み取りに失敗しました: {}", e)
+                "テストファイルの読み取り",
+                format!("エラー: {}", e)
             ))?;
 
         let path = entry.path();
-        if !path.is_file() || !path.extension().map_or(false, |ext| ext == "in") {
-            continue;
-        }
-
-        let expected_path = path.with_extension("out");
-        if !expected_path.exists() {
-            return Err(helpers::config_not_found(
-                format!("期待値ファイルが存在しません: {:?}", expected_path)
-            ).with_hint("テストケースには.inファイルと対応する.outファイルが必要です。"));
+        if path.extension().map_or(false, |ext| ext == "in") {
+            let expected_path = path.with_extension("out");
+            if !expected_path.exists() {
+                return Err(helpers::config_not_found(
+                    "期待値ファイルの確認",
+                    format!("ファイル: {:?}", expected_path)
+                ).with_hint("テストケースには.inファイルと対応する.outファイルが必要です。"));
+            }
+
+            let input = std::fs::read_to_string(&path)
+                .map_err(|e| helpers::config_not_found(
+                    "入力ファイルの読み取り",
+                    format!("ファイル: {:?}, エラー: {}", path, e)
+                ))?;
+
+            let expected = std::fs::read_to_string(&expected_path)
+                .map_err(|e| helpers::config_not_found(
+                    "期待値ファイルの読み取り",
+                    format!("ファイル: {:?}, エラー: {}", expected_path, e)
+                ))?;
+
+            test_cases.push(TestCase {
+                input,
+                expected,
+                path: path.to_string_lossy().into_owned(),
+            });
         }
-
-        let input = std::fs::read_to_string(&path)
-            .map_err(|e| helpers::config_not_found(
-                format!("入力ファイルの読み取りに失敗しました: {}", e)
-            ))?;
-
-        let expected = std::fs::read_to_string(&expected_path)
-            .map_err(|e| helpers::config_not_found(
-                format!("期待値ファイルの読み取りに失敗しました: {}", e)
-            ))?;
-
-        test_cases.push(TestCase { input, expected });
     }
 
     Ok(test_cases)
 }
 
-pub fn config_not_found_err(path: String) -> CphError {
-    helpers::config_not_found(path)
-}
-
-pub fn config_not_found_err_with_hint(path: String, hint: String) -> CphError {
-    helpers::config_not_found(path).with_hint(hint)
+pub fn not_found_err(path: String) -> CphError {
+    helpers::config_not_found("ファイル検索", path)
 }
 
-#[cfg(test)]
-mod tests {
-    use super::*;
-    use std::fs;
-    use tempfile::TempDir;
-
-    #[test]
-    fn test_load_test_cases() -> Result<()> {
-        let temp_dir = TempDir::new()
-            .map_err(|e| helpers::config_not_found(
-                format!("一時ディレクトリの作成に失敗しました: {}", e)
-            ))?;
-        let test_dir = temp_dir.path().to_path_buf();
-
-        // テストケースファイルの作成
-        fs::write(test_dir.join("test1.in"), "input1")
-            .map_err(|e| helpers::config_not_found(
-                format!("テストファイルの作成に失敗しました: {}", e)
-            ))?;
-        fs::write(test_dir.join("test1.out"), "output1")
-            .map_err(|e| helpers::config_not_found(
-                format!("テストファイルの作成に失敗しました: {}", e)
-            ))?;
-
-        let test_cases = load_test_cases(&test_dir)?;
-        assert_eq!(test_cases.len(), 1);
-        assert_eq!(test_cases[0].input, "input1");
-        assert_eq!(test_cases[0].expected, "output1");
-
-        Ok(())
-    }
+pub fn not_found_err_with_hint(path: String, hint: String) -> CphError {
+    helpers::config_not_found("ファイル検索", path).with_hint(hint)
 } 
\ No newline at end of file
