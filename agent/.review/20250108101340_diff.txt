diff --git a/src/error/mod.rs b/src/error/mod.rs
deleted file mode 100644
index 8f034a5..0000000
--- a/src/error/mod.rs
+++ /dev/null
@@ -1,56 +0,0 @@
-pub use anyhow::{Error, Result, Context as _};
-
-// マクロのみを残す
-#[macro_export]
-macro_rules! define_error_type {
-    ($name:ident, $($variant:ident => $message:expr),* $(,)?) => {
-        #[derive(Debug, thiserror::Error)]
-        pub enum $name {
-            $(
-                #[error($message)]
-                $variant,
-            )*
-        }
-    };
-}
-
-// 基本的なエラーマクロ
-#[macro_export]
-macro_rules! fs_err {
-    ($msg:expr) => {
-        anyhow::Error::msg($msg).context("ファイルシステムエラー")
-    };
-    ($fmt:expr, $($arg:tt)*) => {
-        anyhow::Error::msg(format!($fmt, $($arg)*)).context("ファイルシステムエラー")
-    };
-}
-
-#[macro_export]
-macro_rules! docker_err {
-    ($msg:expr) => {
-        anyhow::Error::msg($msg).context("Dockerエラー")
-    };
-    ($fmt:expr, $($arg:tt)*) => {
-        anyhow::Error::msg(format!($fmt, $($arg)*)).context("Dockerエラー")
-    };
-}
-
-#[macro_export]
-macro_rules! config_err {
-    ($msg:expr) => {
-        anyhow::Error::msg($msg).context("設定エラー")
-    };
-    ($fmt:expr, $($arg:tt)*) => {
-        anyhow::Error::msg(format!($fmt, $($arg)*)).context("設定エラー")
-    };
-}
-
-#[macro_export]
-macro_rules! contest_err {
-    ($msg:expr) => {
-        anyhow::Error::msg($msg).context("コンテストエラー")
-    };
-    ($fmt:expr, $($arg:tt)*) => {
-        anyhow::Error::msg(format!($fmt, $($arg)*)).context("コンテストエラー")
-    };
-} 
\ No newline at end of file
diff --git a/src/fs/operations/delete.rs b/src/fs/operations/delete.rs
index c90aecc..e000d55 100644
--- a/src/fs/operations/delete.rs
+++ b/src/fs/operations/delete.rs
@@ -1,5 +1,6 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
+use super::validate::{validate_is_file, validate_is_dir};
 
 /// ファイルを削除します。
 /// 
@@ -12,12 +13,7 @@ use anyhow::{Result, anyhow};
 /// - ファイルの削除に失敗した場合
 pub fn remove_file(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
-    if !path.exists() {
-        return Err(anyhow!("パスが存在しません: {}", path.display()));
-    }
-    if !path.is_file() {
-        return Err(anyhow!("パスがファイルではありません: {}", path.display()));
-    }
+    validate_is_file(path)?;
     std::fs::remove_file(path)
         .map_err(|e| anyhow!("ファイルの削除に失敗しました: {}", e))
 }
@@ -33,12 +29,7 @@ pub fn remove_file(path: impl AsRef<Path>) -> Result<()> {
 /// - ディレクトリの削除に失敗した場合
 pub fn remove_dir(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
-    if !path.exists() {
-        return Err(anyhow!("パスが存在しません: {}", path.display()));
-    }
-    if !path.is_dir() {
-        return Err(anyhow!("パスがディレクトリではありません: {}", path.display()));
-    }
+    validate_is_dir(path)?;
     std::fs::remove_dir_all(path)
         .map_err(|e| anyhow!("ディレクトリの削除に失敗しました: {}", e))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/mod.rs b/src/fs/operations/mod.rs
index d4850a9..342d9e7 100644
--- a/src/fs/operations/mod.rs
+++ b/src/fs/operations/mod.rs
@@ -2,6 +2,7 @@ pub mod check;
 pub mod delete;
 pub mod read;
 pub mod write;
+mod validate;
 
 pub use check::*;
 pub use delete::*;
@@ -12,5 +13,4 @@ pub use write::*;
 pub use std::path::PathBuf;
 pub use std::fs::{Metadata as FileMetadata, Permissions as FilePermissions};
 
-pub use anyhow::Result;
-pub use crate::fs_err; 
\ No newline at end of file
+pub use anyhow::{Result, Context}; 
\ No newline at end of file
diff --git a/src/fs/operations/read.rs b/src/fs/operations/read.rs
index 27e47b9..8a160f4 100644
--- a/src/fs/operations/read.rs
+++ b/src/fs/operations/read.rs
@@ -1,5 +1,6 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
+use super::validate::validate_is_file;
 
 /// ファイルの内容を文字列として読み込みます。
 /// 
@@ -14,12 +15,7 @@ use anyhow::{Result, anyhow};
 #[must_use = "この関数はファイルの内容を返します"]
 pub fn load_file_as_string(path: impl AsRef<Path>) -> Result<String> {
     let path = path.as_ref();
-    if !path.exists() {
-        return Err(anyhow!("パスが存在しません: {}", path.display()));
-    }
-    if !path.is_file() {
-        return Err(anyhow!("パスがファイルではありません: {}", path.display()));
-    }
+    validate_is_file(path)?;
     std::fs::read_to_string(path)
         .map_err(|e| anyhow!("ファイルの読み込みに失敗しました: {}", e))
 }
@@ -36,12 +32,7 @@ pub fn load_file_as_string(path: impl AsRef<Path>) -> Result<String> {
 #[must_use = "この関数はファイルの内容をバイト列として返します"]
 pub fn load_file_as_bytes(path: impl AsRef<Path>) -> Result<Vec<u8>> {
     let path = path.as_ref();
-    if !path.exists() {
-        return Err(anyhow!("パスが存在しません: {}", path.display()));
-    }
-    if !path.is_file() {
-        return Err(anyhow!("パスがファイルではありません: {}", path.display()));
-    }
+    validate_is_file(path)?;
     std::fs::read(path)
         .map_err(|e| anyhow!("ファイルの読み込みに失敗しました: {}", e))
 }
@@ -57,9 +48,7 @@ pub fn load_file_as_bytes(path: impl AsRef<Path>) -> Result<Vec<u8>> {
 #[must_use = "この関数はファイルのメタデータを返します"]
 pub fn get_metadata(path: impl AsRef<Path>) -> Result<std::fs::Metadata> {
     let path = path.as_ref();
-    if !path.exists() {
-        return Err(anyhow!("パスが存在しません: {}", path.display()));
-    }
+    validate_is_file(path)?;
     path.metadata()
         .map_err(|e| anyhow!("メタデータの取得に失敗しました: {}", e))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/write.rs b/src/fs/operations/write.rs
index befaede..0b9e886 100644
--- a/src/fs/operations/write.rs
+++ b/src/fs/operations/write.rs
@@ -1,5 +1,6 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
+use super::validate::validate_parent_exists;
 
 /// ディレクトリが存在することを確認し、存在しない場合は作成します。
 /// 
@@ -28,9 +29,7 @@ pub fn ensure_directory(path: impl AsRef<Path>) -> Result<()> {
 pub fn ensure_file(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
     if !path.exists() {
-        if let Some(parent) = path.parent() {
-            ensure_directory(parent)?;
-        }
+        validate_parent_exists(path)?;
         std::fs::File::create(path)
             .map_err(|e| anyhow!("ファイルの作成に失敗しました: {}", e))?;
     }
@@ -45,13 +44,12 @@ pub fn ensure_file(path: impl AsRef<Path>) -> Result<()> {
 /// 
 /// # Errors
 /// - ファイルの作成に失敗した場合
-/// - ファイルへの書き込みに失敗した場合
-/// - パスの親ディレクトリの作成に失敗した場合
+/// - ファイルの書き込みに失敗した場合
 pub fn save_to_file(path: impl AsRef<Path>, content: impl AsRef<[u8]>) -> Result<()> {
     let path = path.as_ref();
     if let Some(parent) = path.parent() {
         ensure_directory(parent)?;
     }
     std::fs::write(path, content)
-        .map_err(|e| anyhow!("ファイルへの書き込みに失敗しました: {}", e))
+        .map_err(|e| anyhow!("ファイルの書き込みに失敗しました: {}", e))
 } 
\ No newline at end of file
diff --git a/src/lib.rs b/src/lib.rs
index 7c110e9..e567ba7 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,9 +1,8 @@
 pub mod config;
 pub mod contest;
 pub mod docker;
-pub mod error;
 pub mod fs;
 
 pub use contest::{Command, Contest, Handler, TestCase, TestRunner};
 pub use docker::Runtime;
-pub use error::{Error, Result};
+pub use anyhow::{Error, Result};
