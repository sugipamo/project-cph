diff --git a/src/contest/service/command.rs b/src/contest/service/command.rs
index af2d947..b992c93 100644
--- a/src/contest/service/command.rs
+++ b/src/contest/service/command.rs
@@ -1,6 +1,7 @@
 use crate::contest::model::{Command, CommandContext, Contest};
 use crate::contest::service::{ContestHandler, TestRunner};
 use anyhow::Result;
+use crate::message::contest;
 
 pub struct Service {
     contest_service: ContestHandler,
@@ -34,7 +35,7 @@ impl Service {
             }
             Command::Test { test_number } => {
                 context.contest.map_or_else(
-                    || Err(anyhow::anyhow!("コンテストが選択されていません")),
+                    || Err(anyhow::anyhow!(contest::error("invalid_command", "コンテストが選択されていません"))),
                     |contest| {
                         println!("テストを実行します: test_number={test_number:?}");
                         self.test_service.run_test(&contest, test_number)
@@ -43,7 +44,7 @@ impl Service {
             }
             Command::Submit => {
                 context.contest.map_or_else(
-                    || Err(anyhow::anyhow!("コンテストが選択されていません")),
+                    || Err(anyhow::anyhow!(contest::error("invalid_command", "コンテストが選択されていません"))),
                     |contest| {
                         println!("提出を行います");
                         self.contest_service.submit(&contest)
diff --git a/src/contest/service/contest.rs b/src/contest/service/contest.rs
index 0287bd2..7cbed56 100644
--- a/src/contest/service/contest.rs
+++ b/src/contest/service/contest.rs
@@ -2,6 +2,7 @@ use anyhow::{Result, anyhow};
 use crate::config::Config;
 use crate::contest::model::{Contest, TestCase};
 use crate::fs::manager::Manager;
+use crate::message::contest;
 
 #[derive(Clone)]
 pub struct Service {
@@ -93,7 +94,7 @@ impl Service {
     /// Returns an error if site is not set
     pub fn validate_site(&self) -> Result<()> {
         self.site.as_ref()
-            .ok_or_else(|| anyhow!("サイトが指定されていません"))
+            .ok_or_else(|| anyhow!(contest::error("resource_not_found", "サイトが指定されていません")))
             .map(|_| ())
     }
 
@@ -104,7 +105,7 @@ impl Service {
     /// Returns an error if language is not set
     pub fn validate_language(&self) -> Result<()> {
         self.language.as_ref()
-            .ok_or_else(|| anyhow!("言語が指定されていません"))
+            .ok_or_else(|| anyhow!(contest::error("resource_not_found", "言語が指定されていません")))
             .map(|_| ())
     }
 
@@ -115,7 +116,7 @@ impl Service {
     /// Returns an error if `contest_id` is not set
     pub fn validate_contest_id(&self) -> Result<()> {
         self.contest_id.as_ref()
-            .ok_or_else(|| anyhow!("コンテストIDが指定されていません"))
+            .ok_or_else(|| anyhow!(contest::error("resource_not_found", "コンテストIDが指定されていません")))
             .map(|_| ())
     }
 
@@ -126,7 +127,7 @@ impl Service {
     /// Returns an error if `problem_id` is not set
     pub fn validate_problem_id(&self) -> Result<()> {
         self.problem_id.as_ref()
-            .ok_or_else(|| anyhow!("問題IDが指定されていません"))
+            .ok_or_else(|| anyhow!(contest::error("resource_not_found", "問題IDが指定されていません")))
             .map(|_| ())
     }
 
@@ -137,7 +138,7 @@ impl Service {
     /// Returns an error if url is not set
     pub fn validate_url(&self) -> Result<()> {
         self.url.as_ref()
-            .ok_or_else(|| anyhow!("URLが指定されていません"))
+            .ok_or_else(|| anyhow!(contest::error("resource_not_found", "URLが指定されていません")))
             .map(|_| ())
     }
 
@@ -148,7 +149,7 @@ impl Service {
     /// Returns an error if `file_manager` is not set
     pub fn validate_file_manager(&self) -> Result<()> {
         self.file_manager.as_ref()
-            .ok_or_else(|| anyhow!("FileManagerが設定されていません"))
+            .ok_or_else(|| anyhow!(contest::error("resource_not_found", "FileManagerが設定されていません")))
             .map(|_| ())
     }
 
@@ -233,12 +234,12 @@ impl Service {
     pub fn build(self) -> Result<(Contest, Manager)> {
         self.validate_all()?;
         
-        let site = self.site.ok_or_else(|| anyhow!("サイトが設定されていません"))?;
-        let contest_id = self.contest_id.ok_or_else(|| anyhow!("コンテストIDが設定されていません"))?;
-        let problem_id = self.problem_id.ok_or_else(|| anyhow!("問題IDが設定されていません"))?;
-        let language = self.language.ok_or_else(|| anyhow!("言語が設定されていません"))?;
-        let url = self.url.ok_or_else(|| anyhow!("URLが設定されていません"))?;
-        let file_manager = self.file_manager.ok_or_else(|| anyhow!("FileManagerが設定されていません"))?;
+        let site = self.site.ok_or_else(|| anyhow!(contest::error("resource_not_found", "サイトが設定されていません")))?;
+        let contest_id = self.contest_id.ok_or_else(|| anyhow!(contest::error("resource_not_found", "コンテストIDが設定されていません")))?;
+        let problem_id = self.problem_id.ok_or_else(|| anyhow!(contest::error("resource_not_found", "問題IDが設定されていません")))?;
+        let language = self.language.ok_or_else(|| anyhow!(contest::error("resource_not_found", "言語が設定されていません")))?;
+        let url = self.url.ok_or_else(|| anyhow!(contest::error("resource_not_found", "URLが設定されていません")))?;
+        let file_manager = self.file_manager.ok_or_else(|| anyhow!(contest::error("resource_not_found", "FileManagerが設定されていません")))?;
 
         let contest = Contest::new(
             site,
@@ -248,44 +249,6 @@ impl Service {
             url,
         );
 
-        let file_manager = contest.create_workspace(file_manager)?;
-
-        Ok((contest, file_manager))
-    }
-
-    /// テストケースを保存します
-    ///
-    /// # Arguments
-    /// * `contest` - コンテスト情報
-    /// * `file_manager` - ファイル管理インスタンス
-    /// * `test_cases` - 保存するテストケース
-    ///
-    /// # Returns
-    /// * `Result<Manager>` - 更新されたファイル管理インスタンス
-    ///
-    /// # Errors
-    /// * テストケースの保存に失敗した場合
-    fn save_test_cases(contest: &Contest, file_manager: Manager, test_cases: &[TestCase]) -> Result<Manager> {
-        test_cases.iter().enumerate().try_fold(file_manager, |manager, (index, test_case)| {
-            contest.save_test_case(manager, test_case, index)
-        })
-    }
-
-    /// コンテストのセットアップを行います
-    ///
-    /// # Arguments
-    /// * `template` - テンプレートファイル
-    /// * `test_cases` - テストケース
-    ///
-    /// # Returns
-    /// * `Result<(Contest, Manager)>` - セットアップされたコンテストとファイル管理インスタンス
-    ///
-    /// # Errors
-    /// * セットアップに失敗した場合
-    pub fn setup_contest(self, template: &str, test_cases: &[TestCase]) -> Result<(Contest, Manager)> {
-        let (contest, file_manager) = self.build()?;
-        let file_manager = contest.save_template(file_manager, template)?;
-        let file_manager = Self::save_test_cases(&contest, file_manager, test_cases)?;
         Ok((contest, file_manager))
     }
 
@@ -300,9 +263,10 @@ impl Service {
     /// - サイトが無効な場合
     /// - コンテストIDが無効な場合
     /// - 問題IDが無効な場合
-    pub fn open(&self, _site: &str, _contest_id: &Option<String>, _problem_id: &Option<String>) -> Result<()> {
+    pub fn open(&self, site: &str, contest_id: &Option<String>, problem_id: &Option<String>) -> Result<()> {
         // TODO: 実装
-        unimplemented!()
+        println!("問題を開きます: site={site}, contest={contest_id:?}, problem={problem_id:?}");
+        Ok(())
     }
 
     /// Submits a solution for the contest
@@ -311,7 +275,7 @@ impl Service {
     /// 
     /// Currently this function cannot fail, but returns Result for consistency
     pub fn submit(&self, contest: &Contest) -> Result<()> {
-        println!("提出を行います: contest={contest:?}");
+        println!("{}", contest::hint("optimize_code", format!("提出を行います: contest={contest:?}")));
         Ok(())
     }
 } 
\ No newline at end of file
diff --git a/src/contest/service/test.rs b/src/contest/service/test.rs
index 9bcad5e..81f58c0 100644
--- a/src/contest/service/test.rs
+++ b/src/contest/service/test.rs
@@ -1,6 +1,7 @@
 use anyhow::Result;
 use crate::config::Config;
 use crate::contest::model::Contest;
+use crate::message::contest;
 
 pub struct Service {
     #[allow(dead_code)]
@@ -26,8 +27,8 @@ impl Service {
     pub fn run_test(&self, _contest: &Contest, test_number: Option<usize>) -> Result<()> {
         // TODO: 実際のテスト実行処理を実装
         match test_number {
-            Some(n) => println!("テストケース {n} を実行します"),
-            None => println!("全てのテストケースを実行します"),
+            Some(n) => println!("{}", contest::hint("optimize_code", format!("テストケース {n} を実行します"))),
+            None => println!("{}", contest::hint("optimize_code", "全てのテストケースを実行します")),
         }
         Ok(())
     }
diff --git a/src/contest/service/url.rs b/src/contest/service/url.rs
index 3c249fc..e4a568f 100644
--- a/src/contest/service/url.rs
+++ b/src/contest/service/url.rs
@@ -1,4 +1,5 @@
 use anyhow::{Result, anyhow};
+use crate::message::contest;
 
 pub struct Service {
     site: Option<String>,
@@ -28,7 +29,7 @@ impl Service {
     /// - サイトが指定されていない場合
     pub fn validate_site(&self) -> Result<()> {
         if self.site.is_none() {
-            return Err(anyhow!("サイトが指定されていません"));
+            return Err(anyhow!(contest::error("resource_not_found", "サイトが指定されていません")));
         }
         Ok(())
     }
@@ -39,7 +40,7 @@ impl Service {
     /// - コンテストIDが指定されていない場合
     pub fn validate_contest_id(&self) -> Result<()> {
         if self.contest_id.is_none() {
-            return Err(anyhow!("コンテストIDが指定されていません"));
+            return Err(anyhow!(contest::error("resource_not_found", "コンテストIDが指定されていません")));
         }
         Ok(())
     }
@@ -50,7 +51,7 @@ impl Service {
     /// - 問題IDが指定されていない場合
     pub fn validate_problem_id(&self) -> Result<()> {
         if self.problem_id.is_none() {
-            return Err(anyhow!("問題IDが指定されていません"));
+            return Err(anyhow!(contest::error("resource_not_found", "問題IDが指定されていません")));
         }
         Ok(())
     }
@@ -77,7 +78,7 @@ impl Service {
             "atcoder" => Ok(format!(
                 "https://atcoder.jp/contests/{contest_id}"
             )),
-            _ => Err(anyhow!("未対応のサイトです: {site}")),
+            _ => Err(anyhow!(contest::error("invalid_url", format!("未対応のサイトです: {site}")))),
         }
     }
 
@@ -92,7 +93,7 @@ impl Service {
     /// # Panics
     /// 
     /// - `内部状態が不整合な場合（validate_site()が成功したのにsiteがNoneの場合など）`
-    #[must_use = "この関数は�題のURLを返します"]
+    #[must_use = "この関数は問題のURLを返します"]
     pub fn get_problem_url(&self) -> Result<String> {
         self.validate_site()?;
         self.validate_contest_id()?;
@@ -106,7 +107,7 @@ impl Service {
             "atcoder" => Ok(format!(
                 "https://atcoder.jp/contests/{contest_id}/tasks/{problem_id}"
             )),
-            _ => Err(anyhow!("未対応のサイトです: {site}")),
+            _ => Err(anyhow!(contest::error("invalid_url", format!("未対応のサイトです: {site}")))),
         }
     }
 
diff --git a/src/docker/execution/command.rs b/src/docker/execution/command.rs
index ae8a67e..01ede43 100644
--- a/src/docker/execution/command.rs
+++ b/src/docker/execution/command.rs
@@ -1,6 +1,7 @@
 use std::process::Command;
 use std::borrow::Cow;
 use anyhow::{Result, anyhow};
+use crate::message::docker;
 
 /// Dockerコマンドの実行を担当する構造体
 ///
@@ -83,14 +84,14 @@ impl Executor {
 
         let output = command
             .output()
-            .map_err(|e| anyhow!("コマンド実行エラー: {}", e))?;
+            .map_err(|e| anyhow!(docker::error("command_failed", e)))?;
 
         if !output.status.success() {
             let error = String::from_utf8_lossy(&output.stderr);
-            return Err(anyhow!("コマンド実行エラー: コマンドの実行に失敗: {}", error));
+            return Err(anyhow!(docker::error("command_failed", error)));
         }
 
         String::from_utf8(output.stdout)
-            .map_err(|e| anyhow!("コマンド実行エラー: {}", e))
+            .map_err(|e| anyhow!(docker::error("command_failed", e)))
     }
 } 
\ No newline at end of file
diff --git a/src/docker/execution/compilation.rs b/src/docker/execution/compilation.rs
index b171e55..1ff4c72 100644
--- a/src/docker/execution/compilation.rs
+++ b/src/docker/execution/compilation.rs
@@ -1,5 +1,6 @@
 use std::process::Command;
 use anyhow::{Result, anyhow};
+use crate::message::docker;
 
 /// コンパイル処理を管理する構造体
 ///
@@ -36,29 +37,19 @@ impl Compiler {
     #[must_use = "この関数はコンパイルの結果を返します"]
     pub fn compile(&mut self, command: &[String]) -> Result<()> {
         if self.container_id.is_some() {
-            return Err(anyhow!(
-                "コンパイルエラー: コンパイルは既に実行されています。新しいコンパイルを開始する前に、現在のコンパイルを終了してください。"
-            ));
+            return Err(anyhow!(docker::error("build_error", "コンパイルは既に実行されています")));
         }
 
         let output = Command::new(&command[0])
             .args(&command[1..])
             .output()
-            .map_err(|e| anyhow!(
-                "コンパイルエラー: コンパイルの実行に失敗しました: {}。\nコマンド: {:?}",
-                e,
-                command
-            ))?;
+            .map_err(|e| anyhow!(docker::error("build_error", format!("{e}。コマンド: {command:?}"))))?;
 
         if !output.status.success() {
             let stderr = String::from_utf8_lossy(&output.stderr);
             let stdout = String::from_utf8_lossy(&output.stdout);
-            return Err(anyhow!(
-                "コンパイルエラー: コンパイルに失敗しました。\n標準エラー出力: {}\n標準出力: {}\n終了コード: {:?}",
-                stderr,
-                stdout,
-                output.status.code()
-            ));
+            return Err(anyhow!(docker::error("build_error", 
+                format!("標準エラー出力: {stderr}\n標準出力: {stdout}\n終了コード: {:?}", output.status.code()))));
         }
 
         Ok(())
@@ -75,7 +66,7 @@ impl Compiler {
     pub fn get_container_id(&self) -> Result<String> {
         self.container_id
             .clone()
-            .ok_or_else(|| anyhow!("コンパイルエラー: コンテナIDが取得できませんでした。"))
+            .ok_or_else(|| anyhow!(docker::error("container_error", "コンテナIDが取得できません")))
     }
 
     /// コンパイル出力を取得します
@@ -90,20 +81,15 @@ impl Compiler {
     pub fn get_output(&self) -> Result<String> {
         let container_id = self.container_id
             .as_ref()
-            .ok_or_else(|| anyhow!(
-                "コンパイルエラー: コンパイルが実行されていません。compile()メソッドを先に実行してください。"
-            ))?;
+            .ok_or_else(|| anyhow!(docker::error("build_error", "コンパイルが実行されていません")))?;
 
         let output = Command::new("docker")
             .args(["logs", container_id])
             .output()
-            .map_err(|e| anyhow!(
-                "コンパイルエラー: コンパイル出力の取得に失敗しました: {}。\nコンテナID: {}",
-                e,
-                container_id
-            ))?;
+            .map_err(|e| anyhow!(docker::error("build_error", 
+                format!("出力の取得に失敗: {e}。コンテナID: {container_id}"))))?;
 
         String::from_utf8(output.stdout)
-            .map_err(|e| anyhow!("コンパイルエラー: コンパイル出力の解析に失敗しました: {}", e))
+            .map_err(|e| anyhow!(docker::error("build_error", format!("出力の解析に失敗: {e}"))))
     }
 } 
\ No newline at end of file
diff --git a/src/docker/execution/container.rs b/src/docker/execution/container.rs
index b01f832..feb68d3 100644
--- a/src/docker/execution/container.rs
+++ b/src/docker/execution/container.rs
@@ -1,5 +1,6 @@
 use std::process::Command;
 use anyhow::{Result, anyhow};
+use crate::message::docker;
 
 /// Dockerコンテナのランタイム管理を担当する構造体
 ///
@@ -42,21 +43,21 @@ impl Runtime {
     #[must_use = "この関数はコンテナの作成結果を返します"]
     pub fn create(&mut self, image: &str) -> Result<()> {
         if self.container_id.is_some() {
-            return Err(anyhow!("コンテナエラー: コンテナは既に作成されています"));
+            return Err(anyhow!(docker::error("container_error", "コンテナは既に作成されています")));
         }
 
         let output = Command::new("docker")
             .args(["create", image])
             .output()
-            .map_err(|e| anyhow!("コンテナエラー: コンテナの作成に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(docker::error("container_error", e)))?;
 
         if !output.status.success() {
             let stderr = String::from_utf8_lossy(&output.stderr);
-            return Err(anyhow!("コンテナエラー: コンテナの作成に失敗しました: {}", stderr));
+            return Err(anyhow!(docker::error("container_error", stderr)));
         }
 
         let container_id = String::from_utf8(output.stdout)
-            .map_err(|e| anyhow!("コンテナエラー: コンテナIDの解析に失敗しました: {}", e))?
+            .map_err(|e| anyhow!(docker::error("container_error", format!("コンテナIDの解析に失敗: {e}"))))?
             .trim()
             .to_string();
 
@@ -76,16 +77,16 @@ impl Runtime {
     pub fn start(&mut self) -> Result<()> {
         let container_id = self.container_id
             .as_ref()
-            .ok_or_else(|| anyhow!("コンテナエラー: コンテナが作成されていません"))?;
+            .ok_or_else(|| anyhow!(docker::error("container_error", "コンテナが作成されていません")))?;
 
         let output = Command::new("docker")
             .args(["start", container_id])
             .output()
-            .map_err(|e| anyhow!("コンテナエラー: コンテナの起動に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(docker::error("container_error", e)))?;
 
         if !output.status.success() {
             let stderr = String::from_utf8_lossy(&output.stderr);
-            return Err(anyhow!("コンテナエラー: コンテナの起動に失敗しました: {}", stderr));
+            return Err(anyhow!(docker::error("container_error", stderr)));
         }
 
         Ok(())
@@ -103,16 +104,16 @@ impl Runtime {
     pub fn stop(&mut self) -> Result<()> {
         let container_id = self.container_id
             .as_ref()
-            .ok_or_else(|| anyhow!("コンテナエラー: コンテナが作成されていません"))?;
+            .ok_or_else(|| anyhow!(docker::error("container_error", "コンテナが作成されていません")))?;
 
         let output = Command::new("docker")
             .args(["stop", container_id])
             .output()
-            .map_err(|e| anyhow!("コンテナエラー: コンテナの停止に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(docker::error("container_error", e)))?;
 
         if !output.status.success() {
             let stderr = String::from_utf8_lossy(&output.stderr);
-            return Err(anyhow!("コンテナエラー: コンテナの停止に失敗しました: {}", stderr));
+            return Err(anyhow!(docker::error("container_error", stderr)));
         }
 
         Ok(())
@@ -130,23 +131,23 @@ impl Runtime {
     pub fn wait(&mut self) -> Result<i32> {
         let container_id = self.container_id
             .as_ref()
-            .ok_or_else(|| anyhow!("コンテナエラー: コンテナが作成されていません"))?;
+            .ok_or_else(|| anyhow!(docker::error("container_error", "コンテナが作成されていません")))?;
 
         let output = Command::new("docker")
             .args(["wait", container_id])
             .output()
-            .map_err(|e| anyhow!("コンテナエラー: 終了コードの取得に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(docker::error("container_error", format!("終了コードの取得に失敗: {e}"))))?;
 
         if !output.status.success() {
             let stderr = String::from_utf8_lossy(&output.stderr);
-            return Err(anyhow!("コンテナエラー: 終了コードの取得に失敗しました: {}", stderr));
+            return Err(anyhow!(docker::error("container_error", format!("終了コードの取得に失敗: {stderr}"))));
         }
 
         let exit_code = String::from_utf8(output.stdout)
-            .map_err(|e| anyhow!("コンテナエラー: 終了コードの解析に失敗しました: {}", e))?
+            .map_err(|e| anyhow!(docker::error("container_error", format!("終了コードの解析に失敗: {e}"))))?
             .trim()
             .parse()
-            .map_err(|e| anyhow!("コンテナエラー: 終了コードの解析に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(docker::error("container_error", format!("終了コードの解析に失敗: {e}"))))?;
 
         Ok(exit_code)
     }
@@ -167,17 +168,17 @@ impl Runtime {
         let output = Command::new("docker")
             .args(["images", "-q", image])
             .output()
-            .map_err(|e| anyhow!("コンテナエラー: イメージの確認に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(docker::error("container_error", format!("イメージの確認に失敗: {e}"))))?;
 
         if output.stdout.is_empty() {
             let output = Command::new("docker")
                 .args(["pull", image])
                 .output()
-                .map_err(|e| anyhow!("コンテナエラー: イメージの取得に失敗しました: {}", e))?;
+                .map_err(|e| anyhow!(docker::error("container_error", format!("イメージの取得に失敗: {e}"))))?;
 
             if !output.status.success() {
                 let stderr = String::from_utf8_lossy(&output.stderr);
-                return Err(anyhow!("コンテナエラー: イメージの取得に失敗しました: {}", stderr));
+                return Err(anyhow!(docker::error("container_error", format!("イメージの取得に失敗: {stderr}"))));
             }
         }
 
diff --git a/src/fs/operations/check.rs b/src/fs/operations/check.rs
index e454c13..1b97e3d 100644
--- a/src/fs/operations/check.rs
+++ b/src/fs/operations/check.rs
@@ -1,6 +1,7 @@
 use std::path::Path;
 use std::fs::metadata;
 use anyhow::{Result, anyhow};
+use crate::message::fs;
 
 /// パスが存在するかどうかを確認します
 #[must_use = "この関数はパスの存在を示すブール値を返します"]
@@ -35,7 +36,7 @@ pub fn verify_basic_permissions<P: AsRef<Path>>(path: P, write_required: bool) -
     let metadata = metadata(path)?;
     
     if !metadata.permissions().readonly() && write_required {
-        return Err(anyhow!("アクセス権限がありません: {}", path.display()));
+        return Err(anyhow!(fs::error("permission_error", path.display())));
     }
     Ok(())
 }
@@ -53,11 +54,11 @@ pub fn verify_basic_permissions<P: AsRef<Path>>(path: P, write_required: bool) -
 pub fn verify_permissions<P: AsRef<Path>>(path: P, write_required: bool) -> Result<()> {
     let path = path.as_ref();
     if !path.exists() {
-        return Err(anyhow!("パスが存在しません: {}", path.display()));
+        return Err(anyhow!(fs::error("file_not_found", path.display())));
     }
 
     let metadata = path.metadata()
-        .map_err(|e| anyhow!("メタデータの取得に失敗しました: {}", e))?;
+        .map_err(|e| anyhow!(fs::error("metadata_error", e)))?;
 
     let permissions = metadata.permissions();
 
@@ -69,11 +70,11 @@ pub fn verify_permissions<P: AsRef<Path>>(path: P, write_required: bool) -> Resu
         let can_write = mode & 0o222 != 0;
 
         if !can_read {
-            return Err(anyhow!("読み取り権限がありません: {}", path.display()));
+            return Err(anyhow!(fs::error("permission_error", path.display())));
         }
 
         if write_required && !can_write {
-            return Err(anyhow!("書き込み権限がありません: {}", path.display()));
+            return Err(anyhow!(fs::error("permission_error", path.display())));
         }
     }
 
diff --git a/src/fs/operations/delete.rs b/src/fs/operations/delete.rs
index e000d55..207a21d 100644
--- a/src/fs/operations/delete.rs
+++ b/src/fs/operations/delete.rs
@@ -1,5 +1,6 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
+use crate::message::fs;
 use super::validate::{validate_is_file, validate_is_dir};
 
 /// ファイルを削除します。
@@ -15,7 +16,7 @@ pub fn remove_file(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
     validate_is_file(path)?;
     std::fs::remove_file(path)
-        .map_err(|e| anyhow!("ファイルの削除に失敗しました: {}", e))
+        .map_err(|e| anyhow!(fs::error("delete_error", e)))
 }
 
 /// ディレクトリを削除します。
@@ -31,5 +32,5 @@ pub fn remove_dir(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
     validate_is_dir(path)?;
     std::fs::remove_dir_all(path)
-        .map_err(|e| anyhow!("ディレクトリの削除に失敗しました: {}", e))
+        .map_err(|e| anyhow!(fs::error("delete_error", e)))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/read.rs b/src/fs/operations/read.rs
index 8a160f4..d304163 100644
--- a/src/fs/operations/read.rs
+++ b/src/fs/operations/read.rs
@@ -1,5 +1,6 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
+use crate::message::fs;
 use super::validate::validate_is_file;
 
 /// ファイルの内容を文字列として読み込みます。
@@ -17,7 +18,7 @@ pub fn load_file_as_string(path: impl AsRef<Path>) -> Result<String> {
     let path = path.as_ref();
     validate_is_file(path)?;
     std::fs::read_to_string(path)
-        .map_err(|e| anyhow!("ファイルの読み込みに失敗しました: {}", e))
+        .map_err(|e| anyhow!(fs::error("read_error", e)))
 }
 
 /// ファイルの内容をバイト列として読み込みます。
@@ -34,7 +35,7 @@ pub fn load_file_as_bytes(path: impl AsRef<Path>) -> Result<Vec<u8>> {
     let path = path.as_ref();
     validate_is_file(path)?;
     std::fs::read(path)
-        .map_err(|e| anyhow!("ファイルの読み込みに失敗しました: {}", e))
+        .map_err(|e| anyhow!(fs::error("read_error", e)))
 }
 
 /// ファイルのメタデータを取得します。
@@ -50,5 +51,5 @@ pub fn get_metadata(path: impl AsRef<Path>) -> Result<std::fs::Metadata> {
     let path = path.as_ref();
     validate_is_file(path)?;
     path.metadata()
-        .map_err(|e| anyhow!("メタデータの取得に失敗しました: {}", e))
+        .map_err(|e| anyhow!(fs::error("metadata_error", e)))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/validate.rs b/src/fs/operations/validate.rs
index ee98ff2..228713d 100644
--- a/src/fs/operations/validate.rs
+++ b/src/fs/operations/validate.rs
@@ -1,10 +1,11 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
+use crate::message::fs;
 
 /// パスの存在を検証します。
 pub(super) fn validate_exists(path: &Path) -> Result<()> {
     if !path.exists() {
-        return Err(anyhow!("パスが存在しません: {}", path.display()));
+        return Err(anyhow!(fs::error("file_not_found", path.display())));
     }
     Ok(())
 }
@@ -13,7 +14,7 @@ pub(super) fn validate_exists(path: &Path) -> Result<()> {
 pub(super) fn validate_is_file(path: &Path) -> Result<()> {
     validate_exists(path)?;
     if !path.is_file() {
-        return Err(anyhow!("パスがファイルではありません: {}", path.display()));
+        return Err(anyhow!(fs::error("invalid_path", path.display())));
     }
     Ok(())
 }
@@ -22,7 +23,7 @@ pub(super) fn validate_is_file(path: &Path) -> Result<()> {
 pub(super) fn validate_is_dir(path: &Path) -> Result<()> {
     validate_exists(path)?;
     if !path.is_dir() {
-        return Err(anyhow!("パスがディレクトリではありません: {}", path.display()));
+        return Err(anyhow!(fs::error("invalid_path", path.display())));
     }
     Ok(())
 }
diff --git a/src/fs/operations/write.rs b/src/fs/operations/write.rs
index 0b9e886..e5e0600 100644
--- a/src/fs/operations/write.rs
+++ b/src/fs/operations/write.rs
@@ -1,5 +1,6 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
+use crate::message::fs;
 use super::validate::validate_parent_exists;
 
 /// ディレクトリが存在することを確認し、存在しない場合は作成します。
@@ -13,7 +14,7 @@ pub fn ensure_directory(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
     if !path.exists() {
         std::fs::create_dir_all(path)
-            .map_err(|e| anyhow!("ディレクトリの作成に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(fs::error("write_error", e)))?;
     }
     Ok(())
 }
@@ -31,7 +32,7 @@ pub fn ensure_file(path: impl AsRef<Path>) -> Result<()> {
     if !path.exists() {
         validate_parent_exists(path)?;
         std::fs::File::create(path)
-            .map_err(|e| anyhow!("ファイルの作成に失敗しました: {}", e))?;
+            .map_err(|e| anyhow!(fs::error("write_error", e)))?;
     }
     Ok(())
 }
@@ -51,5 +52,5 @@ pub fn save_to_file(path: impl AsRef<Path>, content: impl AsRef<[u8]>) -> Result
         ensure_directory(parent)?;
     }
     std::fs::write(path, content)
-        .map_err(|e| anyhow!("ファイルの書き込みに失敗しました: {}", e))
+        .map_err(|e| anyhow!(fs::error("write_error", e)))
 } 
\ No newline at end of file
