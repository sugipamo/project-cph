diff --git a/src/fs/mod.rs b/src/fs/mod.rs
index 253623f..23dbfc6 100644
--- a/src/fs/mod.rs
+++ b/src/fs/mod.rs
@@ -6,16 +6,10 @@ pub mod transaction;
 
 // Re-export commonly used operations
 pub use operations::{
-    load_file_as_string as read_file,
-    save_to_file as write_file,
-    ensure_directory,
-    ensure_file,
-    remove_file as delete_file,
-    remove_dir as delete_dir,
-    exists,
-    is_file,
-    is_directory,
-    verify_basic_permissions as check_permissions,
+    check_exists as exists,
+    check_is_file as is_file,
+    check_is_directory as is_directory,
+    validate::parent_exists as check_permissions,
 };
 
 // Re-export path operations
diff --git a/src/fs/operations/delete.rs b/src/fs/operations/delete.rs
index 207a21d..14fa79d 100644
--- a/src/fs/operations/delete.rs
+++ b/src/fs/operations/delete.rs
@@ -1,7 +1,7 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
 use crate::message::fs;
-use super::validate::{validate_is_file, validate_is_dir};
+use super::validate::{is_file, is_dir};
 
 /// ファイルを削除します。
 /// 
@@ -14,7 +14,7 @@ use super::validate::{validate_is_file, validate_is_dir};
 /// - ファイルの削除に失敗した場合
 pub fn remove_file(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
-    validate_is_file(path)?;
+    is_file(path)?;
     std::fs::remove_file(path)
         .map_err(|e| anyhow!(fs::error("delete_error", e)))
 }
@@ -30,7 +30,7 @@ pub fn remove_file(path: impl AsRef<Path>) -> Result<()> {
 /// - ディレクトリの削除に失敗した場合
 pub fn remove_dir(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
-    validate_is_dir(path)?;
+    is_dir(path)?;
     std::fs::remove_dir_all(path)
         .map_err(|e| anyhow!(fs::error("delete_error", e)))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/mod.rs b/src/fs/operations/mod.rs
index 342d9e7..24d2cf2 100644
--- a/src/fs/operations/mod.rs
+++ b/src/fs/operations/mod.rs
@@ -2,12 +2,13 @@ pub mod check;
 pub mod delete;
 pub mod read;
 pub mod write;
-mod validate;
+pub mod validate;
 
-pub use check::*;
+pub use check::{exists as check_exists, is_file as check_is_file, is_directory as check_is_directory};
 pub use delete::*;
 pub use read::*;
 pub use write::*;
+pub use validate::*;
 
 // Re-export commonly used types from std
 pub use std::path::PathBuf;
diff --git a/src/fs/operations/read.rs b/src/fs/operations/read.rs
index d304163..dd6b01b 100644
--- a/src/fs/operations/read.rs
+++ b/src/fs/operations/read.rs
@@ -1,7 +1,7 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
 use crate::message::fs;
-use super::validate::validate_is_file;
+use super::validate::is_file;
 
 /// ファイルの内容を文字列として読み込みます。
 /// 
@@ -16,7 +16,7 @@ use super::validate::validate_is_file;
 #[must_use = "この関数はファイルの内容を返します"]
 pub fn load_file_as_string(path: impl AsRef<Path>) -> Result<String> {
     let path = path.as_ref();
-    validate_is_file(path)?;
+    is_file(path)?;
     std::fs::read_to_string(path)
         .map_err(|e| anyhow!(fs::error("read_error", e)))
 }
@@ -33,7 +33,7 @@ pub fn load_file_as_string(path: impl AsRef<Path>) -> Result<String> {
 #[must_use = "この関数はファイルの内容をバイト列として返します"]
 pub fn load_file_as_bytes(path: impl AsRef<Path>) -> Result<Vec<u8>> {
     let path = path.as_ref();
-    validate_is_file(path)?;
+    is_file(path)?;
     std::fs::read(path)
         .map_err(|e| anyhow!(fs::error("read_error", e)))
 }
@@ -49,7 +49,7 @@ pub fn load_file_as_bytes(path: impl AsRef<Path>) -> Result<Vec<u8>> {
 #[must_use = "この関数はファイルのメタデータを返します"]
 pub fn get_metadata(path: impl AsRef<Path>) -> Result<std::fs::Metadata> {
     let path = path.as_ref();
-    validate_is_file(path)?;
+    is_file(path)?;
     path.metadata()
         .map_err(|e| anyhow!(fs::error("metadata_error", e)))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/validate.rs b/src/fs/operations/validate.rs
index 228713d..a96eb9a 100644
--- a/src/fs/operations/validate.rs
+++ b/src/fs/operations/validate.rs
@@ -3,7 +3,10 @@ use anyhow::{Result, anyhow};
 use crate::message::fs;
 
 /// パスの存在を検証します。
-pub(super) fn validate_exists(path: &Path) -> Result<()> {
+/// 
+/// # Errors
+/// - パスが存在しない場合
+pub fn exists(path: &Path) -> Result<()> {
     if !path.exists() {
         return Err(anyhow!(fs::error("file_not_found", path.display())));
     }
@@ -11,8 +14,12 @@ pub(super) fn validate_exists(path: &Path) -> Result<()> {
 }
 
 /// パスがファイルであることを検証します。
-pub(super) fn validate_is_file(path: &Path) -> Result<()> {
-    validate_exists(path)?;
+/// 
+/// # Errors
+/// - パスが存在しない場合
+/// - パスがファイルでない場合
+pub fn is_file(path: &Path) -> Result<()> {
+    exists(path)?;
     if !path.is_file() {
         return Err(anyhow!(fs::error("invalid_path", path.display())));
     }
@@ -20,8 +27,12 @@ pub(super) fn validate_is_file(path: &Path) -> Result<()> {
 }
 
 /// パスがディレクトリであることを検証します。
-pub(super) fn validate_is_dir(path: &Path) -> Result<()> {
-    validate_exists(path)?;
+/// 
+/// # Errors
+/// - パスが存在しない場合
+/// - パスがディレクトリでない場合
+pub fn is_dir(path: &Path) -> Result<()> {
+    exists(path)?;
     if !path.is_dir() {
         return Err(anyhow!(fs::error("invalid_path", path.display())));
     }
@@ -29,9 +40,12 @@ pub(super) fn validate_is_dir(path: &Path) -> Result<()> {
 }
 
 /// パスの親ディレクトリが存在することを検証します。
-pub(super) fn validate_parent_exists(path: &Path) -> Result<()> {
+/// 
+/// # Errors
+/// - 親ディレクトリが存在しない場合
+pub fn parent_exists(path: &Path) -> Result<()> {
     if let Some(parent) = path.parent() {
-        validate_exists(parent)?;
+        exists(parent)?;
     }
     Ok(())
 } 
\ No newline at end of file
diff --git a/src/fs/operations/write.rs b/src/fs/operations/write.rs
index e5e0600..8214273 100644
--- a/src/fs/operations/write.rs
+++ b/src/fs/operations/write.rs
@@ -1,7 +1,7 @@
 use std::path::Path;
 use anyhow::{Result, anyhow};
 use crate::message::fs;
-use super::validate::validate_parent_exists;
+use super::validate::parent_exists;
 
 /// ディレクトリが存在することを確認し、存在しない場合は作成します。
 /// 
@@ -30,7 +30,7 @@ pub fn ensure_directory(path: impl AsRef<Path>) -> Result<()> {
 pub fn ensure_file(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
     if !path.exists() {
-        validate_parent_exists(path)?;
+        parent_exists(path)?;
         std::fs::File::create(path)
             .map_err(|e| anyhow!(fs::error("write_error", e)))?;
     }
diff --git a/tests/fs/mod.rs b/tests/fs/mod.rs
index 3ca8479..f056575 100644
--- a/tests/fs/mod.rs
+++ b/tests/fs/mod.rs
@@ -1,6 +1,6 @@
 mod operations;
+mod path;
+mod backup;
 // 他のモジュールは後で追加します
-// mod backup;
-// mod path;
 // mod manager;
 // mod transaction; 
\ No newline at end of file
diff --git a/tests/fs/operations/mod.rs b/tests/fs/operations/mod.rs
index e61b6c9..415479d 100644
--- a/tests/fs/operations/mod.rs
+++ b/tests/fs/operations/mod.rs
@@ -1,6 +1,5 @@
 mod check;
-// 他のモジュールは後で追加します
-// mod delete;
-// mod read;
-// mod write;
-// mod validate; 
\ No newline at end of file
+mod delete;
+mod read;
+mod write;
+mod validate; 
\ No newline at end of file
