diff --git a/src/bin/cph.rs b/src/bin/cph.rs
index 2864441..542be89 100644
--- a/src/bin/cph.rs
+++ b/src/bin/cph.rs
@@ -1,5 +1,5 @@
-use std::env;
-use anyhow::{Result, Context};
+use clap::Parser;
+use cph::contest::parse::CommandValue;
 use cph::config::Config;
 use cph::contest::parse::CommandParser;
 use cph::contest::service::{CommandService, ContestService, TestService};
diff --git a/src/contest/error.rs b/src/contest/error.rs
index 2babe73..ff3abd9 100644
--- a/src/contest/error.rs
+++ b/src/contest/error.rs
@@ -1,49 +1,49 @@
 use anyhow::Error;
 
 pub fn command_error(message: impl Into<String>) -> Error {
-    Error::msg(message.into())
+    Error::msg("コマンドエラー").context(message.into())
 }
 
 pub fn empty_command_error() -> Error {
-    command_error("コマンドが空です")
+    Error::msg("コマンドが空です")
 }
 
 pub fn unknown_command_error(command: impl Into<String>) -> Error {
-    command_error(format!("未知のコマンド: {}", command.into()))
+    Error::msg("未知のコマンド").context(command.into())
 }
 
 pub fn unknown_site_error(site: impl Into<String>) -> Error {
-    command_error(format!("未知のサイト: {}", site.into()))
+    Error::msg("未知のサイト").context(site.into())
 }
 
 pub fn site_required_error() -> Error {
-    command_error("サイトの指定が必要です")
+    Error::msg("サイトの指定が必要です")
 }
 
 pub fn too_many_arguments_error() -> Error {
-    command_error("引数が多すぎます")
+    Error::msg("引数が多すぎます")
 }
 
 pub fn no_contest_selected_error() -> Error {
-    command_error("コンテストが選択されていません")
+    Error::msg("コンテストが選択されていません")
 }
 
 pub fn unsupported_language_error(language: impl Into<String>) -> Error {
-    command_error(format!("サポートされていない言語です: {}", language.into()))
+    Error::msg("サポートされていない言語です").context(language.into())
 }
 
 pub fn invalid_url_error(url: impl Into<String>) -> Error {
-    command_error(format!("URLの形式が正しくありません: {}", url.into()))
+    Error::msg("URLの形式が正しくありません").context(url.into())
 }
 
 pub fn parse_error(message: impl Into<String>) -> Error {
-    command_error(format!("パースに失敗しました: {}", message.into()))
+    Error::msg("パースに失敗しました").context(message.into())
 }
 
 pub fn not_found_error(resource: impl Into<String>) -> Error {
-    command_error(format!("リソースが見つかりません: {}", resource.into()))
+    Error::msg("リソースが見つかりません").context(resource.into())
 }
 
 pub fn contest_error(message: impl Into<String>) -> Error {
-    command_error(format!("コンテストの操作に失敗しました: {}", message.into()))
+    Error::msg("コンテストの操作に失敗しました").context(message.into())
 }
diff --git a/src/contest/parse/parser.rs b/src/contest/parse/parser.rs
index fedc9ea..d67db1d 100644
--- a/src/contest/parse/parser.rs
+++ b/src/contest/parse/parser.rs
@@ -1,5 +1,5 @@
 use anyhow::Result;
-use crate::contest::parse::config::CommandContext;
+use crate::contest::model::CommandContext;
 
 pub struct Parser;
 
diff --git a/src/docker/error.rs b/src/docker/error.rs
index 0f485d6..55e4303 100644
--- a/src/docker/error.rs
+++ b/src/docker/error.rs
@@ -3,21 +3,21 @@ use anyhow::Error;
 pub type DockerResult<T> = Result<T, Error>;
 
 pub fn docker_err(error: impl Into<String>, message: impl Into<String>) -> Error {
-    Error::msg(format!("{}: {}", message.into(), error.into()))
+    Error::msg(error.into()).context(message.into())
 }
 
-pub fn execution_err(_: impl Into<String>, message: impl Into<String>) -> Error {
-    Error::msg(format!("実行エラー: {}", message.into()))
+pub fn execution_err(error: impl Into<String>, message: impl Into<String>) -> Error {
+    Error::msg("実行エラー").context(format!("{}: {}", message.into(), error.into()))
 }
 
-pub fn compilation_err(_: impl Into<String>, message: impl Into<String>) -> Error {
-    Error::msg(format!("コンパイルエラー: {}", message.into()))
+pub fn compilation_err(error: impl Into<String>, message: impl Into<String>) -> Error {
+    Error::msg("コンパイルエラー").context(format!("{}: {}", message.into(), error.into()))
 }
 
-pub fn container_err(_: impl Into<String>, message: impl Into<String>) -> Error {
-    Error::msg(format!("コンテナエラー: {}", message.into()))
+pub fn container_err(error: impl Into<String>, message: impl Into<String>) -> Error {
+    Error::msg("コンテナエラー").context(format!("{}: {}", message.into(), error.into()))
 }
 
-pub fn state_err(_: impl Into<String>, message: impl Into<String>) -> Error {
-    Error::msg(format!("状態エラー: {}", message.into()))
+pub fn state_err(error: impl Into<String>, message: impl Into<String>) -> Error {
+    Error::msg("状態エラー").context(format!("{}: {}", message.into(), error.into()))
 } 
\ No newline at end of file
diff --git a/src/docker/fs.rs b/src/docker/fs.rs
index 211ff2b..1671685 100644
--- a/src/docker/fs.rs
+++ b/src/docker/fs.rs
@@ -1,7 +1,5 @@
 use std::path::Path;
-use std::process::Command;
 use anyhow::Result;
-use crate::error::fs::io_error as create_io_error;
 
 /// コンテナにファイルをコピーします
 pub fn copy_to_container(container_id: &str, source: impl AsRef<Path>, target: impl AsRef<Path>) -> Result<()> {
diff --git a/src/error/fs.rs b/src/error/fs.rs
index 6a8b17e..eeb51c6 100644
--- a/src/error/fs.rs
+++ b/src/error/fs.rs
@@ -1,42 +1,42 @@
 use std::path::Path;
-use anyhow::Error;
+use anyhow::{Error, anyhow};
 
 /// ファイルが見つからない場合のエラーを作成します
 pub fn not_found_error<P: AsRef<Path>>(path: P) -> Error {
-    Error::msg(format!("ファイルが見つかりません: {}", path.as_ref().display()))
+    Error::msg("ファイルが見つかりません").context(path.as_ref().display().to_string())
 }
 
 /// I/Oエラーを作成します
 pub fn io_error<P: AsRef<Path>>(error: std::io::Error, path: P) -> Error {
-    Error::new(error).context(format!("I/Oエラー: {}", path.as_ref().display()))
+    anyhow!(error).context(format!("I/Oエラー: {}", path.as_ref().display()))
 }
 
 /// アクセス権限エラーを作成します
 pub fn permission_error<P: AsRef<Path>>(path: P) -> Error {
-    Error::msg(format!("権限エラー: {}", path.as_ref().display()))
+    Error::msg("アクセス権限がありません").context(path.as_ref().display().to_string())
 }
 
 /// パスエラーを作成します
 pub fn invalid_path_error<P: AsRef<Path>>(path: P) -> Error {
-    Error::msg(format!("無効なパス: {}", path.as_ref().display()))
+    Error::msg("無効なパスです").context(path.as_ref().display().to_string())
 }
 
 /// トランザクションエラーを作成します
 pub fn transaction_error(message: impl Into<String>) -> Error {
-    Error::msg(format!("トランザクションエラー: {}", message.into()))
+    Error::msg("トランザクションエラー").context(message.into())
 }
 
 /// バックアップエラーを作成します
 pub fn backup_error(message: impl Into<String>) -> Error {
-    Error::msg(format!("バックアップエラー: {}", message.into()))
+    Error::msg("バックアップエラー").context(message.into())
 }
 
 /// 検証エラーを作成します
 pub fn validation_error(message: impl Into<String>) -> Error {
-    Error::msg(format!("バリデーションエラー: {}", message.into()))
+    Error::msg("バリデーションエラー").context(message.into())
 }
 
 /// その他のファイルシステムエラーを作成します
 pub fn fs_error(message: impl Into<String>) -> Error {
-    Error::msg(message.into())
+    Error::msg("ファイルシステムエラー").context(message.into())
 } 
\ No newline at end of file
diff --git a/src/error/mod.rs b/src/error/mod.rs
index df72735..92ae743 100644
--- a/src/error/mod.rs
+++ b/src/error/mod.rs
@@ -5,29 +5,4 @@ pub mod fs;
 pub mod helpers;
 pub mod macros;
 
-pub use anyhow::{Error, Result, Context as _};
-
-#[derive(Debug, Clone, Copy)]
-pub enum ErrorSeverity {
-    Warning,
-    Error,
-    Fatal,
-}
-
-pub trait ErrorExt {
-    fn with_severity(self, severity: ErrorSeverity) -> Error;
-    fn with_hint<C>(self, hint: C) -> Error where C: std::fmt::Display + Send + Sync + 'static;
-}
-
-impl ErrorExt for Error {
-    fn with_severity(self, severity: ErrorSeverity) -> Error {
-        self.context(format!("重大度: {:?}", severity))
-    }
-
-    fn with_hint<C>(self, hint: C) -> Error
-    where
-        C: std::fmt::Display + Send + Sync + 'static,
-    {
-        self.context(format!("ヒント: {}", hint))
-    }
-} 
\ No newline at end of file
+pub use anyhow::{Error, Result, Context as _}; 
\ No newline at end of file
diff --git a/src/fs/backup.rs b/src/fs/backup.rs
index 31ce084..da0fe7b 100644
--- a/src/fs/backup.rs
+++ b/src/fs/backup.rs
@@ -2,9 +2,9 @@ use std::fs;
 use std::path::{Path, PathBuf};
 use std::sync::Arc;
 use tempfile::TempDir;
-use anyhow::Result;
-use crate::fs::error::{backup_error, ErrorExt};
-use crate::fs::path::ensure_path_exists;
+use anyhow::{Result, Context};
+use crate::error::fs::*;
+use crate::fs::ensure_path_exists;
 
 /// バックアップを管理する構造体
 #[derive(Debug, Clone)]
@@ -28,7 +28,7 @@ impl BackupManager {
         }
 
         let temp_dir = TempDir::new()
-            .with_context_io("バックアップディレクトリの作成に失敗しました")?;
+            .context("バックアップディレクトリの作成に失敗しました")?;
 
         let backup_path = temp_dir.path().to_path_buf();
         ensure_path_exists(&backup_path)?;
@@ -66,7 +66,7 @@ impl BackupManager {
         if let Some(backup_dir) = &self.backup_dir {
             if backup_dir.exists() {
                 fs::remove_dir_all(&**backup_dir)
-                    .with_context_io("バックアップのクリーンアップに失敗しました")?;
+                    .context("バックアップのクリーンアップに失敗しました")?;
             }
         }
 
diff --git a/src/fs/error.rs b/src/fs/error.rs
index d05a3e4..a100744 100644
--- a/src/fs/error.rs
+++ b/src/fs/error.rs
@@ -1,64 +1,40 @@
 use std::path::Path;
-use anyhow::{Result, Context, anyhow};
-use std::error::Error as StdError;
-
-/// エラーメッセージを生成するマクロ
-#[macro_export]
-macro_rules! fs_error {
-    ($kind:ident, $($arg:tt)*) => {
-        anyhow!("{}: {}", stringify!($kind), format!($($arg)*))
-    };
-}
-
-/// パスに関連するエラーメッセージを生成するマクロ
-#[macro_export]
-macro_rules! fs_path_error {
-    ($kind:ident, $path:expr) => {
-        anyhow!("{}: {}", stringify!($kind), $path.as_ref().display())
-    };
-}
+use anyhow::{anyhow, Error};
 
 /// ファイルシステム操作に関連するエラーを生成する関数群
-pub fn not_found_error(path: impl AsRef<Path>) -> anyhow::Error {
-    fs_path_error!(NotFound, path)
+pub fn not_found_error(path: impl AsRef<Path>) -> Error {
+    anyhow!("ファイルが見つかりません: {}", path.as_ref().display())
 }
 
-pub fn io_error(error: std::io::Error, message: impl Into<String>) -> anyhow::Error {
-    fs_error!(IoError, "{}: {}", message.into(), error)
+pub fn io_error(error: std::io::Error, path: impl AsRef<Path>) -> Error {
+    anyhow!(error).context(format!("パス '{}' でI/O操作に失敗しました", path.as_ref().display()))
 }
 
-pub fn permission_error(path: impl AsRef<Path>) -> anyhow::Error {
-    fs_path_error!(PermissionDenied, path)
+pub fn permission_error(path: impl AsRef<Path>) -> Error {
+    anyhow!("アクセス権限がありません: {}", path.as_ref().display())
 }
 
-pub fn invalid_path_error(path: impl AsRef<Path>) -> anyhow::Error {
-    fs_path_error!(InvalidPath, path)
+pub fn invalid_path_error(path: impl AsRef<Path>) -> Error {
+    anyhow!("無効なパスです: {}", path.as_ref().display())
 }
 
-pub fn transaction_error(message: impl Into<String>) -> anyhow::Error {
-    fs_error!(TransactionError, "{}", message.into())
+pub fn transaction_error<E: std::error::Error + Send + Sync + 'static>(
+    error: E,
+    message: impl Into<String>
+) -> Error {
+    anyhow!(error).context(format!("トランザクションエラー: {}", message.into()))
 }
 
-pub fn backup_error(message: impl Into<String>) -> anyhow::Error {
-    fs_error!(BackupError, "{}", message.into())
+pub fn backup_error<E: std::error::Error + Send + Sync + 'static>(
+    error: E,
+    message: impl Into<String>
+) -> Error {
+    anyhow!(error).context(format!("バックアップエラー: {}", message.into()))
 }
 
-pub fn validation_error(message: impl Into<String>) -> anyhow::Error {
-    fs_error!(ValidationError, "{}", message.into())
-}
-
-/// エラー変換のための拡張トレイト
-pub trait ErrorExt<T> {
-    fn with_context_path(self, path: impl AsRef<Path>) -> Result<T>;
-    fn with_context_io(self, message: impl Into<String>) -> Result<T>;
-}
-
-impl<T> ErrorExt<T> for Result<T> {
-    fn with_context_path(self, path: impl AsRef<Path>) -> Result<T> {
-        self.with_context(|| format!("パス操作エラー: {}", path.as_ref().display()))
-    }
-
-    fn with_context_io(self, message: impl Into<String>) -> Result<T> {
-        self.with_context(|| format!("I/Oエラー: {}", message.into()))
-    }
+pub fn validation_error<E: std::error::Error + Send + Sync + 'static>(
+    error: E,
+    message: impl Into<String>
+) -> Error {
+    anyhow!(error).context(format!("バリデーションエラー: {}", message.into()))
 } 
\ No newline at end of file
diff --git a/src/fs/manager.rs b/src/fs/manager.rs
index e7d16b6..559cfd9 100644
--- a/src/fs/manager.rs
+++ b/src/fs/manager.rs
@@ -1,11 +1,11 @@
 use std::path::{Path, PathBuf};
 use std::sync::Arc;
-use anyhow::Result;
-use crate::fs::error::{not_found_error, transaction_error, ErrorExt};
+use anyhow::{Result, Context};
+use crate::error::fs::*;
 use crate::fs::path::normalize_path;
-use crate::fs::transaction::{FileTransaction, FileOperation, CreateFileOperation, DeleteFileOperation};
+use crate::fs::{FileOperation, FileTransaction, CreateFileOperation, DeleteFileOperation};
 
-// ファイルマネージャーの状態を表現する型
+// ファイルマネジャーの状態を表現する型
 #[derive(Debug, Clone)]
 pub enum ManagerState {
     Idle,
@@ -89,7 +89,7 @@ impl FileManager {
             return Err(not_found_error(&path));
         }
         std::fs::read_to_string(&path)
-            .with_context_io(format!("ファイルの読み込みに失敗: {}", path.display()))
+            .context(format!("ファイルの読み込みに失敗: {}", path.display()))
     }
 
     pub fn write_file(self, path: impl AsRef<Path>, content: impl AsRef<str>) -> Result<Self> {
@@ -133,7 +133,7 @@ impl FileManager {
             },
             ManagerState::Idle => {
                 std::fs::create_dir_all(&path)
-                    .with_context_io(format!("ディレクトリの作成に失敗: {}", path.display()))?;
+                    .context(format!("ディレクトリの作成に失敗: {}", path.display()))?;
                 Ok(self)
             }
         }
diff --git a/src/fs/mod.rs b/src/fs/mod.rs
index b963d50..958341b 100644
--- a/src/fs/mod.rs
+++ b/src/fs/mod.rs
@@ -4,11 +4,43 @@ pub mod path;
 pub mod backup;
 pub mod manager;
 pub mod transaction;
-pub mod tests;
-
-pub use operations::*;
-pub use path::*;
-pub use error::*;
-pub use backup::*;
-pub use manager::*;
-pub use transaction::*; 
\ No newline at end of file
+
+// Re-export commonly used operations
+pub use operations::{
+    read_file,
+    write_file,
+    ensure_directory,
+    ensure_file,
+    delete_file,
+    delete_dir,
+    exists,
+    is_file,
+    is_directory,
+    check_permissions,
+};
+
+// Re-export path operations
+pub use path::{
+    PathValidator,
+    PathValidationLevel,
+    normalize_path,
+    validate_path,
+    ensure_path_exists,
+};
+
+// Re-export commonly used types and traits
+pub use anyhow::{Result, Context, Error};
+pub use std::path::{Path, PathBuf};
+
+// Re-export specific types
+pub use transaction::{
+    FileTransaction,
+    FileOperation,
+    CreateFileOperation,
+    DeleteFileOperation,
+    TransactionState,
+    TransactionTransition,
+};
+
+pub use backup::BackupManager;
+pub use manager::FileManager; 
\ No newline at end of file
diff --git a/src/fs/operations/check.rs b/src/fs/operations/check.rs
index c6ede56..499ab5b 100644
--- a/src/fs/operations/check.rs
+++ b/src/fs/operations/check.rs
@@ -1,7 +1,7 @@
 use std::path::Path;
+use std::fs::metadata;
 use anyhow::Result;
-use crate::fs::error::permission_error;
-use crate::fs::operations::read::metadata;
+use crate::error::fs::*;
 
 /// パスが存在するかどうかを確認します
 pub fn exists<P: AsRef<Path>>(path: P) -> bool {
diff --git a/src/fs/operations/delete.rs b/src/fs/operations/delete.rs
index c226866..3d2c897 100644
--- a/src/fs/operations/delete.rs
+++ b/src/fs/operations/delete.rs
@@ -1,6 +1,6 @@
-use crate::fs::error::{invalid_path_error, ErrorExt};
-use anyhow::Result;
 use std::path::Path;
+use anyhow::{Result, Context};
+use crate::error::fs::*;
 
 /// ファイルを削除します
 pub fn delete_file(path: impl AsRef<Path>) -> Result<()> {
@@ -12,7 +12,7 @@ pub fn delete_file(path: impl AsRef<Path>) -> Result<()> {
         return Err(invalid_path_error(path));
     }
     std::fs::remove_file(path)
-        .with_context_io(format!("ファイルの削除に失敗: {}", path.display()))
+        .context(format!("ファイルの削除に失敗: {}", path.display()))
 }
 
 /// ディレクトリを削除します
@@ -25,5 +25,5 @@ pub fn delete_dir(path: impl AsRef<Path>) -> Result<()> {
         return Err(invalid_path_error(path));
     }
     std::fs::remove_dir_all(path)
-        .with_context_io(format!("ディレクトリの削除に失敗: {}", path.display()))
+        .context(format!("ディレクトリの削除に失敗: {}", path.display()))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/mod.rs b/src/fs/operations/mod.rs
index c28b63b..7887407 100644
--- a/src/fs/operations/mod.rs
+++ b/src/fs/operations/mod.rs
@@ -3,11 +3,14 @@ pub mod delete;
 pub mod read;
 pub mod write;
 
-pub use check::{exists, is_file, is_directory, check_permissions};
-pub use delete::{delete_file, delete_directory};
-pub use read::{read_file, metadata};
-pub use write::{ensure_directory, ensure_file, write_file};
+pub use check::*;
+pub use delete::*;
+pub use read::*;
+pub use write::*;
 
-mod types;
+// Re-export commonly used types from std
+pub use std::path::PathBuf;
+pub use std::fs::{Metadata as FileMetadata, Permissions as FilePermissions};
 
-pub use types::*; 
\ No newline at end of file
+pub use anyhow::{Result, Context, Error};
+pub use crate::error::fs::*; 
\ No newline at end of file
diff --git a/src/fs/operations/read.rs b/src/fs/operations/read.rs
index b366931..ba4246b 100644
--- a/src/fs/operations/read.rs
+++ b/src/fs/operations/read.rs
@@ -1,27 +1,16 @@
-use crate::fs::error::{not_found_error, invalid_path_error, ErrorExt};
-use anyhow::Result;
 use std::path::Path;
+use anyhow::Result;
 
-/// ファイルを読み込みます
+/// ファイルの内容を文字列として読み込みます
 pub fn read_file(path: impl AsRef<Path>) -> Result<String> {
     let path = path.as_ref();
-    if !path.exists() {
-        return Err(not_found_error(path));
-    }
-    if !path.is_file() {
-        return Err(invalid_path_error(path));
-    }
     std::fs::read_to_string(path)
-        .with_context_io(format!("ファイルの読み込みに失敗: {}", path.display()))
+        .map_err(|e| crate::fs::error::io_error(e, path))
 }
 
-/// パスのメタデータを取得します
-pub fn get_metadata(path: impl AsRef<Path>) -> Result<std::fs::Metadata> {
+/// ファイルのメタデータを取得します
+pub fn metadata(path: impl AsRef<Path>) -> Result<std::fs::Metadata> {
     let path = path.as_ref();
-    if !path.exists() {
-        return Err(not_found_error(path));
-    }
-
     std::fs::metadata(path)
-        .with_context_io(format!("メタデータの取得に失敗: {}", path.display()))
+        .map_err(|e| crate::fs::error::io_error(e, path))
 } 
\ No newline at end of file
diff --git a/src/fs/operations/types.rs b/src/fs/operations/types.rs
deleted file mode 100644
index cd4b2ae..0000000
--- a/src/fs/operations/types.rs
+++ /dev/null
@@ -1,16 +0,0 @@
-use std::path::PathBuf;
-
-/// ファイルシステム操作の結果を表す型
-pub type Result<T> = anyhow::Result<T>;
-
-/// パスを表す型のエイリアス
-pub type FsPath = PathBuf;
-
-/// ファイルの内容を表す型
-pub type FileContent = Vec<u8>;
-
-/// ファイルのメタデータを表す型
-pub type FileMetadata = std::fs::Metadata;
-
-/// ファイルのパーミッションを表す型
-pub type FilePermissions = std::fs::Permissions; 
\ No newline at end of file
diff --git a/src/fs/operations/write.rs b/src/fs/operations/write.rs
index 2ec9053..99f4a34 100644
--- a/src/fs/operations/write.rs
+++ b/src/fs/operations/write.rs
@@ -1,44 +1,24 @@
-use crate::fs::error::{invalid_path_error, ErrorExt};
-use anyhow::Result;
 use std::path::Path;
+use anyhow::{Context, Result};
 
-pub fn create_dir(path: impl AsRef<Path>) -> Result<()> {
-    let path = path.as_ref();
-    if path.exists() {
-        if path.is_dir() {
-            return Ok(());
-        }
-        return Err(invalid_path_error(path));
-    }
-    std::fs::create_dir_all(path)
-        .with_context_io(format!("ディレクトリの作成に失敗: {}", path.display()))?;
-    Ok(())
+/// ディレクトリが存在することを確認し、存在しない場合は作成します
+pub fn ensure_directory(path: impl AsRef<Path>) -> Result<()> {
+    std::fs::create_dir_all(path.as_ref())
+        .with_context(|| format!("ディレクトリの作成に失敗: {}", path.as_ref().display()))
 }
 
-pub fn create_file(path: impl AsRef<Path>) -> Result<()> {
+/// ファイルが存在することを確認し、存在しない場合は作成します
+pub fn ensure_file(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
-    if path.exists() {
-        if path.is_file() {
-            return Ok(());
-        }
-        return Err(invalid_path_error(path));
-    }
-    if let Some(parent) = path.parent() {
-        create_dir(parent)?;
+    if !path.exists() {
+        std::fs::write(path, "")
+            .with_context(|| format!("ファイルの作成に失敗: {}", path.display()))?;
     }
-    std::fs::write(path, "")
-        .with_context_io(format!("ファイルの作成に失敗: {}", path.display()))?;
     Ok(())
 }
 
+/// ファイルに内容を書き込みます
 pub fn write_file(path: impl AsRef<Path>, content: impl AsRef<[u8]>) -> Result<()> {
-    let path = path.as_ref();
-    if path.exists() && !path.is_file() {
-        return Err(invalid_path_error(path));
-    }
-    if let Some(parent) = path.parent() {
-        create_dir(parent)?;
-    }
-    std::fs::write(path, content)
-        .with_context_io(format!("ファイルの書き込みに失敗: {}", path.display()))
+    std::fs::write(path.as_ref(), content)
+        .with_context(|| format!("ファイルの書き込みに失敗: {}", path.as_ref().display()))
 } 
\ No newline at end of file
diff --git a/src/fs/path.rs b/src/fs/path.rs
index b5ec555..da76503 100644
--- a/src/fs/path.rs
+++ b/src/fs/path.rs
@@ -1,6 +1,6 @@
 use std::path::{Path, PathBuf};
-use anyhow::Result;
-use crate::fs::error::{invalid_path_error, ErrorExt};
+use anyhow::{Result, Context};
+use crate::error::fs::*;
 
 /// パスの検証レベルを定義する列挙型
 #[derive(Debug, Clone, Copy, PartialEq, Eq)]
@@ -132,7 +132,7 @@ pub fn ensure_path_exists(path: impl AsRef<Path>) -> Result<()> {
     let path = path.as_ref();
     if !path.exists() {
         std::fs::create_dir_all(path)
-            .with_context_io(format!("ディレクトリの作成に失敗: {}", path.display()))?;
+            .context(format!("ディレクトリの作成に失敗: {}", path.display()))?;
     }
     Ok(())
 } 
\ No newline at end of file
diff --git a/src/fs/transaction.rs b/src/fs/transaction.rs
index 1df5c4f..321ffdd 100644
--- a/src/fs/transaction.rs
+++ b/src/fs/transaction.rs
@@ -1,9 +1,9 @@
-use std::path::PathBuf;
+use std::path::{Path, PathBuf};
 use std::sync::Arc;
-use anyhow::{Error, Result};
-use crate::fs::error::{transaction_error, validation_error, ErrorExt};
-use crate::fs::path::ensure_path_exists;
 use std::time::{SystemTime, UNIX_EPOCH};
+use anyhow::{Error, Result, Context};
+use crate::error::fs::*;
+use crate::fs::ensure_path_exists;
 
 /// ファイル操作のトレイト
 pub trait FileOperation: Send + Sync + std::fmt::Debug {
@@ -256,13 +256,13 @@ impl FileOperation for CreateFileOperation {
             ensure_path_exists(parent)?;
         }
         std::fs::write(&*self.path, &*self.content)
-            .with_context_io(format!("ファイルの書き込みに失敗: {}", self.path.display()))
+            .context(format!("ファイルの書き込みに失敗: {}", self.path.display()))
     }
 
     fn rollback(&self) -> Result<()> {
         if self.path.exists() {
             std::fs::remove_file(&*self.path)
-                .with_context_io(format!("ファイルの削除に失敗: {}", self.path.display()))?;
+                .context(format!("ファイルの削除に失敗: {}", self.path.display()))?;
         }
         Ok(())
     }
@@ -289,7 +289,7 @@ impl DeleteFileOperation {
     pub fn new(path: PathBuf) -> Result<Self> {
         let original_content = if path.exists() {
             Some(Arc::new(std::fs::read_to_string(&path)
-                .with_context_io(format!("ファイルの読み込みに失敗: {}", path.display()))?))
+                .context(format!("ファイルの読み込みに失敗: {}", path.display()))?))
         } else {
             None
         };
@@ -305,7 +305,7 @@ impl FileOperation for DeleteFileOperation {
     fn execute(&self) -> Result<()> {
         if self.path.exists() {
             std::fs::remove_file(&*self.path)
-                .with_context_io(format!("ファイルの削除に失敗: {}", self.path.display()))?;
+                .context(format!("ファイルの削除に失敗: {}", self.path.display()))?;
         }
         Ok(())
     }
@@ -316,7 +316,7 @@ impl FileOperation for DeleteFileOperation {
                 ensure_path_exists(parent)?;
             }
             std::fs::write(&*self.path, &**content)
-                .with_context_io(format!("ファイルの復元に失敗: {}", self.path.display()))?;
+                .context(format!("ファイルの復元に失敗: {}", self.path.display()))?;
         }
         Ok(())
     }
diff --git a/tests/error_test.rs b/tests/error_test.rs
index c1fb5c5..f2db3b6 100644
--- a/tests/error_test.rs
+++ b/tests/error_test.rs
@@ -1,68 +1,31 @@
-use cph::contest::error::{ContestError, ErrorContext};
+use anyhow::{Error, Context as _, bail, ensure};
 use std::path::PathBuf;
 
 #[test]
 fn test_error_context() {
-    let error = ContestError::Config {
-        message: "設定の読み込みに失敗".to_string(),
-        source: None,
-    }
-    .with_context("設定ファイルの読み込み", "config.yaml")
-    .add_hint("設定ファイルの形式を確認してください");
-
-    match error {
-        ContestError::Config { message, source: _ } => {
-            assert!(message.contains("設定の読み込みに失敗"));
-            assert!(message.contains("操作: 設定ファイルの読み込み"));
-            assert!(message.contains("場所: config.yaml"));
-            assert!(message.contains("ヒント: 設定ファイルの形式を確認してください"));
-        }
-        _ => panic!("unexpected error variant"),
-    }
-}
-
-#[test]
-fn test_error_context_with_stack_trace() {
-    let context = ErrorContext::new("テスト操作", "テスト場所")
-        .with_hint("テストヒント")
-        .with_stack_trace();
-
-    assert_eq!(context.operation, "テスト操作");
-    assert_eq!(context.location, "テスト場所");
-    assert!(context.details.contains_key("hint"));
-    assert_eq!(context.details.get("hint").unwrap(), "テストヒント");
-
-    #[cfg(debug_assertions)]
-    {
-        assert!(context.details.contains_key("stack_trace"));
-        assert!(!context.details.get("stack_trace").unwrap().is_empty());
-    }
-
-    #[cfg(not(debug_assertions))]
-    {
-        assert!(!context.details.contains_key("stack_trace"));
-    }
+    let error = Error::msg("設定の読み込みに失敗")
+        .context("設定ファイルの読み込み")
+        .context("config.yaml")
+        .context("設定ファイルの形式を確認してください");
+
+    let error_string = format!("{:?}", error);
+    assert!(error_string.contains("設定の読み込みに失敗"));
+    assert!(error_string.contains("設定ファイルの読み込み"));
+    assert!(error_string.contains("config.yaml"));
+    assert!(error_string.contains("設定ファイルの形式を確認してください"));
 }
 
 #[test]
-fn test_filesystem_error_context() {
+fn test_filesystem_error() {
     let path = PathBuf::from("test.txt");
-    let error = ContestError::FileSystem {
-        message: "ファイルの作成に失敗".to_string(),
-        source: std::io::Error::new(std::io::ErrorKind::Other, "テストエラー"),
-        path: path.clone(),
-    }
-    .with_context("ファイル作成", "test.txt")
-    .add_hint("ファイルの権限を確認してください");
-
-    match error {
-        ContestError::FileSystem { message, source: _, path: error_path } => {
-            assert!(message.contains("ファイルの作成に失敗"));
-            assert!(message.contains("操作: ファイル作成"));
-            assert!(message.contains("場所: test.txt"));
-            assert!(message.contains("ヒント: ファイルの権限を確認してください"));
-            assert_eq!(error_path, path);
-        }
-        _ => panic!("unexpected error variant"),
-    }
+    let io_error = std::io::Error::new(std::io::ErrorKind::Other, "テストエラー");
+    let error = Error::new(io_error)
+        .context("ファイルの作成に失敗")
+        .context(format!("パス: {}", path.display()))
+        .context("ファイルの権限を確認してください");
+
+    let error_string = format!("{:?}", error);
+    assert!(error_string.contains("ファイルの作成に失敗"));
+    assert!(error_string.contains("test.txt"));
+    assert!(error_string.contains("ファイルの権限を確認してください"));
 } 
\ No newline at end of file
diff --git a/tests/helpers/mod.rs b/tests/helpers/mod.rs
index c0b7a0f..28f6791 100644
--- a/tests/helpers/mod.rs
+++ b/tests/helpers/mod.rs
@@ -8,6 +8,8 @@ use std::sync::Arc;
 use tokio::sync::Mutex;
 use async_trait::async_trait;
 use std::collections::HashMap;
+use anyhow::{Result, Error};
+use cph::docker::execution::command::DockerCommandExecutor;
 
 use crate::docker::error::{DockerError, DockerResult};
 use crate::docker::traits::DockerCommandExecutor;
