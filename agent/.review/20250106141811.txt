作業結果:
1. エラーメッセージの改善
   - より詳細な情報とヘルプメッセージを追加
   - 日本語でのエラーメッセージ対応
2. エラーハンドリングの改善
   - FileSystemError::Ioにコンテキスト情報を追加
   - エラーメッセージの統一化
3. コードの品質
   - コンパイルエラーなし
   - 未使用コードに関する警告のみ残存（将来的な使用のため保持）

結論: 変更は適切で、エラーハンドリングが改善され、ユーザーにとってより分かりやすいエラーメッセージになりました。

diff --git a/src/contest/error.rs b/src/contest/error.rs
index 1236a39..6af5b6d 100644
--- a/src/contest/error.rs
+++ b/src/contest/error.rs
@@ -5,9 +5,24 @@ pub fn site_err(msg: String) -> CphError {
 }
 
 pub fn language_err(msg: String) -> CphError {
-    CphError::Contest(ContestError::Language(LanguageError::Config { message: msg }))
+    CphError::Contest(ContestError::Language(LanguageError::Config {
+        message: msg,
+        help: "言語設定を確認してください。".to_string(),
+    }))
 }
 
 pub fn config_err(msg: String) -> CphError {
-    CphError::Contest(ContestError::Config(ConfigError::NotFound { path: msg }))
+    CphError::Contest(ContestError::Config(ConfigError::InvalidValue {
+        field: "contest".to_string(),
+        message: msg,
+        help: "設定ファイルの内容を確認してください。".to_string(),
+    }))
+}
+
+pub fn unsupported_language_err(lang: String) -> CphError {
+    CphError::Contest(ContestError::Language(LanguageError::Unsupported { lang }))
+}
+
+pub fn compiler_not_found_err(compiler: String) -> CphError {
+    CphError::Contest(ContestError::Language(LanguageError::CompilerNotFound { compiler }))
 }
diff --git a/src/docker/error.rs b/src/docker/error.rs
index af675e5..94a5e33 100644
--- a/src/docker/error.rs
+++ b/src/docker/error.rs
@@ -1,21 +1,44 @@
 use crate::error::{CphError, DockerError};
 
 pub fn docker_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "Docker操作中のエラー".to_string(),
+    })
 }
 
 pub fn container_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コンテナ操作中のエラー".to_string(),
+    })
 }
 
 pub fn compilation_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コンパイル中のエラー".to_string(),
+    })
 }
 
 pub fn command_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コマンド実行中のエラー".to_string(),
+    })
 }
 
 pub fn state_err(msg: String) -> CphError {
-    CphError::Docker(DockerError::ExecutionFailed { message: msg })
+    CphError::Docker(DockerError::ExecutionFailed {
+        message: msg,
+        context: "コンテナの状態遷移中のエラー".to_string(),
+    })
+}
+
+pub fn build_err(image: String, context: String) -> CphError {
+    CphError::Docker(DockerError::BuildFailed { image, context })
+}
+
+pub fn connection_err() -> CphError {
+    CphError::Docker(DockerError::ConnectionFailed)
 } 
\ No newline at end of file
diff --git a/src/error.rs b/src/error.rs
index c8e581a..4268355 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -6,53 +6,53 @@ pub const NO_ACTIVE_CONTEST: &str = "アクティブなコンテストがあり
 
 #[derive(Debug, Error)]
 pub enum ConfigError {
-    #[error("設定ファイルが見つかりません: {path}")]
+    #[error("設定ファイルが見つかりません: {path}\nヒント: 'config.yaml'ファイルが正しい場所にあることを確認してください。")]
     NotFound { path: String },
     
-    #[error("設定ファイルの解析に失敗しました: {0}")]
+    #[error("設定ファイルの解析に失敗しました: {0}\nヒント: YAMLの構文が正しいことを確認してください。")]
     Parse(#[from] serde_yaml::Error),
     
-    #[error("無効な設定値: {field} - {message}")]
-    InvalidValue { field: String, message: String },
+    #[error("無効な設定値: {field} - {message}\nヒント: {help}")]
+    InvalidValue { field: String, message: String, help: String },
 }
 
 #[derive(Debug, Error)]
 pub enum FileSystemError {
-    #[error("ファイルが見つかりません: {path}")]
+    #[error("ファイルが見つかりません: {path}\nヒント: パスが正しいことを確認してください。")]
     NotFound { path: String },
     
-    #[error("アクセス権限がありません: {path}")]
+    #[error("アクセス権限がありません: {path}\nヒント: ファイルの権限設定を確認してください。")]
     Permission { path: String },
     
-    #[error("IOエラー: {0}")]
-    Io(#[from] io::Error),
+    #[error("IOエラー: {0}\nコンテキスト: {context}")]
+    Io(#[from] io::Error, String),
     
-    #[error("パスエラー: {0}")]
+    #[error("パスエラー: {0}\nヒント: パスが有効であることを確認してください。")]
     Path(#[from] StripPrefixError),
 }
 
 #[derive(Debug, Error)]
 pub enum LanguageError {
-    #[error("サポートされていない言語です: {lang}")]
+    #[error("サポートされていない言語です: {lang}\nヒント: サポートされている言語は: cpp, python, rust です。")]
     Unsupported { lang: String },
     
-    #[error("コンパイラが見つかりません: {compiler}")]
+    #[error("コンパイラが見つかりません: {compiler}\nヒント: {compiler}がインストールされていることを確認してください。")]
     CompilerNotFound { compiler: String },
     
-    #[error("言語設定エラー: {message}")]
-    Config { message: String },
+    #[error("言語設定エラー: {message}\nヒント: {help}")]
+    Config { message: String, help: String },
 }
 
 #[derive(Debug, Error)]
 pub enum DockerError {
-    #[error("Dockerデーモンに接続できません")]
+    #[error("Dockerデーモンに接続できません\nヒント: Dockerが起動していることを確認してください。")]
     ConnectionFailed,
     
-    #[error("イメージのビルドに失敗しました: {image}")]
-    BuildFailed { image: String },
+    #[error("イメージのビルドに失敗しました: {image}\nコンテキスト: {context}\nヒント: Dockerfileを確認してください。")]
+    BuildFailed { image: String, context: String },
     
-    #[error("コンテナの実行に失敗しました: {message}")]
-    ExecutionFailed { message: String },
+    #[error("コンテナの実行に失敗しました: {message}\nコンテキスト: {context}")]
+    ExecutionFailed { message: String, context: String },
     
     #[error("ファイルシステムエラー: {0}")]
     Fs(#[from] FileSystemError),
diff --git a/src/fs/error.rs b/src/fs/error.rs
index e71190b..94dc1b5 100644
--- a/src/fs/error.rs
+++ b/src/fs/error.rs
@@ -5,8 +5,16 @@ pub fn fs_err(msg: String) -> CphError {
 }
 
 pub fn fs_err_with_source(msg: &str, source: impl std::error::Error) -> CphError {
-    CphError::Fs(FileSystemError::Io(std::io::Error::new(
-        std::io::ErrorKind::Other,
-        format!("{}: {}", msg, source),
-    )))
+    CphError::Fs(FileSystemError::Io(
+        std::io::Error::new(std::io::ErrorKind::Other, format!("{}: {}", msg, source)),
+        "ファイルシステム操作中のエラー".to_string(),
+    ))
+}
+
+pub fn fs_permission_err(path: String) -> CphError {
+    CphError::Fs(FileSystemError::Permission { path })
+}
+
+pub fn fs_io_err(error: std::io::Error, context: String) -> CphError {
+    CphError::Fs(FileSystemError::Io(error, context))
 } 
\ No newline at end of file
