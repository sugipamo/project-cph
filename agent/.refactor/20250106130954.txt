# リファクタリング計画

## 1. エラー処理の統一と改善
### 問題点
- 複数のエラー型（ContestError, DockerError, FsError）が混在
- エラーメッセージの日本語化が不完全
- エラー変換処理の重複

### 解決策
1. 共通のエラー型を定義
   - `src/error.rs`に統一されたエラー型を実装
   - 各モジュール固有のエラーを共通エラー型にマッピング
2. エラーメッセージの完全な日本語化
3. エラー変換のマクロ実装による重複削減

## 2. テストの改善
### 問題点
- テストカバレッジが不十分
- モックの使用が限定的

### 解決策
1. テストカバレッジの向上
   - 各モジュールのユニットテスト追加
   - エッジケースのテスト追加
2. モックの活用
   - テストヘルパーの拡充
   - モックを使用したテストの追加

## 3. 非同期処理の改善
### 問題点
- `#[allow(async_fn_in_trait)]`の過度な使用
- 非同期エラーハンドリングの改善が必要

### 解決策
1. 非同期トレイトの見直し
   - 最新の非同期パターンの採用
   - `async-trait`クレートの導入検討
2. エラーハンドリングの改善
   - 非同期コンテキストでのエラー伝播の改善
   - タイムアウト処理の追加

## 4. コードの重複排除
### 問題点
- ファイル操作の重複
- エラー変換処理の重複

### 解決策
1. 共通ユーティリティの作成
   - ファイル操作のユーティリティ関数
   - エラー変換のヘルパー関数
2. マクロの活用
   - 共通パターンのマクロ化

## 5. ドキュメンテーションの改善
### 問題点
- 関数やモジュールのドキュメントが不足

### 解決策
1. ドキュメントの追加
   - 各モジュールのドキュメント追加
   - 主要な関数のドキュメント追加
2. 例示の追加
   - 使用例の追加
   - エラーケースの説明追加

## 実装順序
1. エラー処理の統一
2. テストの追加
3. 非同期処理の改善
4. コードの重複排除
5. ドキュメントの追加

## 注意点
- 各変更は段階的に行い、テストで確認
- 後方互換性の維持
- パフォーマンスへの影響を考慮 