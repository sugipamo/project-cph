src/dockerディレクトリの構造に関する問題点と改善計画

# 現状の問題点
1. runner/とrunners/という似たような名前のディレクトリが存在し、混乱の原因となっている
2. executor/とrunner/の役割の区別が不明確
3. ディレクトリ構造が複雑で、責任の分離が不明確

# 改善計画

## 1. ディレクトリ構造の整理
- runners/ディレクトリを削除し、その機能をrunner/に統合
- executor/の役割を明確にし、必要に応じてrunner/に統合または独立した機能として再定義

## 2. モジュール構成の改善
runner/ディレクトリの構成を以下のように整理：
- compiler.rs: コンパイル関連の機能
- container.rs: コンテナ操作の基本機能
- io.rs: 入出力処理
- test_helpers.rs: テスト用のヘルパー関数
- default_impl.rs: デフォルト実装
- mod.rs: モジュールの公開インターフェース
- manager.rs: 複数のDockerRunnerを管理する機能（現在のrunners/mod.rsの内容）

## 3. 実装手順
1. runners/の機能をrunner/に移行
   a. runner/manager.rsを作成
   b. runners/mod.rsの内容をmanager.rsに移動
   c. 必要な依存関係とインポートを更新
   d. runners/mod.rsを削除
   e. runnersディレクトリを削除

2. executor/の機能を分析し、適切な場所に再配置
   a. executor/mod.rsの内容を確認
   b. DockerCommandExecutorトレイトの実装を適切な場所に移動
   c. executor/mod.rsを削除
   d. executorディレクトリを削除

3. runner/mod.rsの整理
   a. 公開インターフェースの見直し
   b. 内部実装の整理
   c. テストの更新

4. テストとドキュメントの更新
   a. 既存のテストが新しい構造で動作することを確認
   b. 必要に応じてテストを追加
   c. ドキュメントコメントを更新

## 4. 注意点
- 既存のテストが壊れないように注意
- 後方互換性を維持
- コードの重複を避ける
- 責任の明確な分離を心がける

## 5. 期待される効果
- コードの見通しが良くなる
- 責任の分離が明確になる
- メンテナンス性が向上する
- 新機能の追加が容易になる 