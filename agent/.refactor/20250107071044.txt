# イミュータブルな設計への移行計画

## 目的
- 状態の変更を明示的にし、予測可能性を高める
- 並行処理時の安全性を向上
- コードの保守性と可読性の向上

## 対象領域
1. コンテスト関連の状態管理
   - src/contest/model/state.rs
   - src/contest/service/contest.rs

2. Docker関連の状態管理
   - src/docker/state/manager.rs
   - src/docker/state/types.rs

3. ファイルシステム操作
   - src/fs/transaction.rs
   - src/fs/manager.rs

## 実装方針

### 1. 状態の不変性を確保
- mutメソッドを最小限に抑え、新しい状態を返す関数型アプローチを採用
- 状態の変更を表現する際は、新しいインスタンスを生成
- 内部可変性が必要な場合は、Arc<Mutex<T>>やRwLockなどを適切に使用

### 2. エラー処理の改善
- Result型を活用し、失敗可能な操作を明示的に表現
- カスタムエラー型の整理と統一

### 3. 型システムの活用
- newtype patternを活用し、型安全性を向上
- 状態遷移を型レベルで表現

## 実装手順

1. コンテスト関連
   - ContestStateの不変性を確保
   - サービス層でのミュータブルな操作を関数型アプローチに変更

2. Docker関連
   - DockerStateManagerの状態管理を不変に
   - コンテナ操作の結果を新しい状態として返す

3. ファイルシステム
   - トランザクション操作を不変に
   - ファイル操作の結果を新しい状態として返す

## テスト戦略
- 各状態変更操作のユニットテスト
- 状態遷移のプロパティテスト
- 並行処理時の動作確認テスト

## 注意点
- 既存のAPIとの互換性維持
- パフォーマンスへの影響の最小化
- メモリ使用量の考慮 