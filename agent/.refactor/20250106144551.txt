# リファクタリング計画

## 1. エラー処理の統一
### 現状の問題点
- エラー定義が複数のモジュールに分散している
  - src/error.rs
  - src/fs/error.rs
  - src/docker/error.rs
  - src/contest/error.rs
- エラーハンドリングの一貫性が不足している

### 改善案
1. 共通のエラー型を定義
   - src/error.rs に統一的なエラー型を定義
   - 各モジュール固有のエラーは、この共通エラー型のバリアントとして実装

2. エラー変換トレイトの実装
   - From トレイトを活用して、モジュール固有のエラーを共通エラー型に変換
   - エラーメッセージの一貫性を確保

## 2. ファイルシステム関連の整理
### 現状の問題点
- src/fs ディレクトリ内のモジュール間の責務が不明確
- docker.rs, manager.rs, transaction.rs の関係性が複雑

### 改善案
1. モジュールの責務明確化
   - manager.rs: ファイルシステム操作の高レベルインターフェース
   - transaction.rs: トランザクション的なファイル操作の実装
   - docker.rs: Dockerコンテナ内のファイルシステム操作に特化

2. インターフェースの整理
   - 共通のトレイトを定義して、各モジュールの役割を明確化
   - 依存関係の整理と循環参照の排除

## 3. テストカバレッジの向上
### 現状の問題点
- テストディレクトリの構造が不十分
- 一部のモジュールにテストが不足している

### 改善案
1. テストディレクトリの再構築
   - src の構造に合わせたテストディレクトリ構造の作成
   - 各モジュールに対応するテストファイルの追加

2. テストケースの追加
   - エラーケースのテスト強化
   - 境界値テストの追加
   - 統合テストの追加

## 実装順序
1. エラー処理の統一
   - 共通エラー型の定義
   - 各モジュールのエラー型の移行

2. ファイルシステム関連の整理
   - インターフェースの定義
   - モジュールの責務分離

3. テストカバレッジの向上
   - テストディレクトリの再構築
   - テストケースの実装 