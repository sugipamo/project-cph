# リファクタリング計画

## 1. エラー処理の改善
- `unwrap()`や`expect()`の使用を排除し、適切なエラーハンドリングに置き換える
  - テストコードでの`unwrap()`の使用を`?`演算子や適切なエラーハンドリングに置き換える
  - 特にDocker関連のテストコードでの改善が必要

## 2. エラー型の整理と統一
- エラー型の階層構造を整理
  - `CphError`を最上位のエラー型として維持
  - 各モジュール固有のエラー型（`DockerError`、`ContestError`など）の整理
- エラーメッセージの一貫性を確保
  - 日本語メッセージの統一
  - エラーコンテキストの追加

## 3. テストコードの改善
- テストヘルパー関数の整理
  - 共通のセットアップ/クリーンアップロジックの抽出
  - テストデータの生成を効率化
- モックの活用
  - 外部依存（Docker、ファイルシステムなど）のモック化
  - テストの信頼性と再現性の向上

## 4. コードの整理
- 未使用のインポートの削除
- 重複コードの排除
- 非推奨な属性（`#[allow(dead_code)]`など）の見直し

## 5. ドキュメンテーションの充実
- 主要な型や関数にドキュメンテーションコメントを追加
- エラー型の使用方法と回復方法の説明
- テストケースの目的と期待される動作の説明

## 実装手順
1. エラー処理の改善
   - テストコードの`unwrap()`を置き換え
   - エラーハンドリングの統一

2. エラー型の整理
   - エラー型の階層構造の見直し
   - エラーメッセージの統一

3. テストコードの改善
   - テストヘルパーの整理
   - モックの導入

4. コードクリーンアップ
   - 未使用コードの削除
   - 重複の排除

5. ドキュメント追加
   - コメントの追加
   - 使用方法の説明

各ステップ完了後に`cargo check`を実行して変更の影響を確認します。 