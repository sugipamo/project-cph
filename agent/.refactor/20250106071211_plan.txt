# DockerRunner周りのリファクタリング計画

## 現状の課題
1. エラーハンドリングが不統一
   - 一部でString型のエラーを使用、より適切なエラー型の導入が必要
   - エラーメッセージの一貫性がない

2. コードの重複
   - Docker関連の設定取得ロジックが分散
   - ファイル操作の共通処理が重複

3. テスト容易性
   - モック化が困難な構造
   - テストケースの依存関係が強い

4. 設定管理
   - 設定値の取得方法が散在
   - デフォルト値の管理が不統一

## 改善計画

### 1. エラー型の導入
- カスタムエラー型 `DockerError` の作成
  - `DockerConfigError`
  - `DockerRuntimeError`
  - `DockerTimeoutError`
  - `DockerMemoryError`
- Result型の戻り値を `Result<T, DockerError>` に統一

### 2. 構造の改善
- `DockerConfig` 構造体の導入
  - 設定値の一元管理
  - バリデーション機能の追加
- `DockerFileManager` トレイトの導入
  - ファイル操作の抽象化
  - テスト時のモック化を容易に

### 3. テスタビリティの向上
- インターフェースの抽象化
  - `DockerCommandExecutor` トレイトの導入
  - 実際のDocker操作とテスト用モックの分離
- テストヘルパーの整理
  - セットアップ/クリーンアップの共通化
  - テストフィクスチャの導入

### 4. 設定管理の改善
- 設定値の検証機能追加
- デフォルト値の一元管理
- 環境変数との連携改善

## 実装順序
1. エラー型の導入
2. 設定管理の改善
3. ファイル操作の抽象化
4. テスト改善

## 注意点
- 既存のテストケースが壊れないよう段階的に改善
- 後方互換性の維持
- ドキュメントの更新 