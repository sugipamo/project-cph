# src/fsディレクトリのリファクタリング計画

## 現状の問題点
1. エラーハンドリングの重複
   - 各ファイルで同様のエラー変換ロジックが繰り返されている
   - エラーメッセージの一貫性が保証されていない

2. パス操作の重複
   - normalize_pathやパスの検証ロジックが複数箇所に存在
   - パス操作の一貫性が保証されていない

3. トランザクション処理の複雑さ
   - 状態管理が複雑で理解しづらい
   - エラーハンドリングとロールバックのロジックが散在

4. テストの重複
   - 各モジュールで似たようなテストケースが存在
   - テストヘルパー関数の不足

## リファクタリング方針

1. エラーハンドリングの改善
   - src/fs/error/mod.rsを作成し、共通のエラー変換関数を定義
   - エラーメッセージのテンプレート化
   - エラー型の整理と統一

2. パス操作の共通化
   - src/fs/path.rsを作成し、パス操作関連の関数を集約
   - パスの正規化、検証、変換のロジックを一元管理
   - セキュリティチェックの強化

3. トランザクション処理の整理
   - トランザクション状態の単純化
   - ロールバック処理の信頼性向上
   - エラーハンドリングの改善

4. テストの改善
   - src/fs/tests/mod.rsを作成し、共通のテストヘルパーを定義
   - テストケースの重複排除
   - テストカバレッジの向上

## 実装手順

1. エラーハンドリングの改善
   - [ ] src/fs/error/mod.rsの作成
   - [ ] エラー変換関数の実装
   - [ ] 既存コードのエラーハンドリング修正

2. パス操作の共通化
   - [ ] src/fs/path.rsの作成
   - [ ] パス操作関数の実装
   - [ ] 既存コードのパス操作修正

3. トランザクション処理の整理
   - [ ] トランザクション状態の見直し
   - [ ] ロールバック処理の改善
   - [ ] エラーハンドリングの統合

4. テストの改善
   - [ ] src/fs/tests/mod.rsの作成
   - [ ] テストヘルパーの実装
   - [ ] テストケースの整理

## 期待される効果

1. コードの保守性向上
   - 重複コードの削減
   - エラーハンドリングの一貫性
   - パス操作の信頼性向上

2. 品質の向上
   - バグの発見と修正が容易に
   - テストカバレッジの向上
   - セキュリティの向上

3. 開発効率の向上
   - 共通機能の再利用
   - テストの作成が容易に
   - デバッグの効率化 