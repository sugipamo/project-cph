# Arcを用いたイミュータブル設計へのリファクタリング計画

## 目的
- 状態管理をよりイミュータブルな設計に移行
- `Arc`を活用して参照カウントベースの共有を実現
- スレッドセーフな設計の実現
- パフォーマンスの最適化

## 対象コンポーネント
1. Docker状態管理
   - `ContainerStateManager`
   - `StateManager`
   - `ContainerState`

2. コンテスト状態管理
   - `ContestState`
   - `ValidatedState`

3. ファイルシステム操作
   - `FileTransaction`
   - `FileManager`

## 実装計画

### Phase 1: Docker状態管理のリファクタリング
1. `ContainerState`の各フィールドをArcでラップ
2. `StateManager`をイミュータブルな設計に変更
   - HashMapをArc<RwLock<HashMap>>に変更
   - 状態更新メソッドの設計変更
3. `ContainerStateManager`の最適化
   - 既存のArc<RwLock>の使用を維持
   - 状態遷移ロジックの改善

### Phase 2: コンテスト状態管理の拡張
1. 既存のArc実装の活用
2. バリデーション機能の強化
3. 状態遷移の型安全性向上

### Phase 3: ファイルシステム操作の改善
1. `FileTransaction`のイミュータブル化
   - 操作履歴の不変性保証
   - ロールバック機能の強化
2. `FileManager`の最適化
   - パス操作の効率化
   - エラーハンドリングの改善

## 実装の注意点
1. 後方互換性の維持
2. パフォーマンスへの影響の最小化
3. エラーハンドリングの適切な実装
4. テストカバレッジの維持・向上

## テスト計画
1. 単体テストの追加
2. 統合テストの更新
3. パフォーマンステストの実施

## マイグレーション戦略
1. 段階的な移行
2. 各フェーズでのテスト実行
3. 必要に応じたロールバック手順の準備 