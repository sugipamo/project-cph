# src/fs ディレクトリ構造のリファクタリング計画

## 現状の構造
```
src/fs/
├── backup.rs      - バックアップ関連の機能
├── core.rs        - ファイルシステムの基本操作
├── error/         - エラー定義
│   └── mod.rs
├── manager.rs     - ファイルシステム管理
├── mod.rs         - モジュール定義・再エクスポート
├── path.rs        - パス操作ユーティリティ
├── tests/         - テストモジュール
│   └── mod.rs
└── transaction.rs - トランザクション処理
```

## 分析
1. 現在の構造は機能ごとに適切に分割されている
2. エラー処理は独立したモジュールとして分離されている
3. テストも適切に分離されている
4. mod.rsのみのフォルダは単一ファイルに変更可能

## 提案する変更点
1. 基本的な構造は論理的で明確なため、大きな変更は不要
2. 以下の小さな改善を提案：
   - core.rsの機能が多いため、operations/ディレクトリを作成し、機能別に分割
   - utilsディレクトリを作成し、path.rsをその下に移動
   - types.rsを作成し、共通の型定義を集約
   - mod.rsのみのフォルダを単一のファイルに変更

## 新しい構造
```
src/fs/
├── backup.rs
├── error.rs
├── operations/
│   ├── mod.rs
│   ├── read.rs
│   ├── write.rs
│   └── delete.rs
├── utils/
│   ├── mod.rs
│   └── path.rs
├── types.rs
├── manager.rs
├── transaction.rs
├── mod.rs
└── tests.rs
```

## 実装手順
1. 新しいディレクトリ構造の作成
2. mod.rsのみのフォルダを単一ファイルに変更
   - error/mod.rs → error.rs
   - tests/mod.rs → tests.rs
3. core.rsの機能を operations/ 配下に分割
4. utils/ディレクトリの作成とpath.rsの移動
5. types.rsの作成と共通型の移動
6. mod.rsの更新
7. テストの更新

## 期待される効果
1. コードの整理による保守性の向上
2. 関連する機能のグループ化による可読性の向上
3. 将来の機能追加時の拡張性向上
4. シンプルなファイル構造による分かりやすさの向上 