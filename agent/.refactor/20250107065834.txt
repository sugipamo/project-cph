# イミュータブルな設計への移行計画

## 目的
- 状態の変更を最小限に抑え、予測可能性と信頼性を向上させる
- 並行処理時の安全性を向上させる
- コードの理解しやすさを向上させる

## 対象モジュール
1. src/docker/state/*
2. src/contest/model/*
3. src/fs/*

## 具体的な変更内容

### 1. State構造体の改善
- 可変フィールドを最小限にする
- 状態変更メソッドを新しいインスタンスを返す形式に変更
- Cloneトレイトの実装を検討

### 2. トランザクション処理の改善
- fs::transactionモジュールをイミュータブルな設計に変更
- 状態変更を一時的なトランザクションオブジェクトに集約
- コミット時に新しい状態を返す

### 3. コンテナ操作の改善
- docker::state::operationsモジュールの操作をイミュータブルに
- 各操作が新しい状態を返すように変更
- 副作用を明確に分離

### 4. バリデーション処理の改善
- バリデーション結果をイミュータブルな構造体として表現
- エラー状態を列挙型で表現
- 状態チェックを純粋関数として実装

## 実装手順
1. 各モジュールの状態管理部分を特定
2. イミュータブルな代替実装を作成
3. 既存のミュータブルなコードを段階的に置き換え
4. テストの追加と実行
5. パフォーマンスの検証と必要に応じた最適化

## 注意点
- 大きな状態オブジェクトのコピーによるパフォーマンス影響を考慮
- Arc/Rcの適切な使用による不必要なクローンの回避
- 既存のAPIとの互換性維持
- 段階的な移行による影響の最小化 