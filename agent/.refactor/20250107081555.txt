# ファイルシステム関連のリファクタリング計画

## 1. エラー処理の統合
- `fs/error/`ディレクトリに全てのエラー関連コードを移動
- エラーの種類を一箇所に統合
- エラーヘルパー関数の命名を統一

### 具体的な変更
1. `fs/error/kind.rs`を基準にエラー定義を統合
2. `fs/error/helpers.rs`にヘルパー関数を集約
3. 古い`fs/error.rs`を削除

## 2. ファイル操作の整理
- 基本的なファイル操作を`operations.rs`に集約
- `FileManager`の責務を明確化
- トランザクション処理をシンプル化

### 具体的な変更
1. `operations.rs`を`core.rs`にリネーム
2. 基本操作を`core.rs`に移動
3. `manager.rs`はトランザクション管理に特化

## 3. Docker関連の統合
- Docker関連のファイル操作を`docker/fs.rs`に統合
- `fs/docker.rs`を削除

## 4. 新しいモジュール構成
```
src/fs/
├── error/
│   ├── kind.rs     # エラー種別の定義
│   ├── helpers.rs  # エラーヘルパー関数
│   └── mod.rs      # エラーモジュールのエクスポート
├── core.rs         # 基本的なファイル操作
├── manager.rs      # トランザクション管理
├── transaction.rs  # トランザクション実装
├── backup.rs       # バックアップ機能
└── mod.rs         # モジュールのエクスポート
```

## 5. 命名規則の統一
- エラー関数: `create_xxx_error`形式に統一
- 操作関数: 動詞+名詞形式に統一（例：`create_file`, `read_file`）
- トランザクション関連: `Transaction`プレフィックスを使用

## 6. テストの整備
- 各モジュールに対応するテストを追加
- エラーケースのテストを強化
- トランザクションのテストを充実

## 実装順序
1. エラー処理の統合
2. 基本操作の整理
3. Docker関連の統合
4. テストの追加
5. ドキュメントの更新 