# イミュータブルな設計への移行計画 - src/config

## 現状の課題
- 設定値の変更が可能な設計になっている
- 履歴管理が複雑
- リスナーの管理が複雑

## リファクタリングの目的
- 設定値を完全にイミュータブルにする
- 設定変更を新しいインスタンスの生成として扱う
- 型安全性の向上
- コードの簡素化

## 具体的な変更点

1. ConfigNodeの変更
- `with_value`メソッドを削除し、新しいインスタンスを返すコンストラクタのみにする
- 内部の値をより厳密にイミュータブルにする

2. Configの変更
- 履歴管理を削除（イミュータブルなので不要）
- リスナー機能を削除（イミュータブルなので不要）
- 設定変更操作を新しいインスタンスを返す形に変更

3. 型システムの強化
- より厳密な型チェックの導入
- カスタムバリデーションの簡素化

4. エラー処理の改善
- より具体的なエラー型の導入
- エラーメッセージの改善

## 実装手順

1. 新しい型定義の追加
2. 既存のミュータブルなメソッドの削除
3. イミュータブルな操作の実装
4. テストの更新
5. ドキュメントの更新

## 影響範囲
- src/config/mod.rs
- src/config/tests.rs
- 設定を使用している他のモジュール

## 検証方法
1. 既存のテストが通ることを確認
2. 新しい機能のテストを追加
3. 実際の使用シーンでの動作確認 