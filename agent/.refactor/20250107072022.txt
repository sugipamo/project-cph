# イミュータブルな設計へのリファクタリング計画

## 目的
- 状態の変更を明示的にし、予測可能性を向上
- 並行処理の安全性を向上
- テストの容易性を向上

## 対象コンポーネント

### 1. コンテスト状態管理 (`src/contest/model/state.rs`)
- 状態の変更を不変な新しいインスタンスの生成として実装
- 状態遷移を明示的なメソッドとして定義
- 履歴追跡機能の追加

### 2. ファイルシステム操作 (`src/fs`)
- トランザクション的な操作の導入
- 操作の結果を新しい状態として返す
- 一時的な状態変更のロールバック機能

### 3. Docker状態管理 (`src/docker/state`)
- コンテナ状態の不変な表現
- 状態変更を新しいインスタンス生成として実装
- 状態遷移の検証機能

### 4. 設定管理 (`src/config`)
- 設定の不変性を保証
- 設定変更を新しいインスタンス生成として実装
- 設定の検証機能

## 実装方針

1. 各コンポーネントで:
   - データ構造を`#[derive(Clone)]`で実装
   - 状態を変更するメソッドは新しいインスタンスを返す
   - 内部可変性が必要な場合は`Arc<RwLock<_>>`を使用
   - バリデーションは構築時に行う

2. エラー処理:
   - 結果型（Result）を一貫して使用
   - エラー状態も不変として扱う
   - カスタムエラー型の整理

3. テスト:
   - 状態遷移のテストを追加
   - プロパティベースドテストの導入
   - 並行処理のテスト強化

## 実装順序

1. `src/contest/model/state.rs`
   - 基本的な状態管理の実装
   - テストの追加

2. `src/fs/transaction.rs`
   - トランザクション機能の実装
   - ロールバック機能の追加

3. `src/docker/state/manager.rs`
   - 状態管理の改善
   - コンテナライフサイクルの整理

4. `src/config/mod.rs`
   - 設定管理の改善
   - バリデーション機能の追加

## 注意点

- 後方互換性の維持
- パフォーマンスへの影響の最小化
- メモリ使用量の考慮
- エラー処理の一貫性

## 検証方法

1. ユニットテストの追加
2. 統合テストの追加
3. パフォーマンステスト
4. 並行処理テスト 