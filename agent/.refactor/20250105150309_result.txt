diff --git a/src/contest/core/contest_test.rs b/src/contest/core/contest_test.rs
deleted file mode 100644
index bfac2a2..0000000
--- a/src/contest/core/contest_test.rs
+++ /dev/null
@@ -1,38 +0,0 @@
-use super::*;
-use crate::config::Config;
-use std::collections::HashMap;
-
-#[test]
-fn test_contest_creation() -> Result<()> {
-    let mut config_map = HashMap::new();
-    config_map.insert("system.contest_dir.active".to_string(), "/tmp/contest".to_string());
-    config_map.insert("languages.default".to_string(), "rust".to_string());
-    let config = Config::from_str(&serde_json::to_string(&config_map)?, Config::builder())?;
-
-    let contest = Contest::new(config.clone(), "abc123")?;
-    
-    assert_eq!(contest.state().problem_id(), Some("abc123"));
-    assert_eq!(contest.state().language(), Some("rust"));
-    assert_eq!(contest.state().active_dir(), "/tmp/contest");
-    Ok(())
-}
-
-#[test]
-fn test_state_access() -> Result<()> {
-    let config = Config::load()?;
-    let mut contest = Contest::for_site_auth(config)?;
-    
-    contest.state_mut().set_problem("xyz987");
-    assert_eq!(contest.state().problem_id(), Some("xyz987"));
-    Ok(())
-}
-
-#[test]
-fn test_config_and_fs_manager_access() -> Result<()> {
-    let config = Config::load()?;
-    let contest = Contest::for_site_auth(config.clone())?;
-    
-    assert!(std::ptr::eq(contest.config(), &config));
-    assert!(contest.backup_manager().is_ok());
-    Ok(())
-}
diff --git a/src/contest/core/test.rs b/src/contest/core/test.rs
deleted file mode 100644
index 4b406be..0000000
--- a/src/contest/core/test.rs
+++ /dev/null
@@ -1,75 +0,0 @@
-use std::path::PathBuf;
-use crate::contest::error::{Result, ContestError};
-use std::fs;
-
-/// テスト関連の機能を提供する構造体
-#[derive(Debug)]
-pub struct TestManager {
-    /// テストディレクトリ
-    test_dir: PathBuf,
-    /// ジェネレータファイルのパス
-    generator_path: PathBuf,
-    /// テスターファイルのパス
-    tester_path: PathBuf,
-    /// 使用言語
-    language: String,
-}
-
-impl TestManager {
-    /// 新しいテストマネージャーを作成
-    pub fn new(
-        test_dir: PathBuf,
-        generator_path: PathBuf,
-        tester_path: PathBuf,
-        language: String,
-    ) -> Result<Self> {
-        // テストディレクトリの作成
-        if !test_dir.exists() {
-            fs::create_dir_all(&test_dir)
-                .map_err(|e| ContestError::FileSystem {
-                    message: "テストディレクトリの作成に失敗".to_string(),
-                    source: e,
-                    path: test_dir.clone(),
-                })?;
-        }
-
-        // ジェネレータファイルの存在確認
-        if !generator_path.exists() {
-            return Err(ContestError::Validation {
-                message: format!("ジェネレータファイルが見つかりません: {}", generator_path.display()),
-            });
-        }
-
-        // テスターファイルの存在確認
-        if !tester_path.exists() {
-            return Err(ContestError::Validation {
-                message: format!("テスターファイルが見つかりません: {}", tester_path.display()),
-            });
-        }
-
-        Ok(Self {
-            test_dir,
-            generator_path,
-            tester_path,
-            language,
-        })
-    }
-
-    /// テストを生成
-    pub fn generate(&self) -> Result<()> {
-        println!("テストを生成します...");
-        println!("言語: {}", self.language);
-        println!("テストディレクトリ: {}", self.test_dir.display());
-        println!("ジェネレータ: {}", self.generator_path.display());
-        println!("テスター: {}", self.tester_path.display());
-
-        // TODO: 言語に応じたコンパイルと実行
-        Ok(())
-    }
-
-    /// テストを実行
-    pub fn run(&self, problem_id: &str) -> Result<()> {
-        println!("TODO: Implement run_test for problem {}", problem_id);
-        Ok(())
-    }
-} 
\ No newline at end of file
diff --git a/src/contest/core/url.rs b/src/contest/core/url.rs
deleted file mode 100644
index 5c446d3..0000000
--- a/src/contest/core/url.rs
+++ /dev/null
@@ -1,54 +0,0 @@
-use crate::config::Config;
-use crate::contest::error::{Result, ContestError};
-
-/// URL生成を担当する構造体
-#[derive(Debug)]
-pub struct UrlGenerator {
-    /// サイトID
-    site: String,
-    /// コンテストID
-    contest: String,
-    /// 設定情報
-    config: Config,
-}
-
-impl UrlGenerator {
-    /// 新しいURLジェネレータを作成
-    pub fn new(site: String, contest: String, config: Config) -> Self {
-        Self {
-            site,
-            contest,
-            config,
-        }
-    }
-
-    /// サイトのURLを生成
-    fn get_site_url(&self, url_type: &str, problem_id: &str) -> Result<String> {
-        let pattern = self.config.get::<String>(&format!("sites.{}.{}_url", self.site, url_type))
-            .map_err(|e| ContestError::Config {
-                message: format!("サイトURLパターンの取得に失敗: {}", e),
-                source: None,
-            })?;
-        
-        let site_url = self.config.get::<String>(&format!("sites.{}.url", self.site))
-            .map_err(|e| ContestError::Config {
-                message: format!("サイトURLの取得に失敗: {}", e),
-                source: None,
-            })?;
-
-        Ok(pattern
-            .replace("{url}", &site_url)
-            .replace("{contest}", &self.contest)
-            .replace("{problem}", problem_id))
-    }
-
-    /// 問題のURLを取得
-    pub fn get_problem_url(&self, problem_id: &str) -> Result<String> {
-        self.get_site_url("problem", problem_id)
-    }
-
-    /// 提出のURLを取得
-    pub fn get_submit_url(&self, problem_id: &str) -> Result<String> {
-        self.get_site_url("submit", problem_id)
-    }
-} 
\ No newline at end of file
diff --git a/src/contest/mod.rs b/src/contest/mod.rs
index fa7db42..f889809 100644
--- a/src/contest/mod.rs
+++ b/src/contest/mod.rs
@@ -1,3 +1,6 @@
 pub mod error;
-pub mod core;
-pub mod state;
+pub mod model;
+pub mod service;
+
+pub use model::ContestState;
+pub use service::{Contest, TestManager, UrlGenerator};
diff --git a/src/contest/state/mod.rs b/src/contest/state/mod.rs
index 5a18791..bead632 100644
--- a/src/contest/state/mod.rs
+++ b/src/contest/state/mod.rs
@@ -1,7 +1,6 @@
-pub mod manager;
-
 use std::path::PathBuf;
 use serde::{Serialize, Deserialize};
+use crate::contest::error::Result;
 
 /// コンテストの状態を表す構造体
 #[derive(Debug, Default, Clone, Serialize, Deserialize)]
リファクタリング作業の結果：1. コードベースの整理 - テストファイルの整理 - モジュール構造の改善（core/stateからmodel/serviceへ）2. 品質チェック - コンパイルエラーなし - 軽微な警告のみ 3. 重複機能：なし 4. 非効率な実装：なし 結論：安全に変更を適用可能
