# リファクタリング計画

## 1. エラーハンドリングの改善

### 1.1 unwrap/expect の置き換え
- src/test/mod.rs の unwrap() 呼び出しを適切なエラーハンドリングに置き換え
- src/docker/fs.rs のテストコードでの unwrap() の使用を改善

### 1.2 エラーメッセージの統一
- src/error.rs のエラー型を整理
- エラーメッセージの日本語表記の統一
- コンテキスト情報の追加

## 2. コードの重複排除

### 2.1 テストケース関連
- test/mod.rs と contest/service/test.rs の機能を統合
- 共通インターフェースの作成
- テストケース関連の操作を一元化

### 2.2 ファイル操作
- fs/manager.rs と docker/fs.rs の重複コードを整理
- 共通のトレイトを作成
- ファイル操作の抽象化レベルを統一

## 3. 型安全性の向上

### 3.1 型の厳密化
- PathBuf の使用を統一
- 文字列型の適切な使用（String vs &str）
- カスタム型の導入（TestCase, ProblemId など）

### 3.2 エラー型の整理
- CphError と ContestError の関係の明確化
- エラー変換の簡略化
- Result型の使用の統一

## 4. テストカバレッジの向上

### 4.1 モックの活用
- DockerCommandExecutor のモックテストの追加
- FileSystem 操作のモックテストの追加
- ContainerManager のテストカバレッジ向上

### 4.2 エッジケースのテスト
- エラーケースのテスト追加
- 境界値のテスト追加
- 並行処理のテスト追加

## 実装順序

1. エラーハンドリングの改善（最も重要）
2. 型安全性の向上（エラーハンドリングと密接に関連）
3. コードの重複排除（既存コードの整理）
4. テストカバレッジの向上（変更の検証） 