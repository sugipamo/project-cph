# mutからイミュータブルへの移行計画

## 分析結果
以下のカテゴリでmutの使用が確認されました：

1. フォーマッタの実装（fmt::Formatter）
2. ベクター操作（Vec::new()とpush操作）
3. 文字列操作（String::new()と入力操作）
4. コマンド実行時の引数構築
5. コンテナ操作のトレイト実装
6. 状態管理（ContestState, DockerState等）

## 移行方針

### 優先度高（即時対応可能）
1. ベクター操作
   - collect()を使用した変換
   - イテレータチェーンの活用
   - 初期容量指定による事前アロケーション

2. 文字列操作
   - String::fromの使用
   - format!マクロの活用
   - イミュータブルな文字列スライスの使用

### 優先度中（要検討）
1. コマンド実行
   - ビルダーパターンの活用
   - 新しいインスタンス生成による状態変更

2. 状態管理
   - イミュータブルなデータ構造への移行
   - Copy/Cloneトレイトの活用

### 変更不要（言語仕様上必要）
1. フォーマッタの実装
   - fmt::Formatterはstd::fmtの仕様上必要
   - そのままの実装を維持

2. トレイト実装
   - 非同期操作のインターフェースとして必要
   - 現状維持

## 実装手順
1. src/fs/manager.rsの変更
   - パス操作をイミュータブルに変更

2. src/fs/transaction.rsの変更
   - operationsのクローン操作を最小限に
   - イミュータブルなデータ構造の採用

3. src/config/mod.rsの変更
   - パス収集ロジックのイミュータブル化
   - イテレータベースの実装に変更

4. src/contest/service/test.rsの変更
   - テストケース収集のイミュータブル化
   - collect()を使用した実装に変更

## 注意点
- パフォーマンスへの影響を考慮
- テストカバレッジの維持
- 既存の動作を変更しない
- 段階的な移行の実施 