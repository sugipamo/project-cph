🧪 テスト実行...❌ テスト実行                                                                                  
✅ 構文チェック
✅ インポート解決チェック
✅ クイックスモークテスト
✅ Ruff自動修正
✅ コード品質チェック (ruff)
✅ 未使用コード検出
✅ 命名規則チェック
❌ 依存性注入チェック
✅ print使用チェック
✅ Infrastructure重複生成チェック
✅ None引数初期値チェック
✅ フォールバック処理チェック
✅ dict.get()使用チェック
✅ getattr()デフォルト値使用チェック
❌ クリーンアーキテクチャチェック
✅ Infrastructure->Operations依存関係チェック

⚠️  警告:
   未使用コードが検出されました:
     workflow/step/workflow.py:31: unreachable code after 'raise' (100% confidence)
   失敗したテスト:
     ERROR scripts/test_runner/smoke_test.py
     ERROR scripts/test_runner/test_runner.py
   カバレッジが低いファイル（80%未満）:
     infrastructure/providers/mock_regex_provider.py: 0%
     infrastructure/providers/regex_provider.py: 0%
     main.py: 0%
     operations/interfaces/regex_interface.py: 0%
     operations/interfaces/time_interface.py: 0%
     workflow/step/dependency.py: 7%
     context/resolver/config_resolver.py: 9%
     context/utils/validation_utils.py: 9%
     infrastructure/drivers/filesystem/path_operations.py: 9%
     workflow/step/step_generation_service.py: 10%
     infrastructure/persistence/sqlite/contest_manager.py: 12%
     infrastructure/persistence/sqlite/repositories/system_config_repository.py: 13%
     workflow/workflow_execution_service.py: 13%
     operations/pure/string_formatters.py: 14%
     cli/cli_app.py: 15%
     ... 他92件
💡 警告の対処方法:
    - 不要な警告の原因を特定し、コードを修正してください
    - 警告を無視せず、適切に対処することで品質を向上させます
    【Python実装例】
    • 命名規則: def calculate_total(items) → snake_case使用
    • Logger使用: logger.info(f'計算開始: {x} + {y}') → print文の代替
    • 明示的設定: timeout = config['timeout'] → dict.get()の代替
    • 属性チェック: if hasattr(obj, 'attr'): value = obj.attr → getattr()の代替
    • 依存性注入: def process_data(data, file_writer) → 副作用の委譲
    • Result型使用: result = error_converter.execute_with_conversion(op)
      if result.is_failure(): handle_error(result.error) → フォールバック処理の代替
❌ 修正が必要な問題:

その他のエラー:
📋 修正方針:
    エラーメッセージを詳細に確認してください
    関連するドキュメントを参照してください
    必要に応じてログを追加して問題を特定してください
    CLAUDE.mdのルールに照らし合わせて適切な対応を行ってください

    print()の使用が検出されました（ロギング使用を推奨）:
      infrastructure/providers/sys_provider.py:57 print(message)
      operations/pure/data_processors.py:37 current_group = acc.get(key, [])

クリーンアーキテクチャ違反:
📋 修正方針:
    【CLAUDE.mdルール適用】
    レイヤー間の依存関係を正しい方向に修正してください
    ドメイン層（operations）は外部依存を持ってはいけません
    インフラストラクチャ層への直接依存を避け、依存性注入を使用してください
    循環依存を解消してください
    例: src.operations -> src.infrastructure (×) / main.pyからの注入 (○)

    context/dockerfile_resolver.py:35 コメントアウトされたコード: # Content cache (None = not loaded, actual content once loaded)
    context/formatters/context_formatter.py:9 コメントアウトされたコード: # from src.infrastructure.drivers.docker.utils.docker_naming import (
    context/user_input_parser/user_input_parser.py:6 コメントアウトされたコード: # from .execution_context import ExecutionContext  # 新システムで置き換え済み
    context/user_input_parser/user_input_parser.py:11 コメントアウトされたコード: # from src.infrastructure.di_container import DIKey
    context/user_input_parser/user_input_parser.py:12 コメントアウトされたコード: # from src.infrastructure.persistence.sqlite.system_config_loader import SystemConfigLoader
    infrastructure/config/di_config.py:195 コメントアウトされたコード: # from src.workflow.preparation.file.file_pattern_service import FilePatternService
    infrastructure/config/di_config.py:197 コメントアウトされたコード: # config_loader = container.resolve("json_config_loader")
    infrastructure/config/di_config.py:198 コメントアウトされたコード: # file_driver = container.resolve("file_driver")
    infrastructure/config/di_config.py:199 コメントアウトされたコード: # logger = container.resolve("logger")
    infrastructure/drivers/python/python_driver.py:8 コメントアウトされたコード: # from src.configuration.config_manager import TypeSafeConfigNodeManager
    infrastructure/persistence/base/base_repository.py:39 コメントアウトされたコード: # - find_all(self, limit: Optional[int] = None, offset: Optional[int] = None) -> List[Dict[str, Any]]
    operations/requests/composite/composite_request.py:55 コメントアウトされたコード: #     from src.application.orchestration.output_manager import OutputManager
    workflow/step/workflow.py:41 コメントアウトされたコード: #     request = factory.create_request_from_step(step, execution_context, env_manager)

副作用が検出されました:
📋 修正方針:
    【CLAUDE.mdルール適用】
    副作用はsrc/infrastructure、tests/infrastructureのみで許可されます
    全ての副作用はmain.pyから依存性注入してください
    ビジネスロジック層では副作用を避けてください
    ファイル操作、外部APIコール、データベースアクセスはInfrastructure層で実装してください

    configuration/config_manager.py:112 副作用配置違反: ファイルI/O操作 - return self._command_type if hasattr(self, '_command_type') else 'open'
    configuration/config_manager.py:565 副作用配置違反: ファイルI/O操作 - command_type: str = "open") -> TypedExecutionConfiguration:
    context/user_input_parser/user_input_parser.py:13 副作用配置違反: ネットワーク操作 - from src.operations.requests.file.file_op_type import FileOpType
    context/user_input_parser/user_input_parser.py:14 副作用配置違反: ネットワーク操作 - from src.operations.requests.file.file_request import FileRequest
    operations/factories/request_factory.py:4 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    operations/factories/request_factory.py:5 副作用配置違反: ネットワーク操作 - from src.operations.requests.docker.docker_request import DockerOpType, DockerRequest
    operations/factories/request_factory.py:6 副作用配置違反: ネットワーク操作 - from src.operations.requests.file.file_op_type import FileOpType
    operations/factories/request_factory.py:7 副作用配置違反: ネットワーク操作 - from src.operations.requests.file.file_request import FileRequest
    operations/factories/request_factory.py:8 副作用配置違反: ネットワーク操作 - from src.operations.requests.python.python_request import PythonRequest
    operations/factories/request_factory.py:9 副作用配置違反: ネットワーク操作 - from src.operations.requests.shell.shell_request import ShellRequest
    operations/requests/base/base_request.py:1 副作用配置違反: ネットワーク操作 - """Base class for all operation requests."""
    operations/requests/base/base_request.py:10 副作用配置違反: ネットワーク操作 - """Foundation class for all operation requests.
    operations/requests/composite/base_composite_request.py:6 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    operations/requests/composite/base_composite_request.py:10 副作用配置違反: ネットワーク操作 - """Foundation class for composite requests that contain multiple sub-requests.
    operations/requests/composite/composite_request.py:6 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    operations/requests/composite/composite_request.py:7 副作用配置違反: ネットワーク操作 - from src.operations.requests.composite.base_composite_request import CompositeRequestFoundation
    operations/requests/composite/composite_request.py:8 副作用配置違反: ネットワーク操作 - from src.operations.requests.composite.composite_structure import CompositeStructure
    operations/requests/composite/composite_request.py:12 副作用配置違反: ネットワーク操作 - """Composite request that contains multiple sub-requests."""
    operations/requests/composite/composite_request.py:29 副作用配置違反: ネットワーク操作 - @requests.setter
    operations/requests/composite/composite_structure.py:6 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    operations/requests/docker/docker_request.py:8 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    operations/requests/docker/docker_request.py:9 副作用配置違反: ネットワーク操作 - from src.operations.requests.composite.composite_request import CompositeRequest
    operations/requests/file/file_request.py:6 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    operations/requests/file/file_request.py:7 副作用配置違反: ネットワーク操作 - from src.operations.requests.file.file_op_type import FileOpType
    operations/requests/python/python_request.py:6 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    operations/requests/shell/shell_request.py:7 副作用配置違反: ネットワーク操作 - from src.operations.requests.base.base_request import OperationRequestFoundation
    workflow/step/workflow.py:5 副作用配置違反: ネットワーク操作 - from src.operations.requests.composite.composite_request import CompositeRequest
