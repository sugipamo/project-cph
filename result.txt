🧪 テスト実行...❌ テスト実行                                                                                  
✅ 構文チェック
✅ インポート解決チェック
✅ クイックスモークテスト
✅ Ruff自動修正
❌ コード品質チェック (ruff)
✅ 未使用コード検出
✅ 命名規則チェック
✅ 依存性注入チェック
✅ print使用チェック
✅ Infrastructure重複生成チェック
✅ None引数初期値チェック
✅ フォールバック処理チェック
✅ dict.get()使用チェック
✅ getattr()デフォルト値使用チェック
❌ クリーンアーキテクチャチェック
✅ Infrastructure->Operations依存関係チェック

⚠️  警告:
   未使用コードが検出されました:
     context/user_input_parser/user_input_parser.py:59: unused variable 'context_info' (100% confidence)
   命名規則の問題が検出されました:
     無駄なプレフィックスファイル名: configuration/pure_config_manager.py
     無駄なプレフィックスクラス名: configuration/pure_config_manager.py:25 class PureConfigManager
     無駄なプレフィックスクラス名: infrastructure/config/di_config.py:270 class BasicLogger
   失敗したテスト:
     ERROR scripts/test_runner/smoke_test.py
     ERROR scripts/test_runner/test_runner.py
   カバレッジが低いファイル（80%未満）:
     configuration/pure_config_manager.py: 0%
     infrastructure/config/config_loader_service.py: 0%
     infrastructure/providers/mock_regex_provider.py: 0%
     infrastructure/providers/regex_provider.py: 0%
     main.py: 0%
     operations/interfaces/regex_interface.py: 0%
     operations/interfaces/time_interface.py: 0%
     workflow/step/dependency.py: 7%
     context/resolver/config_resolver.py: 9%
     context/utils/validation_utils.py: 9%
     infrastructure/drivers/filesystem/path_operations.py: 9%
     workflow/step/step_generation_service.py: 10%
     infrastructure/persistence/sqlite/contest_manager.py: 12%
     infrastructure/persistence/sqlite/repositories/system_config_repository.py: 13%
     workflow/workflow_execution_service.py: 13%
     ... 他95件
💡 警告の対処方法:
    - 不要な警告の原因を特定し、コードを修正してください
    - 警告を無視せず、適切に対処することで品質を向上させます
    【Python実装例】
    • 命名規則: def calculate_total(items) → snake_case使用
    • Logger使用: logger.info(f'計算開始: {x} + {y}') → print文の代替
    • 明示的設定: timeout = config['timeout'] → dict.get()の代替
    • 属性チェック: if hasattr(obj, 'attr'): value = obj.attr → getattr()の代替
    • 依存性注入: def process_data(data, file_writer) → 副作用の委譲
    • Result型使用: result = error_converter.execute_with_conversion(op)
      if result.is_failure(): handle_error(result.error) → フォールバック処理の代替
❌ 修正が必要な問題:

コード品質エラー（Ruff）:
📋 修正方針:
    Ruffの指摘に従ってコードスタイルを統一してください
    未使用のインポートや変数を削除してください
    命名規則に従ってください（PEP 8準拠）
    コードの可読性を向上させてください

    src/configuration/pure_config_manager.py:77:20: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
       |
    75 |             value = resolve_best(self.root_node, path)
    76 |             if not isinstance(value, expected_type):
    77 |                 if expected_type == str and not isinstance(value, str):
       |                    ^^^^^^^^^^^^^^^^^^^^ E721
    78 |                     value = str(value)
    79 |                 elif expected_type == int and isinstance(value, str):
       |
    
    src/configuration/pure_config_manager.py:79:22: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
       |
    77 |                 if expected_type == str and not isinstance(value, str):
    78 |                     value = str(value)
    79 |                 elif expected_type == int and isinstance(value, str):
       |                      ^^^^^^^^^^^^^^^^^^^^ E721
    80 |                     value = int(value)
    81 |                 elif expected_type == bool and isinstance(value, str):
       |
    
    src/configuration/pure_config_manager.py:81:22: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
       |
    79 |                 elif expected_type == int and isinstance(value, str):
    80 |                     value = int(value)
    81 |                 elif expected_type == bool and isinstance(value, str):
       |                      ^^^^^^^^^^^^^^^^^^^^^ E721
    82 |                     value = value.lower() in ('true', '1', 'yes', 'on')
    83 |                 else:
       |
    
    src/configuration/pure_config_manager.py:87:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
       |
    85 |             return value
    86 |         except KeyError:
    87 |             raise KeyError(f"Config path {path} not found")
       |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    88 |
    89 |     def resolve_template_typed(self, template: str, context: Dict[str, Any],
       |
    
    src/configuration/pure_config_manager.py:109:16: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
        |
    108 |         if not isinstance(result, expected_type):
    109 |             if expected_type == str:
        |                ^^^^^^^^^^^^^^^^^^^^ E721
    110 |                 result = str(result)
    111 |             else:
        |
    
    Found 56 errors (51 fixed, 5 remaining).

その他のエラー:
📋 修正方針:
    エラーメッセージを詳細に確認してください
    関連するドキュメントを参照してください
    必要に応じてログを追加して問題を特定してください
    CLAUDE.mdのルールに照らし合わせて適切な対応を行ってください

    src/configuration/pure_config_manager.py:77:20: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
       |
    75 |             value = resolve_best(self.root_node, path)
    76 |             if not isinstance(value, expected_type):
    77 |                 if expected_type == str and not isinstance(value, str):
       |                    ^^^^^^^^^^^^^^^^^^^^ E721
    78 |                     value = str(value)
    79 |                 elif expected_type == int and isinstance(value, str):
       |
    
    src/configuration/pure_config_manager.py:79:22: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
       |
    77 |                 if expected_type == str and not isinstance(value, str):
    78 |                     value = str(value)
    79 |                 elif expected_type == int and isinstance(value, str):
       |                      ^^^^^^^^^^^^^^^^^^^^ E721
    80 |                     value = int(value)
    81 |                 elif expected_type == bool and isinstance(value, str):
       |
    
    src/configuration/pure_config_manager.py:81:22: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
       |
    79 |                 elif expected_type == int and isinstance(value, str):
    80 |                     value = int(value)
    81 |                 elif expected_type == bool and isinstance(value, str):
       |                      ^^^^^^^^^^^^^^^^^^^^^ E721
    82 |                     value = value.lower() in ('true', '1', 'yes', 'on')
    83 |                 else:
       |
    
    src/configuration/pure_config_manager.py:87:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
       |
    85 |             return value
    86 |         except KeyError:
    87 |             raise KeyError(f"Config path {path} not found")
       |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    88 |
    89 |     def resolve_template_typed(self, template: str, context: Dict[str, Any],
       |
    
    src/configuration/pure_config_manager.py:109:16: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
        |
    108 |         if not isinstance(result, expected_type):
    109 |             if expected_type == str:
        |                ^^^^^^^^^^^^^^^^^^^^ E721
    110 |                 result = str(result)
    111 |             else:
        |
    
    Found 5 errors.
      context/user_input_parser/user_input_parser.py:326 command_type = context_data.get("command") or "help"
      context/user_input_parser/user_input_parser.py:327 language = context_data.get("language") or "python"
      context/user_input_parser/user_input_parser.py:328 contest_name = context_data.get("contest_name") or "default"
      context/user_input_parser/user_input_parser.py:329 problem_name = context_data.get("problem_name") or "a"
      context/user_input_parser/user_input_parser.py:330 env_type = context_data.get("env_type") or "default"

クリーンアーキテクチャ違反:
📋 修正方針:
    【CLAUDE.mdルール適用】
    レイヤー間の依存関係を正しい方向に修正してください
    ドメイン層（operations）は外部依存を持ってはいけません
    インフラストラクチャ層への直接依存を避け、依存性注入を使用してください
    循環依存を解消してください
    例: src.operations -> src.infrastructure (×) / main.pyからの注入 (○)

    src.cli.cli_app (cli) -> src.infrastructure.di_container (infrastructure)
    src.configuration.config_manager (configuration) -> src.infrastructure.di_container (infrastructure)
    src.configuration.pure_config_manager (configuration) -> src.context.resolver.config_resolver (context)
    src.context.user_input_parser.user_input_parser (context) -> src.infrastructure.config.config_loader_service (infrastructure)
    configuration/pure_config_manager.py:19 configuration層からcontext層への依存: src.context.resolver.config_resolver
    configuration/pure_config_manager.py:20 configuration層からcontext層への依存: src.context.resolver.config_resolver
    configuration/pure_config_manager.py:72 configuration層からcontext層への依存: src.context.resolver.config_resolver
    configuration/pure_config_manager.py:104 configuration層からcontext層への依存: src.context.resolver.config_resolver
    context/user_input_parser/user_input_parser.py:298 context層からinfrastructure層への直接依存: src.infrastructure.config.config_loader_service
