"""„Éá„Éê„ÉÉ„Ç∞„Çµ„Éº„Éì„Çπ - „Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ„ÅÆÁµ±Êã¨ÁÆ°ÁêÜ"""

from old_src.infrastructure.config.runtime_config_overlay import DebugConfigProvider, RuntimeConfigOverlay
from old_src.infrastructure.di_container import DIContainer


class DebugService:
    """„Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ„ÅÆÁµ±Êã¨„Çµ„Éº„Éì„Çπ

    „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆÁÆ°ÁêÜ„ÄÅ„É≠„Ç∞Ë®≠ÂÆö„ÄÅÂá∫ÂäõÂà∂Âæ°„ÇíÁµ±Êã¨„Åô„Çã„ÄÇ
    Ë≤¨Âãô„ÅÆÂàÜÈõ¢„Å®„Ç∑„É≥„Ç∞„É´„Éù„Ç§„É≥„Éà„Ç™„Éñ„Ç≥„É≥„Éà„É≠„Éº„É´„ÇíÂÆüÁèæ„ÄÇ
    """

    def __init__(self, infrastructure: DIContainer):
        self.infrastructure = infrastructure
        self.overlay = RuntimeConfigOverlay()
        self.config_provider = DebugConfigProvider(self.overlay)
        self._debug_enabled = False

    def enable_debug_mode(self) -> None:
        """„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ"""
        if self._debug_enabled:
            return

        # „Éá„Éê„ÉÉ„Ç∞Ë®≠ÂÆö„ÇíÊúâÂäπÂåñ
        self.config_provider.enable_debug_mode()

        # „É≠„Ç¨„Éº„É¨„Éô„É´„ÇíÊõ¥Êñ∞
        self._update_logger_levels()

        # „Éá„Éê„ÉÉ„Ç∞Áä∂ÊÖã„ÇíË®òÈå≤
        self._debug_enabled = True

        # „Éá„Éê„ÉÉ„Ç∞ÈñãÂßã„É°„ÉÉ„Çª„Éº„Ç∏
        self._show_debug_notification()

    def disable_debug_mode(self) -> None:
        """„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÇíÁÑ°ÂäπÂåñ"""
        if not self._debug_enabled:
            return

        # „Éá„Éê„ÉÉ„Ç∞Ë®≠ÂÆö„ÇíÁÑ°ÂäπÂåñ
        self.config_provider.disable_debug_mode()

        self._debug_enabled = False

    def is_debug_enabled(self) -> bool:
        """„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅåÊúâÂäπ„Åã„ÉÅ„Çß„ÉÉ„ÇØ"""
        return self._debug_enabled

    def get_debug_config_provider(self) -> DebugConfigProvider:
        """„Éá„Éê„ÉÉ„Ç∞Ë®≠ÂÆö„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíÂèñÂæó"""
        return self.config_provider

    def _update_logger_levels(self) -> None:
        """„É≠„Ç¨„Éº„É¨„Éô„É´„ÇíÊõ¥Êñ∞

        „Éó„É©„Ç§„Éô„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ„Å®„Åó„Å¶ÂÆüË£Ö„Åó„ÄÅÂ§ñÈÉ®„Åã„Çâ„ÅÆÁõ¥Êé•Êìç‰Ωú„ÇíÈò≤„Åê
        """
        logger_keys = ["unified_logger", "workflow_logger", "application_logger", "logger"]

        for logger_key in logger_keys:
            try:
                if self.infrastructure.is_registered(logger_key):
                    logger = self.infrastructure.resolve(logger_key)
                    if hasattr(logger, 'set_level'):
                        logger.set_level("DEBUG")
                        # Ë®≠ÂÆöÊàêÂäü„Çí„É≠„Ç∞„Å´Ë®òÈå≤„Åó„Å™„ÅÑÔºà„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„Åß„ÅÆ„É≠„Ç∞„É¨„Éô„É´Â§âÊõ¥„ÅØÊàêÂäü„Åó„Å¶ÂΩìÁÑ∂Ôºâ
                        pass
            except Exception as e:
                # ÂÄãÂà•„ÅÆ„É≠„Ç¨„ÉºË®≠ÂÆöÂ§±Êïó„ÅØË≠¶Âëä„Å®„Åó„Å¶Ë°®Á§∫
                # „É≠„Ç∞„Çµ„Éº„Éì„ÇπË®≠ÂÆöÂ§±Êïó„ÇíÂè¶„ÅÆ„É≠„Ç∞„Çµ„Éº„Éì„Çπ„Å´Ë®òÈå≤
                # Ë®≠ÂÆöÂ§±Êïó„ÅØ„Ç∑„Çπ„ÉÜ„É†„ÅÆ‰∏çÂÖ∑Âêà„ÇíÊÑèÂë≥„Åô„Çã„Åü„ÇÅ„ÄÅ„Ç®„É©„Éº„Åß„ÅØ„Å™„Åè‰æãÂ§ñ„ÅßÂá¶ÁêÜ
                raise RuntimeError(f"„É≠„Ç∞„Çµ„Éº„Éì„Çπ '{logger_key}' „ÅÆË®≠ÂÆö„Å´Â§±Êïó: {e}") from e

    def _show_debug_notification(self) -> None:
        """„Éá„Éê„ÉÉ„Ç∞ÈñãÂßãÈÄöÁü•„ÇíË°®Á§∫"""
        # „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπÂåñÈÄöÁü•„Çí„É≠„Ç∞„Å´Ë®òÈå≤
        try:
            if self.infrastructure.is_registered("unified_logger"):
                logger = self.infrastructure.resolve("unified_logger")
                logger.info("Debug mode enabled - Ë©≥Á¥∞„É≠„Ç∞„ÅåÂá∫Âäõ„Åï„Çå„Åæ„Åô")
        except Exception as e:
            # „É≠„Ç∞„Çµ„Éº„Éì„Çπ„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ‰æãÂ§ñ„ÅßÂá¶ÁêÜ
            raise RuntimeError(f"„Éá„Éê„ÉÉ„Ç∞ÈÄöÁü•„ÅÆ„É≠„Ç∞Âá∫Âäõ„Å´Â§±Êïó: {e}") from e

    def log_debug_context(self, context: dict) -> None:
        """„Éá„Éê„ÉÉ„Ç∞„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Çí„É≠„Ç∞Âá∫Âäõ

        Args:
            context: „Éá„Éê„ÉÉ„Ç∞Áî®„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàËæûÊõ∏
        """
        if not self._debug_enabled:
            return

        try:
            # „Ç§„É≥„Éï„É©„Çπ„Éà„É©„ÇØ„ÉÅ„É£„Åã„Çâ„É≠„Ç¨„Éº„ÇíÂèñÂæó
            if self.infrastructure.is_registered("logger"):
                logger = self.infrastructure.resolve("logger")
                logger.debug("üîç „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅåÊúâÂäπÂåñ„Åï„Çå„Åæ„Åó„Åü")
                logger.debug(f"üîç ÂÆüË°å„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà: {context}")
        except Exception as e:
            # „É≠„Ç¨„Éº„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Åß„ÅØ„Å™„Åè‰æãÂ§ñ„ÅßÂá¶ÁêÜ
            raise RuntimeError(f"„Éá„Éê„ÉÉ„Ç∞„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÅÆ„É≠„Ç∞Âá∫Âäõ„Å´Â§±Êïó: {e}") from e



class DebugServiceFactory:
    """DebugService„ÅÆ„Éï„Ç°„ÇØ„Éà„É™„Éº„ÇØ„É©„Çπ"""

    @staticmethod
    def create_debug_service(infrastructure: DIContainer) -> DebugService:
        """DebugService„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê

        Args:
            infrastructure: DI„Ç≥„É≥„ÉÜ„Éä

        Returns:
            DebugService„Ç§„É≥„Çπ„Çø„É≥„Çπ
        """
        return DebugService(infrastructure)
